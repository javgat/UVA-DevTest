// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Answer answer
//
// swagger:model Answer
type Answer struct {

	// corregida
	// Example: false
	Corregida bool `json:"corregida,omitempty"`

	// entregado
	// Example: false
	// Required: true
	Entregado *bool `json:"entregado"`

	// finish time
	// Example: 2021-02-25 14:44:55
	// Format: date-time
	FinishTime strfmt.DateTime `json:"finishTime,omitempty"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// puntuacion
	// Example: 8.7
	Puntuacion float64 `json:"puntuacion,omitempty"`

	// startime
	// Example: 2021-02-25 14:44:55
	// Format: date-time
	Startime strfmt.DateTime `json:"startime,omitempty"`

	// testid
	// Example: 343
	Testid int64 `json:"testid,omitempty"`

	// username
	// Example: javgat
	Username string `json:"username,omitempty"`
}

// Validate validates this answer
func (m *Answer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntregado(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinishTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Answer) validateEntregado(formats strfmt.Registry) error {

	if err := validate.Required("entregado", "body", m.Entregado); err != nil {
		return err
	}

	return nil
}

func (m *Answer) validateFinishTime(formats strfmt.Registry) error {
	if swag.IsZero(m.FinishTime) { // not required
		return nil
	}

	if err := validate.FormatOf("finishTime", "body", "date-time", m.FinishTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Answer) validateStartime(formats strfmt.Registry) error {
	if swag.IsZero(m.Startime) { // not required
		return nil
	}

	if err := validate.FormatOf("startime", "body", "date-time", m.Startime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this answer based on context it is used
func (m *Answer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Answer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Answer) UnmarshalBinary(b []byte) error {
	var res Answer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
