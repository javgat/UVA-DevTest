// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EmailConfiguration email configuration
//
// swagger:model EmailConfiguration
type EmailConfiguration struct {

	// from
	// Example: carlos@mail.com
	// Required: true
	// Pattern: ^[^@ \t\r\n]+@[^@ \t\r\n]+\.[^@ \t\r\n]+$
	// Format: email
	From *strfmt.Email `json:"from"`

	// frontendurl
	// Example: https://devtest.com
	// Required: true
	Frontendurl *string `json:"frontendurl"`

	// password
	// Example: password
	// Required: true
	Password *string `json:"password"`

	// serverhost
	// Example: smtp.gmail.com
	// Required: true
	Serverhost *string `json:"serverhost"`

	// serverport
	// Example: 587
	// Required: true
	Serverport *int64 `json:"serverport"`
}

// Validate validates this email configuration
func (m *EmailConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrontendurl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerhost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerport(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmailConfiguration) validateFrom(formats strfmt.Registry) error {

	if err := validate.Required("from", "body", m.From); err != nil {
		return err
	}

	if err := validate.Pattern("from", "body", m.From.String(), `^[^@ \t\r\n]+@[^@ \t\r\n]+\.[^@ \t\r\n]+$`); err != nil {
		return err
	}

	if err := validate.FormatOf("from", "body", "email", m.From.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EmailConfiguration) validateFrontendurl(formats strfmt.Registry) error {

	if err := validate.Required("frontendurl", "body", m.Frontendurl); err != nil {
		return err
	}

	return nil
}

func (m *EmailConfiguration) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *EmailConfiguration) validateServerhost(formats strfmt.Registry) error {

	if err := validate.Required("serverhost", "body", m.Serverhost); err != nil {
		return err
	}

	return nil
}

func (m *EmailConfiguration) validateServerport(formats strfmt.Registry) error {

	if err := validate.Required("serverport", "body", m.Serverport); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this email configuration based on context it is used
func (m *EmailConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EmailConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EmailConfiguration) UnmarshalBinary(b []byte) error {
	var res EmailConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
