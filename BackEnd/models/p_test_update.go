// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PTestUpdate p test update
//
// swagger:model PTestUpdate
type PTestUpdate struct {

	// acceso publico
	// Example: true
	// Required: true
	AccesoPublico *bool `json:"accesoPublico"`

	// auto correct
	// Example: true
	// Required: true
	AutoCorrect *bool `json:"autoCorrect"`

	// Maximum of tries that a user has solving a test. If <1, there is no limit of tries.
	// Required: true
	MaxIntentos *int64 `json:"maxIntentos"`

	// max minutes
	// Example: 60
	// Required: true
	// Minimum: 0
	MaxMinutes *int64 `json:"maxMinutes"`

	// tiempo estricto
	// Example: true
	// Required: true
	TiempoEstricto *bool `json:"tiempoEstricto"`

	// visibilidad
	// Required: true
	// Enum: [alEntregar alCorregir manual]
	Visibilidad *string `json:"visibilidad"`
}

// Validate validates this p test update
func (m *PTestUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccesoPublico(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutoCorrect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxIntentos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxMinutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTiempoEstricto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibilidad(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PTestUpdate) validateAccesoPublico(formats strfmt.Registry) error {

	if err := validate.Required("accesoPublico", "body", m.AccesoPublico); err != nil {
		return err
	}

	return nil
}

func (m *PTestUpdate) validateAutoCorrect(formats strfmt.Registry) error {

	if err := validate.Required("autoCorrect", "body", m.AutoCorrect); err != nil {
		return err
	}

	return nil
}

func (m *PTestUpdate) validateMaxIntentos(formats strfmt.Registry) error {

	if err := validate.Required("maxIntentos", "body", m.MaxIntentos); err != nil {
		return err
	}

	return nil
}

func (m *PTestUpdate) validateMaxMinutes(formats strfmt.Registry) error {

	if err := validate.Required("maxMinutes", "body", m.MaxMinutes); err != nil {
		return err
	}

	if err := validate.MinimumInt("maxMinutes", "body", *m.MaxMinutes, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PTestUpdate) validateTiempoEstricto(formats strfmt.Registry) error {

	if err := validate.Required("tiempoEstricto", "body", m.TiempoEstricto); err != nil {
		return err
	}

	return nil
}

var pTestUpdateTypeVisibilidadPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["alEntregar","alCorregir","manual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pTestUpdateTypeVisibilidadPropEnum = append(pTestUpdateTypeVisibilidadPropEnum, v)
	}
}

const (

	// PTestUpdateVisibilidadAlEntregar captures enum value "alEntregar"
	PTestUpdateVisibilidadAlEntregar string = "alEntregar"

	// PTestUpdateVisibilidadAlCorregir captures enum value "alCorregir"
	PTestUpdateVisibilidadAlCorregir string = "alCorregir"

	// PTestUpdateVisibilidadManual captures enum value "manual"
	PTestUpdateVisibilidadManual string = "manual"
)

// prop value enum
func (m *PTestUpdate) validateVisibilidadEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, pTestUpdateTypeVisibilidadPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PTestUpdate) validateVisibilidad(formats strfmt.Registry) error {

	if err := validate.Required("visibilidad", "body", m.Visibilidad); err != nil {
		return err
	}

	// value enum
	if err := m.validateVisibilidadEnum("visibilidad", "body", *m.Visibilidad); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this p test update based on context it is used
func (m *PTestUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PTestUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PTestUpdate) UnmarshalBinary(b []byte) error {
	var res PTestUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
