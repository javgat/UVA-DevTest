// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PasswordUpdate password update
//
// swagger:model PasswordUpdate
type PasswordUpdate struct {

	// newpass
	// Example: password
	// Required: true
	// Pattern: ^.{6,}$
	// Format: password
	Newpass *strfmt.Password `json:"newpass"`

	// oldpass
	// Example: password
	// Required: true
	// Pattern: ^.{6,}$
	// Format: password
	Oldpass *strfmt.Password `json:"oldpass"`
}

// Validate validates this password update
func (m *PasswordUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNewpass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOldpass(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PasswordUpdate) validateNewpass(formats strfmt.Registry) error {

	if err := validate.Required("newpass", "body", m.Newpass); err != nil {
		return err
	}

	if err := validate.Pattern("newpass", "body", m.Newpass.String(), `^.{6,}$`); err != nil {
		return err
	}

	if err := validate.FormatOf("newpass", "body", "password", m.Newpass.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PasswordUpdate) validateOldpass(formats strfmt.Registry) error {

	if err := validate.Required("oldpass", "body", m.Oldpass); err != nil {
		return err
	}

	if err := validate.Pattern("oldpass", "body", m.Oldpass.String(), `^.{6,}$`); err != nil {
		return err
	}

	if err := validate.FormatOf("oldpass", "body", "password", m.Oldpass.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this password update based on context it is used
func (m *PasswordUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PasswordUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PasswordUpdate) UnmarshalBinary(b []byte) error {
	var res PasswordUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
