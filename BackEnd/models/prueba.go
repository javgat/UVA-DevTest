// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Prueba prueba
//
// swagger:model Prueba
type Prueba struct {

	// entrada
	// Example: 3 3 0 0
	// Required: true
	Entrada *string `json:"entrada"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// post entrega
	// Example: true
	// Required: true
	PostEntrega *bool `json:"postEntrega"`

	// preguntaid
	// Example: 1
	Preguntaid int64 `json:"preguntaid,omitempty"`

	// salida
	// Example: 2 2
	// Required: true
	Salida *string `json:"salida"`

	// visible
	// Example: true
	// Required: true
	Visible *bool `json:"visible"`
}

// Validate validates this prueba
func (m *Prueba) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntrada(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostEntrega(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalida(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisible(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Prueba) validateEntrada(formats strfmt.Registry) error {

	if err := validate.Required("entrada", "body", m.Entrada); err != nil {
		return err
	}

	return nil
}

func (m *Prueba) validatePostEntrega(formats strfmt.Registry) error {

	if err := validate.Required("postEntrega", "body", m.PostEntrega); err != nil {
		return err
	}

	return nil
}

func (m *Prueba) validateSalida(formats strfmt.Registry) error {

	if err := validate.Required("salida", "body", m.Salida); err != nil {
		return err
	}

	return nil
}

func (m *Prueba) validateVisible(formats strfmt.Registry) error {

	if err := validate.Required("visible", "body", m.Visible); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this prueba based on context it is used
func (m *Prueba) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Prueba) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Prueba) UnmarshalBinary(b []byte) error {
	var res Prueba
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
