// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuestionAnswer question answer
//
// swagger:model QuestionAnswer
type QuestionAnswer struct {

	// corregida
	// Example: true
	// Required: true
	Corregida *bool `json:"corregida"`

	// error compilacion
	// Example: Error line 4 missing ';'
	ErrorCompilacion string `json:"errorCompilacion,omitempty"`

	// estado
	// Enum: [noProbado errorCompilacion ejecutando probado]
	Estado *string `json:"estado,omitempty"`

	// id pregunta
	// Example: 1
	// Required: true
	IDPregunta *int64 `json:"idPregunta"`

	// id respuesta
	// Example: 1
	// Required: true
	IDRespuesta *int64 `json:"idRespuesta"`

	// indices opciones
	IndicesOpciones []int64 `json:"indicesOpciones"`

	// Percentage of the max points given to the answer
	// Example: 1
	// Required: true
	// Maximum: 100
	// Minimum: -100
	Puntuacion *int64 `json:"puntuacion"`

	// respuesta
	// Example: Javadoc
	Respuesta string `json:"respuesta,omitempty"`

	// username
	// Example: joselito97
	Username string `json:"username,omitempty"`
}

// Validate validates this question answer
func (m *QuestionAnswer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCorregida(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEstado(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDPregunta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDRespuesta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePuntuacion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuestionAnswer) validateCorregida(formats strfmt.Registry) error {

	if err := validate.Required("corregida", "body", m.Corregida); err != nil {
		return err
	}

	return nil
}

var questionAnswerTypeEstadoPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["noProbado","errorCompilacion","ejecutando","probado"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		questionAnswerTypeEstadoPropEnum = append(questionAnswerTypeEstadoPropEnum, v)
	}
}

const (

	// QuestionAnswerEstadoNoProbado captures enum value "noProbado"
	QuestionAnswerEstadoNoProbado string = "noProbado"

	// QuestionAnswerEstadoErrorCompilacion captures enum value "errorCompilacion"
	QuestionAnswerEstadoErrorCompilacion string = "errorCompilacion"

	// QuestionAnswerEstadoEjecutando captures enum value "ejecutando"
	QuestionAnswerEstadoEjecutando string = "ejecutando"

	// QuestionAnswerEstadoProbado captures enum value "probado"
	QuestionAnswerEstadoProbado string = "probado"
)

// prop value enum
func (m *QuestionAnswer) validateEstadoEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, questionAnswerTypeEstadoPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QuestionAnswer) validateEstado(formats strfmt.Registry) error {
	if swag.IsZero(m.Estado) { // not required
		return nil
	}

	// value enum
	if err := m.validateEstadoEnum("estado", "body", *m.Estado); err != nil {
		return err
	}

	return nil
}

func (m *QuestionAnswer) validateIDPregunta(formats strfmt.Registry) error {

	if err := validate.Required("idPregunta", "body", m.IDPregunta); err != nil {
		return err
	}

	return nil
}

func (m *QuestionAnswer) validateIDRespuesta(formats strfmt.Registry) error {

	if err := validate.Required("idRespuesta", "body", m.IDRespuesta); err != nil {
		return err
	}

	return nil
}

func (m *QuestionAnswer) validatePuntuacion(formats strfmt.Registry) error {

	if err := validate.Required("puntuacion", "body", m.Puntuacion); err != nil {
		return err
	}

	if err := validate.MinimumInt("puntuacion", "body", *m.Puntuacion, -100, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("puntuacion", "body", *m.Puntuacion, 100, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this question answer based on context it is used
func (m *QuestionAnswer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *QuestionAnswer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuestionAnswer) UnmarshalBinary(b []byte) error {
	var res QuestionAnswer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
