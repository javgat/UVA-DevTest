// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TipoRol tipo rol
//
// swagger:model TipoRol
type TipoRol struct {

	// true if the users can administrate Answers
	// Required: true
	AdminAnswers *bool `json:"adminAnswers"`

	// true if the users can administrate Server Configuration parameters
	// Required: true
	AdminConfiguration *bool `json:"adminConfiguration"`

	// true if the users can administrate Non Published Questions
	// Required: true
	AdminEQuestions *bool `json:"adminEQuestions"`

	// true if the users can administrate Non Published Tests
	// Required: true
	AdminETests *bool `json:"adminETests"`

	// true if the users can administrate PublishedTests
	// Required: true
	AdminPTests *bool `json:"adminPTests"`

	// true if the users can administrate TipoRol permissions
	// Required: true
	AdminPermissions *bool `json:"adminPermissions"`

	// true if the users can administrate Teams
	// Required: true
	AdminTeams *bool `json:"adminTeams"`

	// true if the users can administrate Users
	// Required: true
	AdminUsers *bool `json:"adminUsers"`

	// true if the users can change anothers user TipoRol if its source priority is less important and target is at most equal
	// Required: true
	ChangeRoles *bool `json:"changeRoles"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// nombre
	// Example: Moderador
	// Required: true
	Nombre *string `json:"nombre"`

	// Maximum priority is 0, any greater value represents less priority
	// Required: true
	// Minimum: 0
	Prioridad *int64 `json:"prioridad"`

	// rol base
	// Required: true
	// Enum: [administrador profesor estudiante noRegistrado]
	RolBase *string `json:"rolBase"`

	// true if the users can have non published questions
	// Required: true
	TenerEQuestions *bool `json:"tenerEQuestions"`

	// true if the users can have non published questions
	// Required: true
	TenerETests *bool `json:"tenerETests"`

	// true if the users can have published tests
	// Required: true
	TenerPTests *bool `json:"tenerPTests"`

	// true if the users can have teams
	// Required: true
	TenerTeams *bool `json:"tenerTeams"`

	// true if new users will be this TipoRol at first
	// Required: true
	TipoInicial *bool `json:"tipoInicial"`

	// true if the users can see Answers
	// Required: true
	VerAnswers *bool `json:"verAnswers"`

	// true if the users can see Non Published Questions
	// Required: true
	VerEQuestions *bool `json:"verEQuestions"`

	// true if the users can see Non Published Tests
	// Required: true
	VerETests *bool `json:"verETests"`

	// true if the users can see Published Questions
	// Required: true
	VerPQuestions *bool `json:"verPQuestions"`

	// true if the users can see PublishedTests
	// Required: true
	VerPTests *bool `json:"verPTests"`
}

// Validate validates this tipo rol
func (m *TipoRol) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdminAnswers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdminConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdminEQuestions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdminETests(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdminPTests(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdminPermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdminTeams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdminUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChangeRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNombre(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrioridad(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRolBase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenerEQuestions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenerETests(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenerPTests(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenerTeams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTipoInicial(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerAnswers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerEQuestions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerETests(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerPQuestions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerPTests(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TipoRol) validateAdminAnswers(formats strfmt.Registry) error {

	if err := validate.Required("adminAnswers", "body", m.AdminAnswers); err != nil {
		return err
	}

	return nil
}

func (m *TipoRol) validateAdminConfiguration(formats strfmt.Registry) error {

	if err := validate.Required("adminConfiguration", "body", m.AdminConfiguration); err != nil {
		return err
	}

	return nil
}

func (m *TipoRol) validateAdminEQuestions(formats strfmt.Registry) error {

	if err := validate.Required("adminEQuestions", "body", m.AdminEQuestions); err != nil {
		return err
	}

	return nil
}

func (m *TipoRol) validateAdminETests(formats strfmt.Registry) error {

	if err := validate.Required("adminETests", "body", m.AdminETests); err != nil {
		return err
	}

	return nil
}

func (m *TipoRol) validateAdminPTests(formats strfmt.Registry) error {

	if err := validate.Required("adminPTests", "body", m.AdminPTests); err != nil {
		return err
	}

	return nil
}

func (m *TipoRol) validateAdminPermissions(formats strfmt.Registry) error {

	if err := validate.Required("adminPermissions", "body", m.AdminPermissions); err != nil {
		return err
	}

	return nil
}

func (m *TipoRol) validateAdminTeams(formats strfmt.Registry) error {

	if err := validate.Required("adminTeams", "body", m.AdminTeams); err != nil {
		return err
	}

	return nil
}

func (m *TipoRol) validateAdminUsers(formats strfmt.Registry) error {

	if err := validate.Required("adminUsers", "body", m.AdminUsers); err != nil {
		return err
	}

	return nil
}

func (m *TipoRol) validateChangeRoles(formats strfmt.Registry) error {

	if err := validate.Required("changeRoles", "body", m.ChangeRoles); err != nil {
		return err
	}

	return nil
}

func (m *TipoRol) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TipoRol) validateNombre(formats strfmt.Registry) error {

	if err := validate.Required("nombre", "body", m.Nombre); err != nil {
		return err
	}

	return nil
}

func (m *TipoRol) validatePrioridad(formats strfmt.Registry) error {

	if err := validate.Required("prioridad", "body", m.Prioridad); err != nil {
		return err
	}

	if err := validate.MinimumInt("prioridad", "body", *m.Prioridad, 0, false); err != nil {
		return err
	}

	return nil
}

var tipoRolTypeRolBasePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["administrador","profesor","estudiante","noRegistrado"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tipoRolTypeRolBasePropEnum = append(tipoRolTypeRolBasePropEnum, v)
	}
}

const (

	// TipoRolRolBaseAdministrador captures enum value "administrador"
	TipoRolRolBaseAdministrador string = "administrador"

	// TipoRolRolBaseProfesor captures enum value "profesor"
	TipoRolRolBaseProfesor string = "profesor"

	// TipoRolRolBaseEstudiante captures enum value "estudiante"
	TipoRolRolBaseEstudiante string = "estudiante"

	// TipoRolRolBaseNoRegistrado captures enum value "noRegistrado"
	TipoRolRolBaseNoRegistrado string = "noRegistrado"
)

// prop value enum
func (m *TipoRol) validateRolBaseEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tipoRolTypeRolBasePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TipoRol) validateRolBase(formats strfmt.Registry) error {

	if err := validate.Required("rolBase", "body", m.RolBase); err != nil {
		return err
	}

	// value enum
	if err := m.validateRolBaseEnum("rolBase", "body", *m.RolBase); err != nil {
		return err
	}

	return nil
}

func (m *TipoRol) validateTenerEQuestions(formats strfmt.Registry) error {

	if err := validate.Required("tenerEQuestions", "body", m.TenerEQuestions); err != nil {
		return err
	}

	return nil
}

func (m *TipoRol) validateTenerETests(formats strfmt.Registry) error {

	if err := validate.Required("tenerETests", "body", m.TenerETests); err != nil {
		return err
	}

	return nil
}

func (m *TipoRol) validateTenerPTests(formats strfmt.Registry) error {

	if err := validate.Required("tenerPTests", "body", m.TenerPTests); err != nil {
		return err
	}

	return nil
}

func (m *TipoRol) validateTenerTeams(formats strfmt.Registry) error {

	if err := validate.Required("tenerTeams", "body", m.TenerTeams); err != nil {
		return err
	}

	return nil
}

func (m *TipoRol) validateTipoInicial(formats strfmt.Registry) error {

	if err := validate.Required("tipoInicial", "body", m.TipoInicial); err != nil {
		return err
	}

	return nil
}

func (m *TipoRol) validateVerAnswers(formats strfmt.Registry) error {

	if err := validate.Required("verAnswers", "body", m.VerAnswers); err != nil {
		return err
	}

	return nil
}

func (m *TipoRol) validateVerEQuestions(formats strfmt.Registry) error {

	if err := validate.Required("verEQuestions", "body", m.VerEQuestions); err != nil {
		return err
	}

	return nil
}

func (m *TipoRol) validateVerETests(formats strfmt.Registry) error {

	if err := validate.Required("verETests", "body", m.VerETests); err != nil {
		return err
	}

	return nil
}

func (m *TipoRol) validateVerPQuestions(formats strfmt.Registry) error {

	if err := validate.Required("verPQuestions", "body", m.VerPQuestions); err != nil {
		return err
	}

	return nil
}

func (m *TipoRol) validateVerPTests(formats strfmt.Registry) error {

	if err := validate.Required("verPTests", "body", m.VerPTests); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tipo rol based on context it is used
func (m *TipoRol) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TipoRol) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TipoRol) UnmarshalBinary(b []byte) error {
	var res TipoRol
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
