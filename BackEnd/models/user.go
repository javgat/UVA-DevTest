// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User user
//
// swagger:model User
type User struct {

	// email
	// Example: carlos@mail.com
	// Required: true
	// Pattern: ^[^@ \t\r\n]+@[^@ \t\r\n]+\.[^@ \t\r\n]+$
	// Format: email
	Email *strfmt.Email `json:"email"`

	// fullname
	// Example: Javier GatÃ³n Herguedas
	Fullname string `json:"fullname,omitempty"`

	// type
	// Enum: [student teacher admin]
	Type string `json:"type,omitempty"`

	// username
	// Example: carlosg72
	// Required: true
	// Pattern: ^[^@ \t\r\n]+$
	Username *string `json:"username"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.Pattern("email", "body", m.Email.String(), `^[^@ \t\r\n]+@[^@ \t\r\n]+\.[^@ \t\r\n]+$`); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

var userTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["student","teacher","admin"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userTypeTypePropEnum = append(userTypeTypePropEnum, v)
	}
}

const (

	// UserTypeStudent captures enum value "student"
	UserTypeStudent string = "student"

	// UserTypeTeacher captures enum value "teacher"
	UserTypeTeacher string = "teacher"

	// UserTypeAdmin captures enum value "admin"
	UserTypeAdmin string = "admin"
)

// prop value enum
func (m *User) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *User) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *User) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	if err := validate.Pattern("username", "body", *m.Username, `^[^@ \t\r\n]+$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user based on context it is used
func (m *User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
