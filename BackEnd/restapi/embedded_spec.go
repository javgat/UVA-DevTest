// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "DevTest",
    "title": "DevTest",
    "contact": {
      "email": "javigaton@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "host": "localhost",
  "basePath": "/DevTest",
  "paths": {
    "/accesstokens": {
      "post": {
        "description": "Tries to login, and gets a JWT auth token if successful",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Registers a new authorized connection token",
        "operationId": "Login",
        "parameters": [
          {
            "description": "User who is trying to generate a token",
            "name": "loginUser",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginUser"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful authentication. Session JWT returned in Cookie \"Bearer-Cookie\". You need to include this cookie in subsequent requests.",
            "headers": {
              "Set-Cookie": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/accesstokens/{username}": {
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Modifies the current JWT Cookie related to the current session, extending.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Modifies the current JWT Cookie related to the current session, extending it.",
        "operationId": "relogin",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user with the token",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful cookie modification. Session JWT returned in Cookie \"Bearer-Cookie\".",
            "headers": {
              "Set-Cookie": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Deletes all sessions of the user. Makes every current JWT related to him useless.",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Deletes all sessions of the user. Makes every current JWT related to him useless.",
        "operationId": "closeSessions",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user with the token",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "description": "Current password of the user",
            "name": "password",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Password"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sessions deleted successfully"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/answers": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all answers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "answer"
        ],
        "summary": "Returns all answers",
        "operationId": "GetAnswers",
        "responses": {
          "200": {
            "description": "Answers found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Answer"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/answers/{answerid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns an answers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "answer"
        ],
        "summary": "Returns an answers",
        "operationId": "GetAnswer",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the answer",
            "name": "answerid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Answers found",
            "schema": {
              "$ref": "#/definitions/Answer"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Finishes an answers",
        "tags": [
          "answer"
        ],
        "summary": "Finishes an answer",
        "operationId": "FinishAnswer",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the answer",
            "name": "answerid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Answers finished"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/answers/{answerid}/qanswers": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns an answers's questionAnswers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "answer"
        ],
        "summary": "Returns an answer's questionAnswers",
        "operationId": "GetQuestionAnswersFromAnswer",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the answer",
            "name": "answerid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "QuestionAnswers found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/QuestionAnswer"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Answers a question",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "answer"
        ],
        "summary": "Answers a question",
        "operationId": "PostQuestionAnswer",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the answer",
            "name": "answerid",
            "in": "path",
            "required": true
          },
          {
            "description": "QuestionAnswer to post",
            "name": "questionAnswer",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QuestionAnswer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "QuestionAnswer created",
            "schema": {
              "$ref": "#/definitions/QuestionAnswer"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/answers/{answerid}/qanswers/{questionid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns an answers's questionAnswer",
        "produces": [
          "application/json"
        ],
        "tags": [
          "answer"
        ],
        "summary": "Returns an answer's questionAnswer",
        "operationId": "GetQuestionAnswerFromAnswer",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the answer",
            "name": "answerid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the question it is answering",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "QuestionAnswer found",
            "schema": {
              "$ref": "#/definitions/QuestionAnswer"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Updates a QuestionAnswer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "answer"
        ],
        "summary": "Updates a QuestionAnswer",
        "operationId": "PutQuestionAnswerFromAnswer",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the answer",
            "name": "answerid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the question it is answering",
            "name": "questionid",
            "in": "path",
            "required": true
          },
          {
            "description": "QuestionAnswer Updated",
            "name": "questionAnswer",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QuestionAnswer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "QuestionAnswer updated"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/answers/{answerid}/qanswers/{questionid}/review": {
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Updates an answer review",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "answer"
        ],
        "summary": "Updates an answer review",
        "operationId": "PutReview",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the answer",
            "name": "answerid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the question it is answering",
            "name": "questionid",
            "in": "path",
            "required": true
          },
          {
            "description": "Review Updated",
            "name": "review",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Review"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Review updated"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/logout": {
      "get": {
        "description": "Returns a useless cookie that will expire soon",
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Returns a useless cookie that will expire soon",
        "operationId": "Logout",
        "responses": {
          "200": {
            "description": "Logout cookie returned successfully",
            "headers": {
              "Set-Cookie": {
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/publishedTests": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all publishedTests",
        "produces": [
          "application/json"
        ],
        "tags": [
          "publishedTest"
        ],
        "summary": "Returns all publishedTests",
        "operationId": "GetPublishedTests",
        "responses": {
          "200": {
            "description": "PublishedTests found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Test"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/publishedTests/{testid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a publishedTest",
        "produces": [
          "application/json"
        ],
        "tags": [
          "publishedTest"
        ],
        "summary": "Returns a publishedTest",
        "operationId": "GetPublishedTest",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the publishedTest",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "PublishedTest found",
            "schema": {
              "$ref": "#/definitions/Test"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/publishedTests/{testid}/answers": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all answers from a published test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "publishedTest"
        ],
        "summary": "Returns all answers from a published test",
        "operationId": "GetAnswersFromPublishedTests",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the publishedTest",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Answers found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Answer"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/publishedTests/{testid}/questions": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all questions from a published test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "publishedTest"
        ],
        "summary": "Returns all questions from a published test",
        "operationId": "GetQuestionsFromPublishedTests",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the publishedTest",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Questions found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Question"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/publishedTests/{testid}/questions/{questionid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a question from a published test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "publishedTest"
        ],
        "summary": "Returns a question from a published test",
        "operationId": "GetQuestionFromPublishedTests",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the publishedTest",
            "name": "testid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the question to get",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Question found",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/publishedTests/{testid}/questions/{questionid}/qanswers": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all questions answers to a question of a published test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "publishedTest"
        ],
        "summary": "Returns all questions answers to a question of a published test",
        "operationId": "GetQuestionAnswersFromPublishedTestQuestion",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the publishedTest",
            "name": "testid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the question",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "QuestionAnswers found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/QuestionAnswer"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/publishedTests/{testid}/teams": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all teams from a publishedTest.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "publishedTest"
        ],
        "summary": "Returns all teams from a publishedTest.",
        "operationId": "GetTeamsFromPublishedTest",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the publishedTest to find its teams",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "teams found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/publishedTests/{testid}/teams/{teamname}": {
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Invites a team to do a test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "publishedTest"
        ],
        "summary": "Invites a team to do a test",
        "operationId": "InviteTeamToPublishedTest",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to invite to test",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the test to find",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "team invited"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Removes a team to do a test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "publishedTest"
        ],
        "summary": "Removes a team to do a test",
        "operationId": "RemoveTeamToPublishedTest",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to Remove from test",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the test to find",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "team removed"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/publishedTests/{testid}/users": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all users from a publishedTest.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "publishedTest"
        ],
        "summary": "Returns all users from a publishedTest.",
        "operationId": "GetUsersFromPublishedTest",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the publishedTest to find its users",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "users found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/publishedTests/{testid}/users/{username}": {
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Invites a user to do a test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "publishedTest"
        ],
        "summary": "Invites a user to do a test",
        "operationId": "InviteUserToPublishedTest",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who can answer the publishedTest",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the test",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user invited"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Removes a user to do a test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "publishedTest"
        ],
        "summary": "Removes a user from a test",
        "operationId": "RemoveUserToPublishedTest",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who cant answer the publishedTest",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the test",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user removed"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/questions": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all questions",
        "produces": [
          "application/json"
        ],
        "tags": [
          "question"
        ],
        "summary": "Returns all questions",
        "operationId": "GetQuestions",
        "responses": {
          "200": {
            "description": "questions found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Question"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/questions/{questionid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a question",
        "produces": [
          "application/json"
        ],
        "tags": [
          "question"
        ],
        "summary": "Returns a question",
        "operationId": "GetQuestion",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the question to find",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Question found",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Updates a question",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "question"
        ],
        "summary": "Updates a question",
        "operationId": "PutQuestion",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the question to update",
            "name": "questionid",
            "in": "path",
            "required": true
          },
          {
            "description": "Question modified",
            "name": "question",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Question"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Question updated"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Deletes a question",
        "tags": [
          "question"
        ],
        "summary": "Deletes a question",
        "operationId": "DeleteQuestion",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the question to delete",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Question deleted"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/questions/{questionid}/tags": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all tags from a question.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "question"
        ],
        "summary": "Returns all tags from a question.",
        "operationId": "GetTagsFromQuestion",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the question to find its tags",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "tags found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tag"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/questions/{questionid}/tags/{tag}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a tag from a question.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "question"
        ],
        "summary": "Returns a tag from a question.",
        "operationId": "GetTagFromQuestion",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the question to find its tags",
            "name": "questionid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Tag to find",
            "name": "tag",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "tag found",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Adds a tag to a question",
        "tags": [
          "question"
        ],
        "summary": "Adds a tag to a question",
        "operationId": "AddTagToQuestion",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the question to add a tag",
            "name": "questionid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Tag to add",
            "name": "tag",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "tag added"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Removes a tag from a question",
        "tags": [
          "question"
        ],
        "summary": "Removes a tag from a question",
        "operationId": "RemoveTagFromQuestion",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the question to remove a tag",
            "name": "questionid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Tag to remove",
            "name": "tag",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "tag removed"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/questions/{questionid}/teams": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all teams from a question.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "question"
        ],
        "summary": "Returns all teams from a question.",
        "operationId": "GetTeamsFromQuestion",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the question to find its teams",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "teams found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/questions/{questionid}/teams/{teamname}": {
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Adds a team to administer a question",
        "produces": [
          "application/json"
        ],
        "tags": [
          "question"
        ],
        "summary": "Adds a team to administer a question",
        "operationId": "AddTeamToQuestion",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to let administrate",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the question to find",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "team added"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Removes a team to administer a question",
        "produces": [
          "application/json"
        ],
        "tags": [
          "question"
        ],
        "summary": "Removes a team to administer a question",
        "operationId": "RemoveTeamToQuestion",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to remove from question",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the question to find",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "team removed"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/tags": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all tags.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "tag"
        ],
        "summary": "Returns all tags.",
        "operationId": "GetTags",
        "responses": {
          "200": {
            "description": "tags found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tag"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/tags/{tag}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a tags.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "tag"
        ],
        "summary": "Returns a tags.",
        "operationId": "GetTag",
        "parameters": [
          {
            "type": "string",
            "description": "Tag to find",
            "name": "tag",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "tag found",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/tags/{tag}/questions": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all questions from a tag.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "tag"
        ],
        "summary": "Returns all questions from a tag.",
        "operationId": "GetQuestionsFromTag",
        "parameters": [
          {
            "type": "string",
            "description": "Tag to find its questions",
            "name": "tag",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "questions found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Question"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/teams": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all teams.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns all teams.",
        "operationId": "GetTeams",
        "responses": {
          "200": {
            "description": "teams found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/teams/{teamname}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Finds a team by its teamname",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Finds a team by its teamname",
        "operationId": "getTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to find",
            "name": "teamname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "team found",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Modifies the team \u003cteamname\u003e",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Modifies the team \u003cteamname\u003e",
        "operationId": "putTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to modify its information",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "description": "Team information updated",
            "name": "team",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Team"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "team updated"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "409": {
            "$ref": "#/responses/ConflictError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Deletes a team by its teamname",
        "tags": [
          "team"
        ],
        "summary": "Deletes a team by its teamname",
        "operationId": "deleteTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to delete",
            "name": "teamname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "team found and deleted"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/teams/{teamname}/admins": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all users that are admins of a team",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns all users that are admins of a team",
        "operationId": "GetAdmins",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to get its admins",
            "name": "teamname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "admins found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/teams/{teamname}/admins/{username}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a user that have the role admin in a team",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns a user that have the role admin in a team",
        "operationId": "GetAdmin",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to get its admin",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Username of the user to check if it is an admin",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user found",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Adds user {username} to team {teamname} as an Admin.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Adds user {username} to team {teamname} as an Admin",
        "operationId": "AddAdmin",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to modify",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Username of the user to add",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User added to team"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "409": {
            "$ref": "#/responses/ConflictError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/teams/{teamname}/members": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all users that have the role members in a team",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns all users that have the role members in a team",
        "operationId": "GetMembers",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to get its members",
            "name": "teamname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "users found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/teams/{teamname}/members/{username}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a user that have the role member in a team",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns a user that have the role member in a team",
        "operationId": "GetMember",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to get its member",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Username of the user to check if it is a member",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user found",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Adds user {username} to team {teamname} as a Member.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Adds user {username} to team {teamname} as a Member",
        "operationId": "AddMember",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to modify",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Username of the user to add",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User added to team"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "409": {
            "$ref": "#/responses/ConflictError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/teams/{teamname}/publishedTests": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all publishedTests that the team administers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns all publishedTests that the team administers",
        "operationId": "GetPublishedTestsFromTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to get its publishedTests",
            "name": "teamname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "publishedTests found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Test"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/teams/{teamname}/publishedTests/{testid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a publishedTest that the team administers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns a publishedTest that the team administers",
        "operationId": "GetPublishedTestFromTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to get its publishedTest",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the publishedTest to find",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "publishedTest found",
            "schema": {
              "$ref": "#/definitions/Test"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/teams/{teamname}/questions": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all questions that the team administers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns all questions that the team administers",
        "operationId": "GetQuestionsFromTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to get its questions",
            "name": "teamname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "questions found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Question"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/teams/{teamname}/questions/{questionid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a question that the team administers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns a question that the team administers",
        "operationId": "GetQuestionFromTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to get its question",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the question to find",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "question found",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/teams/{teamname}/tests": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all tests that the team administers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns all tests that the team administers",
        "operationId": "GetTestsFromTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to get its tests",
            "name": "teamname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "tests found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Test"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/teams/{teamname}/tests/{testid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a test that the team administers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns a test that the team administers",
        "operationId": "GetTestFromTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to get its question",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the test to find",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "test found",
            "schema": {
              "$ref": "#/definitions/Test"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/teams/{teamname}/users": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all users that are in a team",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns all users that are in a team",
        "operationId": "GetUsersFromTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to get its users",
            "name": "teamname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "users found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/teams/{teamname}/users/{username}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a user that is in a team",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns a user that is in a team",
        "operationId": "GetUserFromTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to get its user",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Username of the user to check if it is in the team",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user found",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Deletes user {username} from team {teamname}",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Deletes user {username} from team {teamname}",
        "operationId": "DeleteUserFromTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to modify",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Username of the user to delete from team",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted from team"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/tests": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all tests",
        "produces": [
          "application/json"
        ],
        "tags": [
          "test"
        ],
        "summary": "Returns all tests",
        "operationId": "GetTests",
        "responses": {
          "200": {
            "description": "tests found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Test"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/tests/{testid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "test"
        ],
        "summary": "Returns a test",
        "operationId": "GetTest",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the test to find",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Test found",
            "schema": {
              "$ref": "#/definitions/Test"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Updates a test",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "test"
        ],
        "summary": "Updates a test",
        "operationId": "PutTest",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the test to update",
            "name": "testid",
            "in": "path",
            "required": true
          },
          {
            "description": "Test modified",
            "name": "test",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Test"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Test updated"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Deletes a test",
        "tags": [
          "test"
        ],
        "summary": "Deletes a test",
        "operationId": "DeleteTest",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the test to delete",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Test deleted"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/tests/{testid}/publishedTests": {
      "post": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Creates a new publishedTest. The user must be the owner of the test.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "test",
          "publishedTest"
        ],
        "summary": "Creates a new publishedTest. The user must be the owner of the test.",
        "operationId": "PostPublishedTest",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the test to publish",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "publishedTest created",
            "schema": {
              "$ref": "#/definitions/Test"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/tests/{testid}/questions": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all questions of the test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "test"
        ],
        "summary": "Returns all questions of the test",
        "operationId": "GetQuestionsFromTest",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the test",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "questions found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Question"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/tests/{testid}/questions/{questionid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a question from a test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "test"
        ],
        "summary": "Returns a question from a test",
        "operationId": "GetQuestionFromTest",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the test to find a question from",
            "name": "testid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the question to find in the test",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Question found",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Adds an existing question to a test",
        "tags": [
          "test"
        ],
        "summary": "Adds an existing question to a test",
        "operationId": "AddQuestionToTest",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the test to add a question to",
            "name": "testid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the question to add to the test",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Question added"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Removes an existing question from a test",
        "tags": [
          "test"
        ],
        "summary": "Removes an existing question from a test",
        "operationId": "RemoveQuestionFromTest",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the test to remove a question from",
            "name": "testid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the question to remove from the test",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Question removed"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/tests/{testid}/teams": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all teams from a test.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "test"
        ],
        "summary": "Returns all teams from a test.",
        "operationId": "GetTeamsFromTest",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the test to find its teams",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "teams found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/tests/{testid}/teams/{teamname}": {
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Adds a team to administer a test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "test"
        ],
        "summary": "Adds a team to administer a test",
        "operationId": "AddTeamToTest",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to let administrate",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the test to find",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "team added"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Removes a team to administer a test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "test"
        ],
        "summary": "Removes a team to administer a test",
        "operationId": "RemoveTeamToTest",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to remove",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the test to find",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "team removed"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/users": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all users. Only for admins",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns all users. Only for admins",
        "operationId": "GetUsers",
        "responses": {
          "200": {
            "description": "users found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "post": {
        "description": "Adds a user to the system",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user",
          "auth"
        ],
        "summary": "adds a user",
        "operationId": "RegisterUser",
        "parameters": [
          {
            "description": "User item to add",
            "name": "signinUser",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SigninUser"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "user created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "409": {
            "$ref": "#/responses/ConflictError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{username}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Finds a user by its username",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Finds a user by its username",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user to find",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user found",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Modifies the user \u003cusername\u003e",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Modifies the user \u003cusername\u003e",
        "operationId": "putUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user to modify its information",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "description": "User information updated",
            "name": "userUpdate",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user updated"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "409": {
            "$ref": "#/responses/ConflictError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Deletes a user by its username",
        "tags": [
          "user"
        ],
        "summary": "Deletes a user by its username",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user to delete",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user found and deleted"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{username}/answeredTests": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all publishedTests that the user has answered",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns all publishedTests that the user has answered",
        "operationId": "GetAnsweredTestsFromUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who has answered the publishedTests",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "publishedTests found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Test"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{username}/answeredTests/{testid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a publishedTest that the user has answered",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns a publishedTest that the user has answered",
        "operationId": "GetAnsweredTestFromUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who has answered the publishedTest",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the test",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "publishedTest found",
            "schema": {
              "$ref": "#/definitions/Test"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{username}/answeredTests/{testid}/answers": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all answers that the user has answered to a test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns all answers that the user has answered to a test",
        "operationId": "GetAnswersFromUserAnsweredTest",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who has answered the test",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the test",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "answers found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Answer"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{username}/answers": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all answers that the user has answered",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns all answers that the user has answered",
        "operationId": "GetAnswersFromUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who is the author of the answers",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "answers found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Answer"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{username}/answers/{answerid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns an answer that the user has answered",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns an answers that the user has answered",
        "operationId": "GetAnswerFromUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who is the author of the answer",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the answer",
            "name": "answerid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "answer found",
            "schema": {
              "$ref": "#/definitions/Answer"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{username}/password": {
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Modifies the password of the user \u003cusername\u003e",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "user",
          "auth"
        ],
        "summary": "Modifies the password of the user \u003cusername\u003e",
        "operationId": "putPassword",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user to modify its password",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "description": "Password update information",
            "name": "passwordUpdate",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource password modified correctly"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{username}/publishedTests": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all publishedTests that the user can answer",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns all publishedTests that the user can answer",
        "operationId": "GetPublishedTestsFromUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who can answer the publishedTests",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "publishedTests found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Test"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{username}/publishedTests/{testid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a publishedTest that the user can answer",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns a publishedTest that the user can answer",
        "operationId": "GetPublishedTestFromUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who can answer the publishedTest",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the test",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "publishedTest found",
            "schema": {
              "$ref": "#/definitions/Test"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{username}/publishedTests/{testid}/answers": {
      "post": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Starts a new answer",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user",
          "answer"
        ],
        "summary": "Starts a new answer",
        "operationId": "StartAnswer",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who can answer the publishedTest",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the test",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Answer started",
            "schema": {
              "$ref": "#/definitions/Answer"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{username}/questions": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all questions owned by the user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns all questions owned by the user",
        "operationId": "GetQuestionsOfUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who owns the questions",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "questions found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Question"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Creates a question",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user",
          "question"
        ],
        "summary": "Creates a question",
        "operationId": "PostQuestion",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who owns the question",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "description": "Question to add",
            "name": "question",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Question"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "question created",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{username}/questions/{questionid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a question of a user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns a question of a user",
        "operationId": "GetQuestionFromUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who owns the question",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "id of the question to find",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "question found",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{username}/role": {
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Modifies the role of the user \u003cusername\u003e",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Modifies the role of the user \u003cusername\u003e",
        "operationId": "putRole",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user to modify its role",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "description": "Role update information",
            "name": "role",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource role modified correctly"
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{username}/teams": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all teams of a user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns all teams of a user.",
        "operationId": "GetTeamsOfUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user to get their teams",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "teams found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Adds a team to the system",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "team",
          "user"
        ],
        "summary": "adds a team",
        "operationId": "PostTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user to get their teams",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "description": "Team item to add",
            "name": "team",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Team"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "team created",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "409": {
            "$ref": "#/responses/ConflictError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{username}/teams/{teamname}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Finds a team by its teamname, only if the user is in it",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Finds a team by its teamname, only if the user is in it",
        "operationId": "getTeamFromUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user to check",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Teamname of the team to find",
            "name": "teamname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "team found",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{username}/tests": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all tests owned by a user (teacher).",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns all tests owned by a user (teacher).",
        "operationId": "GetTestsFromUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the teacher who owns the question",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "tests found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Test"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Creates a new test. The user must be a teacher.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user",
          "test"
        ],
        "summary": "Creates a new test. The user must be a teacher.",
        "operationId": "PostTest",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the teacher who owns the question",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "description": "New Test to create",
            "name": "test",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Test"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "test created",
            "schema": {
              "$ref": "#/definitions/Test"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{username}/tests/{testid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a test from its user owner",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns a test from its user owner",
        "operationId": "GetTestFromUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the teacher who owns the question",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the test",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "test found",
            "schema": {
              "$ref": "#/definitions/Test"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequestError"
          },
          "403": {
            "$ref": "#/responses/ForbiddenError"
          },
          "410": {
            "$ref": "#/responses/GoneError"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    }
  },
  "definitions": {
    "Answer": {
      "type": "object",
      "required": [
        "finished"
      ],
      "properties": {
        "finished": {
          "type": "boolean",
          "example": false
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "startime": {
          "type": "string",
          "example": "2021-02-25 14:44:55"
        },
        "testid": {
          "type": "integer",
          "example": 343
        },
        "username": {
          "type": "string",
          "example": "javgat"
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "example": "Object not found"
        }
      }
    },
    "LoginUser": {
      "type": "object",
      "required": [
        "loginid",
        "pass"
      ],
      "properties": {
        "loginid": {
          "type": "string",
          "example": "carlosg72 || carlos@mail.com"
        },
        "pass": {
          "type": "string",
          "format": "password",
          "pattern": "^.{6,}$",
          "example": "password"
        }
      }
    },
    "Password": {
      "type": "object",
      "required": [
        "password"
      ],
      "properties": {
        "password": {
          "type": "string",
          "format": "password",
          "pattern": "^.{6,}$",
          "example": "password"
        }
      }
    },
    "PasswordUpdate": {
      "type": "object",
      "required": [
        "oldpass",
        "newpass"
      ],
      "properties": {
        "newpass": {
          "type": "string",
          "format": "password",
          "pattern": "^.{6,}$",
          "example": "password"
        },
        "oldpass": {
          "type": "string",
          "format": "password",
          "pattern": "^.{6,}$",
          "example": "password"
        }
      }
    },
    "Question": {
      "type": "object",
      "required": [
        "title",
        "question",
        "estimatedTime",
        "autoCorrect",
        "editable",
        "username",
        "tipoPregunta"
      ],
      "properties": {
        "autoCorrect": {
          "type": "boolean",
          "example": true
        },
        "editable": {
          "type": "boolean",
          "example": false
        },
        "eleccionUnica": {
          "type": "boolean",
          "example": false
        },
        "estimatedTime": {
          "type": "integer",
          "example": 32600
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "question": {
          "type": "string",
          "example": "¿Cual es el lenguaje que tiene un nombre más largo de todos?"
        },
        "solucion": {
          "type": "string",
          "example": "Javadoc"
        },
        "tipoPregunta": {
          "type": "string",
          "enum": [
            "opciones",
            "string",
            "codigo"
          ]
        },
        "title": {
          "type": "string",
          "example": "Paralelismo en C"
        },
        "username": {
          "type": "string",
          "example": "javgat"
        }
      }
    },
    "QuestionAnswer": {
      "type": "object",
      "properties": {
        "idPregunta": {
          "type": "integer",
          "example": 1
        },
        "idRespuesta": {
          "type": "integer",
          "example": 1
        },
        "indiceOpcion": {
          "type": "integer",
          "example": 1
        },
        "respuesta": {
          "type": "string",
          "example": "Javadoc"
        }
      }
    },
    "Review": {
      "type": "object",
      "required": [
        "puntuacion"
      ],
      "properties": {
        "puntuacion": {
          "type": "integer",
          "example": 100
        }
      }
    },
    "Role": {
      "type": "object",
      "required": [
        "rol"
      ],
      "properties": {
        "rol": {
          "type": "string",
          "enum": [
            "estudiante",
            "profesor",
            "administrador"
          ]
        }
      }
    },
    "SigninUser": {
      "type": "object",
      "required": [
        "username",
        "email",
        "pass"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "pattern": "^[^@ \\t\\r\\n]+@[^@ \\t\\r\\n]+\\.[^@ \\t\\r\\n]+$",
          "example": "carlos@mail.com"
        },
        "pass": {
          "type": "string",
          "format": "password",
          "pattern": "^.{6,}$",
          "example": "password"
        },
        "username": {
          "type": "string",
          "pattern": "^[^@ \\t\\r\\n]+$",
          "example": "carlosg72"
        }
      }
    },
    "Tag": {
      "type": "object",
      "required": [
        "tag"
      ],
      "properties": {
        "tag": {
          "type": "string",
          "example": "Java"
        }
      }
    },
    "Team": {
      "type": "object",
      "required": [
        "teamname",
        "soloProfesores"
      ],
      "properties": {
        "description": {
          "type": "string",
          "example": "DevTest Team"
        },
        "soloProfesores": {
          "type": "boolean",
          "example": true
        },
        "teamname": {
          "type": "string",
          "pattern": "^[^@ \\t\\r\\n]+$",
          "example": "devtestTeam"
        }
      }
    },
    "Test": {
      "type": "object",
      "required": [
        "title",
        "description",
        "maxSeconds",
        "accesoPublico",
        "editable",
        "username"
      ],
      "properties": {
        "accesoPublico": {
          "type": "boolean",
          "example": true
        },
        "description": {
          "type": "string",
          "example": "En este test se evaluaran los conocimientos respecto al lenguaje de programación Java"
        },
        "editable": {
          "type": "boolean",
          "example": false
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "maxSeconds": {
          "type": "integer",
          "example": 32600
        },
        "title": {
          "type": "string",
          "example": "Test de introduccion a Java"
        },
        "username": {
          "type": "string",
          "example": "javgat"
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "username",
        "email"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "pattern": "^[^@ \\t\\r\\n]+@[^@ \\t\\r\\n]+\\.[^@ \\t\\r\\n]+$",
          "example": "carlos@mail.com"
        },
        "fullname": {
          "type": "string",
          "example": "Javier Gatón Herguedas"
        },
        "rol": {
          "type": "string",
          "enum": [
            "estudiante",
            "profesor",
            "administrador"
          ]
        },
        "username": {
          "type": "string",
          "pattern": "^[^@ \\t\\r\\n]+$",
          "example": "carlosg72"
        }
      }
    },
    "UserUpdate": {
      "type": "object",
      "required": [
        "username",
        "email",
        "fullname",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "pattern": "^[^@ \\t\\r\\n]+@[^@ \\t\\r\\n]+\\.[^@ \\t\\r\\n]+$",
          "example": "carlos@mail.com"
        },
        "fullname": {
          "type": "string",
          "example": "Javier Gatón Herguedas"
        },
        "password": {
          "type": "string",
          "format": "password",
          "pattern": "^.{6,}$",
          "example": "password"
        },
        "username": {
          "type": "string",
          "pattern": "^[^@ \\t\\r\\n]+$",
          "example": "carlosg72"
        }
      }
    }
  },
  "responses": {
    "BadRequestError": {
      "description": "Incorrect Request, or invalida data",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ConflictError": {
      "description": "A user with same username/email already exists",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ForbiddenError": {
      "description": "Not authorized to this content",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "GoneError": {
      "description": "That user (password and name) does not exist",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "InternalServerError": {
      "description": "Internal error"
    }
  },
  "securityDefinitions": {
    "BearerCookie": {
      "type": "apiKey",
      "name": "Cookie",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "Operations related to authentication",
      "name": "auth"
    },
    {
      "description": "Operations that start with users",
      "name": "user"
    },
    {
      "description": "Operations that start with teams",
      "name": "team"
    },
    {
      "description": "Operations that start with questions",
      "name": "question"
    },
    {
      "description": "Operations that start with tests",
      "name": "test"
    },
    {
      "description": "Operations that start with publishedTests",
      "name": "publishedTest"
    },
    {
      "description": "Operations that start with answers",
      "name": "answer"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "DevTest",
    "title": "DevTest",
    "contact": {
      "email": "javigaton@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "host": "localhost",
  "basePath": "/DevTest",
  "paths": {
    "/accesstokens": {
      "post": {
        "description": "Tries to login, and gets a JWT auth token if successful",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Registers a new authorized connection token",
        "operationId": "Login",
        "parameters": [
          {
            "description": "User who is trying to generate a token",
            "name": "loginUser",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginUser"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful authentication. Session JWT returned in Cookie \"Bearer-Cookie\". You need to include this cookie in subsequent requests.",
            "headers": {
              "Set-Cookie": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/accesstokens/{username}": {
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Modifies the current JWT Cookie related to the current session, extending.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Modifies the current JWT Cookie related to the current session, extending it.",
        "operationId": "relogin",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user with the token",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful cookie modification. Session JWT returned in Cookie \"Bearer-Cookie\".",
            "headers": {
              "Set-Cookie": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Deletes all sessions of the user. Makes every current JWT related to him useless.",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Deletes all sessions of the user. Makes every current JWT related to him useless.",
        "operationId": "closeSessions",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user with the token",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "description": "Current password of the user",
            "name": "password",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Password"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sessions deleted successfully"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/answers": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all answers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "answer"
        ],
        "summary": "Returns all answers",
        "operationId": "GetAnswers",
        "responses": {
          "200": {
            "description": "Answers found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Answer"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/answers/{answerid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns an answers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "answer"
        ],
        "summary": "Returns an answers",
        "operationId": "GetAnswer",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the answer",
            "name": "answerid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Answers found",
            "schema": {
              "$ref": "#/definitions/Answer"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Finishes an answers",
        "tags": [
          "answer"
        ],
        "summary": "Finishes an answer",
        "operationId": "FinishAnswer",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the answer",
            "name": "answerid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Answers finished"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/answers/{answerid}/qanswers": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns an answers's questionAnswers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "answer"
        ],
        "summary": "Returns an answer's questionAnswers",
        "operationId": "GetQuestionAnswersFromAnswer",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the answer",
            "name": "answerid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "QuestionAnswers found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/QuestionAnswer"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Answers a question",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "answer"
        ],
        "summary": "Answers a question",
        "operationId": "PostQuestionAnswer",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the answer",
            "name": "answerid",
            "in": "path",
            "required": true
          },
          {
            "description": "QuestionAnswer to post",
            "name": "questionAnswer",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QuestionAnswer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "QuestionAnswer created",
            "schema": {
              "$ref": "#/definitions/QuestionAnswer"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/answers/{answerid}/qanswers/{questionid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns an answers's questionAnswer",
        "produces": [
          "application/json"
        ],
        "tags": [
          "answer"
        ],
        "summary": "Returns an answer's questionAnswer",
        "operationId": "GetQuestionAnswerFromAnswer",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the answer",
            "name": "answerid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the question it is answering",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "QuestionAnswer found",
            "schema": {
              "$ref": "#/definitions/QuestionAnswer"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Updates a QuestionAnswer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "answer"
        ],
        "summary": "Updates a QuestionAnswer",
        "operationId": "PutQuestionAnswerFromAnswer",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the answer",
            "name": "answerid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the question it is answering",
            "name": "questionid",
            "in": "path",
            "required": true
          },
          {
            "description": "QuestionAnswer Updated",
            "name": "questionAnswer",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QuestionAnswer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "QuestionAnswer updated"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/answers/{answerid}/qanswers/{questionid}/review": {
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Updates an answer review",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "answer"
        ],
        "summary": "Updates an answer review",
        "operationId": "PutReview",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the answer",
            "name": "answerid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the question it is answering",
            "name": "questionid",
            "in": "path",
            "required": true
          },
          {
            "description": "Review Updated",
            "name": "review",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Review"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Review updated"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/logout": {
      "get": {
        "description": "Returns a useless cookie that will expire soon",
        "produces": [
          "application/json"
        ],
        "tags": [
          "auth"
        ],
        "summary": "Returns a useless cookie that will expire soon",
        "operationId": "Logout",
        "responses": {
          "200": {
            "description": "Logout cookie returned successfully",
            "headers": {
              "Set-Cookie": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/publishedTests": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all publishedTests",
        "produces": [
          "application/json"
        ],
        "tags": [
          "publishedTest"
        ],
        "summary": "Returns all publishedTests",
        "operationId": "GetPublishedTests",
        "responses": {
          "200": {
            "description": "PublishedTests found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Test"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/publishedTests/{testid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a publishedTest",
        "produces": [
          "application/json"
        ],
        "tags": [
          "publishedTest"
        ],
        "summary": "Returns a publishedTest",
        "operationId": "GetPublishedTest",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the publishedTest",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "PublishedTest found",
            "schema": {
              "$ref": "#/definitions/Test"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/publishedTests/{testid}/answers": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all answers from a published test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "publishedTest"
        ],
        "summary": "Returns all answers from a published test",
        "operationId": "GetAnswersFromPublishedTests",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the publishedTest",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Answers found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Answer"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/publishedTests/{testid}/questions": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all questions from a published test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "publishedTest"
        ],
        "summary": "Returns all questions from a published test",
        "operationId": "GetQuestionsFromPublishedTests",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the publishedTest",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Questions found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Question"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/publishedTests/{testid}/questions/{questionid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a question from a published test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "publishedTest"
        ],
        "summary": "Returns a question from a published test",
        "operationId": "GetQuestionFromPublishedTests",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the publishedTest",
            "name": "testid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the question to get",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Question found",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/publishedTests/{testid}/questions/{questionid}/qanswers": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all questions answers to a question of a published test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "publishedTest"
        ],
        "summary": "Returns all questions answers to a question of a published test",
        "operationId": "GetQuestionAnswersFromPublishedTestQuestion",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the publishedTest",
            "name": "testid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the question",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "QuestionAnswers found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/QuestionAnswer"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/publishedTests/{testid}/teams": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all teams from a publishedTest.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "publishedTest"
        ],
        "summary": "Returns all teams from a publishedTest.",
        "operationId": "GetTeamsFromPublishedTest",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the publishedTest to find its teams",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "teams found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/publishedTests/{testid}/teams/{teamname}": {
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Invites a team to do a test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "publishedTest"
        ],
        "summary": "Invites a team to do a test",
        "operationId": "InviteTeamToPublishedTest",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to invite to test",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the test to find",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "team invited"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Removes a team to do a test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "publishedTest"
        ],
        "summary": "Removes a team to do a test",
        "operationId": "RemoveTeamToPublishedTest",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to Remove from test",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the test to find",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "team removed"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/publishedTests/{testid}/users": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all users from a publishedTest.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "publishedTest"
        ],
        "summary": "Returns all users from a publishedTest.",
        "operationId": "GetUsersFromPublishedTest",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the publishedTest to find its users",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "users found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/publishedTests/{testid}/users/{username}": {
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Invites a user to do a test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "publishedTest"
        ],
        "summary": "Invites a user to do a test",
        "operationId": "InviteUserToPublishedTest",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who can answer the publishedTest",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the test",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user invited"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Removes a user to do a test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "publishedTest"
        ],
        "summary": "Removes a user from a test",
        "operationId": "RemoveUserToPublishedTest",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who cant answer the publishedTest",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the test",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user removed"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/questions": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all questions",
        "produces": [
          "application/json"
        ],
        "tags": [
          "question"
        ],
        "summary": "Returns all questions",
        "operationId": "GetQuestions",
        "responses": {
          "200": {
            "description": "questions found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Question"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/questions/{questionid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a question",
        "produces": [
          "application/json"
        ],
        "tags": [
          "question"
        ],
        "summary": "Returns a question",
        "operationId": "GetQuestion",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the question to find",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Question found",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Updates a question",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "question"
        ],
        "summary": "Updates a question",
        "operationId": "PutQuestion",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the question to update",
            "name": "questionid",
            "in": "path",
            "required": true
          },
          {
            "description": "Question modified",
            "name": "question",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Question"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Question updated"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Deletes a question",
        "tags": [
          "question"
        ],
        "summary": "Deletes a question",
        "operationId": "DeleteQuestion",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the question to delete",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Question deleted"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/questions/{questionid}/tags": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all tags from a question.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "question"
        ],
        "summary": "Returns all tags from a question.",
        "operationId": "GetTagsFromQuestion",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the question to find its tags",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "tags found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tag"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/questions/{questionid}/tags/{tag}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a tag from a question.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "question"
        ],
        "summary": "Returns a tag from a question.",
        "operationId": "GetTagFromQuestion",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the question to find its tags",
            "name": "questionid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Tag to find",
            "name": "tag",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "tag found",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Adds a tag to a question",
        "tags": [
          "question"
        ],
        "summary": "Adds a tag to a question",
        "operationId": "AddTagToQuestion",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the question to add a tag",
            "name": "questionid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Tag to add",
            "name": "tag",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "tag added"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Removes a tag from a question",
        "tags": [
          "question"
        ],
        "summary": "Removes a tag from a question",
        "operationId": "RemoveTagFromQuestion",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the question to remove a tag",
            "name": "questionid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Tag to remove",
            "name": "tag",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "tag removed"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/questions/{questionid}/teams": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all teams from a question.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "question"
        ],
        "summary": "Returns all teams from a question.",
        "operationId": "GetTeamsFromQuestion",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the question to find its teams",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "teams found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/questions/{questionid}/teams/{teamname}": {
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Adds a team to administer a question",
        "produces": [
          "application/json"
        ],
        "tags": [
          "question"
        ],
        "summary": "Adds a team to administer a question",
        "operationId": "AddTeamToQuestion",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to let administrate",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the question to find",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "team added"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Removes a team to administer a question",
        "produces": [
          "application/json"
        ],
        "tags": [
          "question"
        ],
        "summary": "Removes a team to administer a question",
        "operationId": "RemoveTeamToQuestion",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to remove from question",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the question to find",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "team removed"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/tags": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all tags.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "tag"
        ],
        "summary": "Returns all tags.",
        "operationId": "GetTags",
        "responses": {
          "200": {
            "description": "tags found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tag"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/tags/{tag}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a tags.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "tag"
        ],
        "summary": "Returns a tags.",
        "operationId": "GetTag",
        "parameters": [
          {
            "type": "string",
            "description": "Tag to find",
            "name": "tag",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "tag found",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/tags/{tag}/questions": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all questions from a tag.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "tag"
        ],
        "summary": "Returns all questions from a tag.",
        "operationId": "GetQuestionsFromTag",
        "parameters": [
          {
            "type": "string",
            "description": "Tag to find its questions",
            "name": "tag",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "questions found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Question"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/teams": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all teams.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns all teams.",
        "operationId": "GetTeams",
        "responses": {
          "200": {
            "description": "teams found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/teams/{teamname}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Finds a team by its teamname",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Finds a team by its teamname",
        "operationId": "getTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to find",
            "name": "teamname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "team found",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Modifies the team \u003cteamname\u003e",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Modifies the team \u003cteamname\u003e",
        "operationId": "putTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to modify its information",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "description": "Team information updated",
            "name": "team",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Team"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "team updated"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "A user with same username/email already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Deletes a team by its teamname",
        "tags": [
          "team"
        ],
        "summary": "Deletes a team by its teamname",
        "operationId": "deleteTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to delete",
            "name": "teamname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "team found and deleted"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/teams/{teamname}/admins": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all users that are admins of a team",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns all users that are admins of a team",
        "operationId": "GetAdmins",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to get its admins",
            "name": "teamname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "admins found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/teams/{teamname}/admins/{username}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a user that have the role admin in a team",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns a user that have the role admin in a team",
        "operationId": "GetAdmin",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to get its admin",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Username of the user to check if it is an admin",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user found",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Adds user {username} to team {teamname} as an Admin.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Adds user {username} to team {teamname} as an Admin",
        "operationId": "AddAdmin",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to modify",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Username of the user to add",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User added to team"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "A user with same username/email already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/teams/{teamname}/members": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all users that have the role members in a team",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns all users that have the role members in a team",
        "operationId": "GetMembers",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to get its members",
            "name": "teamname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "users found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/teams/{teamname}/members/{username}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a user that have the role member in a team",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns a user that have the role member in a team",
        "operationId": "GetMember",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to get its member",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Username of the user to check if it is a member",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user found",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Adds user {username} to team {teamname} as a Member.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Adds user {username} to team {teamname} as a Member",
        "operationId": "AddMember",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to modify",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Username of the user to add",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User added to team"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "A user with same username/email already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/teams/{teamname}/publishedTests": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all publishedTests that the team administers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns all publishedTests that the team administers",
        "operationId": "GetPublishedTestsFromTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to get its publishedTests",
            "name": "teamname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "publishedTests found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Test"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/teams/{teamname}/publishedTests/{testid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a publishedTest that the team administers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns a publishedTest that the team administers",
        "operationId": "GetPublishedTestFromTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to get its publishedTest",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the publishedTest to find",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "publishedTest found",
            "schema": {
              "$ref": "#/definitions/Test"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/teams/{teamname}/questions": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all questions that the team administers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns all questions that the team administers",
        "operationId": "GetQuestionsFromTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to get its questions",
            "name": "teamname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "questions found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Question"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/teams/{teamname}/questions/{questionid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a question that the team administers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns a question that the team administers",
        "operationId": "GetQuestionFromTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to get its question",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the question to find",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "question found",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/teams/{teamname}/tests": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all tests that the team administers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns all tests that the team administers",
        "operationId": "GetTestsFromTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to get its tests",
            "name": "teamname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "tests found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Test"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/teams/{teamname}/tests/{testid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a test that the team administers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns a test that the team administers",
        "operationId": "GetTestFromTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to get its question",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the test to find",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "test found",
            "schema": {
              "$ref": "#/definitions/Test"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/teams/{teamname}/users": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all users that are in a team",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns all users that are in a team",
        "operationId": "GetUsersFromTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to get its users",
            "name": "teamname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "users found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/teams/{teamname}/users/{username}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a user that is in a team",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Returns a user that is in a team",
        "operationId": "GetUserFromTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to get its user",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Username of the user to check if it is in the team",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user found",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Deletes user {username} from team {teamname}",
        "produces": [
          "application/json"
        ],
        "tags": [
          "team"
        ],
        "summary": "Deletes user {username} from team {teamname}",
        "operationId": "DeleteUserFromTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to modify",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Username of the user to delete from team",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted from team"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/tests": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all tests",
        "produces": [
          "application/json"
        ],
        "tags": [
          "test"
        ],
        "summary": "Returns all tests",
        "operationId": "GetTests",
        "responses": {
          "200": {
            "description": "tests found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Test"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/tests/{testid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "test"
        ],
        "summary": "Returns a test",
        "operationId": "GetTest",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the test to find",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Test found",
            "schema": {
              "$ref": "#/definitions/Test"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Updates a test",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "test"
        ],
        "summary": "Updates a test",
        "operationId": "PutTest",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the test to update",
            "name": "testid",
            "in": "path",
            "required": true
          },
          {
            "description": "Test modified",
            "name": "test",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Test"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Test updated"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Deletes a test",
        "tags": [
          "test"
        ],
        "summary": "Deletes a test",
        "operationId": "DeleteTest",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the test to delete",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Test deleted"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/tests/{testid}/publishedTests": {
      "post": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Creates a new publishedTest. The user must be the owner of the test.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "test",
          "publishedTest"
        ],
        "summary": "Creates a new publishedTest. The user must be the owner of the test.",
        "operationId": "PostPublishedTest",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the test to publish",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "publishedTest created",
            "schema": {
              "$ref": "#/definitions/Test"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/tests/{testid}/questions": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all questions of the test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "test"
        ],
        "summary": "Returns all questions of the test",
        "operationId": "GetQuestionsFromTest",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the test",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "questions found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Question"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/tests/{testid}/questions/{questionid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a question from a test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "test"
        ],
        "summary": "Returns a question from a test",
        "operationId": "GetQuestionFromTest",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the test to find a question from",
            "name": "testid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the question to find in the test",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Question found",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Adds an existing question to a test",
        "tags": [
          "test"
        ],
        "summary": "Adds an existing question to a test",
        "operationId": "AddQuestionToTest",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the test to add a question to",
            "name": "testid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the question to add to the test",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Question added"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Removes an existing question from a test",
        "tags": [
          "test"
        ],
        "summary": "Removes an existing question from a test",
        "operationId": "RemoveQuestionFromTest",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the test to remove a question from",
            "name": "testid",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the question to remove from the test",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Question removed"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/tests/{testid}/teams": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all teams from a test.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "test"
        ],
        "summary": "Returns all teams from a test.",
        "operationId": "GetTeamsFromTest",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of the test to find its teams",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "teams found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/tests/{testid}/teams/{teamname}": {
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Adds a team to administer a test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "test"
        ],
        "summary": "Adds a team to administer a test",
        "operationId": "AddTeamToTest",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to let administrate",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the test to find",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "team added"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Removes a team to administer a test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "test"
        ],
        "summary": "Removes a team to administer a test",
        "operationId": "RemoveTeamToTest",
        "parameters": [
          {
            "type": "string",
            "description": "Teamname of the team to remove",
            "name": "teamname",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the test to find",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "team removed"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/users": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all users. Only for admins",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns all users. Only for admins",
        "operationId": "GetUsers",
        "responses": {
          "200": {
            "description": "users found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "post": {
        "description": "Adds a user to the system",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user",
          "auth"
        ],
        "summary": "adds a user",
        "operationId": "RegisterUser",
        "parameters": [
          {
            "description": "User item to add",
            "name": "signinUser",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SigninUser"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "user created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "A user with same username/email already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/users/{username}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Finds a user by its username",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Finds a user by its username",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user to find",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user found",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Modifies the user \u003cusername\u003e",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Modifies the user \u003cusername\u003e",
        "operationId": "putUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user to modify its information",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "description": "User information updated",
            "name": "userUpdate",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user updated"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "A user with same username/email already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Deletes a user by its username",
        "tags": [
          "user"
        ],
        "summary": "Deletes a user by its username",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user to delete",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user found and deleted"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/users/{username}/answeredTests": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all publishedTests that the user has answered",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns all publishedTests that the user has answered",
        "operationId": "GetAnsweredTestsFromUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who has answered the publishedTests",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "publishedTests found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Test"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/users/{username}/answeredTests/{testid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a publishedTest that the user has answered",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns a publishedTest that the user has answered",
        "operationId": "GetAnsweredTestFromUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who has answered the publishedTest",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the test",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "publishedTest found",
            "schema": {
              "$ref": "#/definitions/Test"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/users/{username}/answeredTests/{testid}/answers": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all answers that the user has answered to a test",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns all answers that the user has answered to a test",
        "operationId": "GetAnswersFromUserAnsweredTest",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who has answered the test",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the test",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "answers found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Answer"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/users/{username}/answers": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all answers that the user has answered",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns all answers that the user has answered",
        "operationId": "GetAnswersFromUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who is the author of the answers",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "answers found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Answer"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/users/{username}/answers/{answerid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns an answer that the user has answered",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns an answers that the user has answered",
        "operationId": "GetAnswerFromUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who is the author of the answer",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the answer",
            "name": "answerid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "answer found",
            "schema": {
              "$ref": "#/definitions/Answer"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/users/{username}/password": {
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Modifies the password of the user \u003cusername\u003e",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "user",
          "auth"
        ],
        "summary": "Modifies the password of the user \u003cusername\u003e",
        "operationId": "putPassword",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user to modify its password",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "description": "Password update information",
            "name": "passwordUpdate",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource password modified correctly"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/users/{username}/publishedTests": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all publishedTests that the user can answer",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns all publishedTests that the user can answer",
        "operationId": "GetPublishedTestsFromUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who can answer the publishedTests",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "publishedTests found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Test"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/users/{username}/publishedTests/{testid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a publishedTest that the user can answer",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns a publishedTest that the user can answer",
        "operationId": "GetPublishedTestFromUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who can answer the publishedTest",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the test",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "publishedTest found",
            "schema": {
              "$ref": "#/definitions/Test"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/users/{username}/publishedTests/{testid}/answers": {
      "post": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Starts a new answer",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user",
          "answer"
        ],
        "summary": "Starts a new answer",
        "operationId": "StartAnswer",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who can answer the publishedTest",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the test",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Answer started",
            "schema": {
              "$ref": "#/definitions/Answer"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/users/{username}/questions": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all questions owned by the user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns all questions owned by the user",
        "operationId": "GetQuestionsOfUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who owns the questions",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "questions found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Question"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Creates a question",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user",
          "question"
        ],
        "summary": "Creates a question",
        "operationId": "PostQuestion",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who owns the question",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "description": "Question to add",
            "name": "question",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Question"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "question created",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/users/{username}/questions/{questionid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a question of a user",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns a question of a user",
        "operationId": "GetQuestionFromUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user who owns the question",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "id of the question to find",
            "name": "questionid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "question found",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/users/{username}/role": {
      "put": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Modifies the role of the user \u003cusername\u003e",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Modifies the role of the user \u003cusername\u003e",
        "operationId": "putRole",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user to modify its role",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "description": "Role update information",
            "name": "role",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource role modified correctly"
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/users/{username}/teams": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all teams of a user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns all teams of a user.",
        "operationId": "GetTeamsOfUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user to get their teams",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "teams found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Team"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Adds a team to the system",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "team",
          "user"
        ],
        "summary": "adds a team",
        "operationId": "PostTeam",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user to get their teams",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "description": "Team item to add",
            "name": "team",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Team"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "team created",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "A user with same username/email already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/users/{username}/teams/{teamname}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Finds a team by its teamname, only if the user is in it",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Finds a team by its teamname, only if the user is in it",
        "operationId": "getTeamFromUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the user to check",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Teamname of the team to find",
            "name": "teamname",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "team found",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/users/{username}/tests": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns all tests owned by a user (teacher).",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns all tests owned by a user (teacher).",
        "operationId": "GetTestsFromUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the teacher who owns the question",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "tests found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Test"
              }
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Creates a new test. The user must be a teacher.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user",
          "test"
        ],
        "summary": "Creates a new test. The user must be a teacher.",
        "operationId": "PostTest",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the teacher who owns the question",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "description": "New Test to create",
            "name": "test",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Test"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "test created",
            "schema": {
              "$ref": "#/definitions/Test"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/users/{username}/tests/{testid}": {
      "get": {
        "security": [
          {
            "BearerCookie": []
          }
        ],
        "description": "Returns a test from its user owner",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Returns a test from its user owner",
        "operationId": "GetTestFromUser",
        "parameters": [
          {
            "type": "string",
            "description": "Username of the teacher who owns the question",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Id of the test",
            "name": "testid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "test found",
            "schema": {
              "$ref": "#/definitions/Test"
            }
          },
          "400": {
            "description": "Incorrect Request, or invalida data",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Not authorized to this content",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "That user (password and name) does not exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    }
  },
  "definitions": {
    "Answer": {
      "type": "object",
      "required": [
        "finished"
      ],
      "properties": {
        "finished": {
          "type": "boolean",
          "example": false
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "startime": {
          "type": "string",
          "example": "2021-02-25 14:44:55"
        },
        "testid": {
          "type": "integer",
          "example": 343
        },
        "username": {
          "type": "string",
          "example": "javgat"
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "example": "Object not found"
        }
      }
    },
    "LoginUser": {
      "type": "object",
      "required": [
        "loginid",
        "pass"
      ],
      "properties": {
        "loginid": {
          "type": "string",
          "example": "carlosg72 || carlos@mail.com"
        },
        "pass": {
          "type": "string",
          "format": "password",
          "pattern": "^.{6,}$",
          "example": "password"
        }
      }
    },
    "Password": {
      "type": "object",
      "required": [
        "password"
      ],
      "properties": {
        "password": {
          "type": "string",
          "format": "password",
          "pattern": "^.{6,}$",
          "example": "password"
        }
      }
    },
    "PasswordUpdate": {
      "type": "object",
      "required": [
        "oldpass",
        "newpass"
      ],
      "properties": {
        "newpass": {
          "type": "string",
          "format": "password",
          "pattern": "^.{6,}$",
          "example": "password"
        },
        "oldpass": {
          "type": "string",
          "format": "password",
          "pattern": "^.{6,}$",
          "example": "password"
        }
      }
    },
    "Question": {
      "type": "object",
      "required": [
        "title",
        "question",
        "estimatedTime",
        "autoCorrect",
        "editable",
        "username",
        "tipoPregunta"
      ],
      "properties": {
        "autoCorrect": {
          "type": "boolean",
          "example": true
        },
        "editable": {
          "type": "boolean",
          "example": false
        },
        "eleccionUnica": {
          "type": "boolean",
          "example": false
        },
        "estimatedTime": {
          "type": "integer",
          "example": 32600
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "question": {
          "type": "string",
          "example": "¿Cual es el lenguaje que tiene un nombre más largo de todos?"
        },
        "solucion": {
          "type": "string",
          "example": "Javadoc"
        },
        "tipoPregunta": {
          "type": "string",
          "enum": [
            "opciones",
            "string",
            "codigo"
          ]
        },
        "title": {
          "type": "string",
          "example": "Paralelismo en C"
        },
        "username": {
          "type": "string",
          "example": "javgat"
        }
      }
    },
    "QuestionAnswer": {
      "type": "object",
      "properties": {
        "idPregunta": {
          "type": "integer",
          "example": 1
        },
        "idRespuesta": {
          "type": "integer",
          "example": 1
        },
        "indiceOpcion": {
          "type": "integer",
          "example": 1
        },
        "respuesta": {
          "type": "string",
          "example": "Javadoc"
        }
      }
    },
    "Review": {
      "type": "object",
      "required": [
        "puntuacion"
      ],
      "properties": {
        "puntuacion": {
          "type": "integer",
          "example": 100
        }
      }
    },
    "Role": {
      "type": "object",
      "required": [
        "rol"
      ],
      "properties": {
        "rol": {
          "type": "string",
          "enum": [
            "estudiante",
            "profesor",
            "administrador"
          ]
        }
      }
    },
    "SigninUser": {
      "type": "object",
      "required": [
        "username",
        "email",
        "pass"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "pattern": "^[^@ \\t\\r\\n]+@[^@ \\t\\r\\n]+\\.[^@ \\t\\r\\n]+$",
          "example": "carlos@mail.com"
        },
        "pass": {
          "type": "string",
          "format": "password",
          "pattern": "^.{6,}$",
          "example": "password"
        },
        "username": {
          "type": "string",
          "pattern": "^[^@ \\t\\r\\n]+$",
          "example": "carlosg72"
        }
      }
    },
    "Tag": {
      "type": "object",
      "required": [
        "tag"
      ],
      "properties": {
        "tag": {
          "type": "string",
          "example": "Java"
        }
      }
    },
    "Team": {
      "type": "object",
      "required": [
        "teamname",
        "soloProfesores"
      ],
      "properties": {
        "description": {
          "type": "string",
          "example": "DevTest Team"
        },
        "soloProfesores": {
          "type": "boolean",
          "example": true
        },
        "teamname": {
          "type": "string",
          "pattern": "^[^@ \\t\\r\\n]+$",
          "example": "devtestTeam"
        }
      }
    },
    "Test": {
      "type": "object",
      "required": [
        "title",
        "description",
        "maxSeconds",
        "accesoPublico",
        "editable",
        "username"
      ],
      "properties": {
        "accesoPublico": {
          "type": "boolean",
          "example": true
        },
        "description": {
          "type": "string",
          "example": "En este test se evaluaran los conocimientos respecto al lenguaje de programación Java"
        },
        "editable": {
          "type": "boolean",
          "example": false
        },
        "id": {
          "type": "integer",
          "example": 1
        },
        "maxSeconds": {
          "type": "integer",
          "example": 32600
        },
        "title": {
          "type": "string",
          "example": "Test de introduccion a Java"
        },
        "username": {
          "type": "string",
          "example": "javgat"
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "username",
        "email"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "pattern": "^[^@ \\t\\r\\n]+@[^@ \\t\\r\\n]+\\.[^@ \\t\\r\\n]+$",
          "example": "carlos@mail.com"
        },
        "fullname": {
          "type": "string",
          "example": "Javier Gatón Herguedas"
        },
        "rol": {
          "type": "string",
          "enum": [
            "estudiante",
            "profesor",
            "administrador"
          ]
        },
        "username": {
          "type": "string",
          "pattern": "^[^@ \\t\\r\\n]+$",
          "example": "carlosg72"
        }
      }
    },
    "UserUpdate": {
      "type": "object",
      "required": [
        "username",
        "email",
        "fullname",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "pattern": "^[^@ \\t\\r\\n]+@[^@ \\t\\r\\n]+\\.[^@ \\t\\r\\n]+$",
          "example": "carlos@mail.com"
        },
        "fullname": {
          "type": "string",
          "example": "Javier Gatón Herguedas"
        },
        "password": {
          "type": "string",
          "format": "password",
          "pattern": "^.{6,}$",
          "example": "password"
        },
        "username": {
          "type": "string",
          "pattern": "^[^@ \\t\\r\\n]+$",
          "example": "carlosg72"
        }
      }
    }
  },
  "responses": {
    "BadRequestError": {
      "description": "Incorrect Request, or invalida data",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ConflictError": {
      "description": "A user with same username/email already exists",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "ForbiddenError": {
      "description": "Not authorized to this content",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "GoneError": {
      "description": "That user (password and name) does not exist",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "InternalServerError": {
      "description": "Internal error"
    }
  },
  "securityDefinitions": {
    "BearerCookie": {
      "type": "apiKey",
      "name": "Cookie",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "Operations related to authentication",
      "name": "auth"
    },
    {
      "description": "Operations that start with users",
      "name": "user"
    },
    {
      "description": "Operations that start with teams",
      "name": "team"
    },
    {
      "description": "Operations that start with questions",
      "name": "question"
    },
    {
      "description": "Operations that start with tests",
      "name": "test"
    },
    {
      "description": "Operations that start with publishedTests",
      "name": "publishedTest"
    },
    {
      "description": "Operations that start with answers",
      "name": "answer"
    }
  ]
}`))
}
