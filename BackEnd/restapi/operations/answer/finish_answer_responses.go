// Code generated by go-swagger; DO NOT EDIT.

package answer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// FinishAnswerOKCode is the HTTP code returned for type FinishAnswerOK
const FinishAnswerOKCode int = 200

/*FinishAnswerOK Answers finished

swagger:response finishAnswerOK
*/
type FinishAnswerOK struct {
}

// NewFinishAnswerOK creates FinishAnswerOK with default headers values
func NewFinishAnswerOK() *FinishAnswerOK {

	return &FinishAnswerOK{}
}

// WriteResponse to the client
func (o *FinishAnswerOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// FinishAnswerBadRequestCode is the HTTP code returned for type FinishAnswerBadRequest
const FinishAnswerBadRequestCode int = 400

/*FinishAnswerBadRequest Incorrect Request, or invalida data

swagger:response finishAnswerBadRequest
*/
type FinishAnswerBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewFinishAnswerBadRequest creates FinishAnswerBadRequest with default headers values
func NewFinishAnswerBadRequest() *FinishAnswerBadRequest {

	return &FinishAnswerBadRequest{}
}

// WithPayload adds the payload to the finish answer bad request response
func (o *FinishAnswerBadRequest) WithPayload(payload *models.Error) *FinishAnswerBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the finish answer bad request response
func (o *FinishAnswerBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FinishAnswerBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// FinishAnswerForbiddenCode is the HTTP code returned for type FinishAnswerForbidden
const FinishAnswerForbiddenCode int = 403

/*FinishAnswerForbidden Not authorized to this content

swagger:response finishAnswerForbidden
*/
type FinishAnswerForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewFinishAnswerForbidden creates FinishAnswerForbidden with default headers values
func NewFinishAnswerForbidden() *FinishAnswerForbidden {

	return &FinishAnswerForbidden{}
}

// WithPayload adds the payload to the finish answer forbidden response
func (o *FinishAnswerForbidden) WithPayload(payload *models.Error) *FinishAnswerForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the finish answer forbidden response
func (o *FinishAnswerForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FinishAnswerForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// FinishAnswerConflictCode is the HTTP code returned for type FinishAnswerConflict
const FinishAnswerConflictCode int = 409

/*FinishAnswerConflict A user with same username/email already exists

swagger:response finishAnswerConflict
*/
type FinishAnswerConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewFinishAnswerConflict creates FinishAnswerConflict with default headers values
func NewFinishAnswerConflict() *FinishAnswerConflict {

	return &FinishAnswerConflict{}
}

// WithPayload adds the payload to the finish answer conflict response
func (o *FinishAnswerConflict) WithPayload(payload *models.Error) *FinishAnswerConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the finish answer conflict response
func (o *FinishAnswerConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FinishAnswerConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// FinishAnswerGoneCode is the HTTP code returned for type FinishAnswerGone
const FinishAnswerGoneCode int = 410

/*FinishAnswerGone That resource does not exist

swagger:response finishAnswerGone
*/
type FinishAnswerGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewFinishAnswerGone creates FinishAnswerGone with default headers values
func NewFinishAnswerGone() *FinishAnswerGone {

	return &FinishAnswerGone{}
}

// WithPayload adds the payload to the finish answer gone response
func (o *FinishAnswerGone) WithPayload(payload *models.Error) *FinishAnswerGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the finish answer gone response
func (o *FinishAnswerGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FinishAnswerGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// FinishAnswerInternalServerErrorCode is the HTTP code returned for type FinishAnswerInternalServerError
const FinishAnswerInternalServerErrorCode int = 500

/*FinishAnswerInternalServerError Internal error

swagger:response finishAnswerInternalServerError
*/
type FinishAnswerInternalServerError struct {
}

// NewFinishAnswerInternalServerError creates FinishAnswerInternalServerError with default headers values
func NewFinishAnswerInternalServerError() *FinishAnswerInternalServerError {

	return &FinishAnswerInternalServerError{}
}

// WriteResponse to the client
func (o *FinishAnswerInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
