// Code generated by go-swagger; DO NOT EDIT.

package answer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// GetQuestionAnswerFromAnswerOKCode is the HTTP code returned for type GetQuestionAnswerFromAnswerOK
const GetQuestionAnswerFromAnswerOKCode int = 200

/*GetQuestionAnswerFromAnswerOK QuestionAnswer found

swagger:response getQuestionAnswerFromAnswerOK
*/
type GetQuestionAnswerFromAnswerOK struct {

	/*
	  In: Body
	*/
	Payload *models.QuestionAnswer `json:"body,omitempty"`
}

// NewGetQuestionAnswerFromAnswerOK creates GetQuestionAnswerFromAnswerOK with default headers values
func NewGetQuestionAnswerFromAnswerOK() *GetQuestionAnswerFromAnswerOK {

	return &GetQuestionAnswerFromAnswerOK{}
}

// WithPayload adds the payload to the get question answer from answer o k response
func (o *GetQuestionAnswerFromAnswerOK) WithPayload(payload *models.QuestionAnswer) *GetQuestionAnswerFromAnswerOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get question answer from answer o k response
func (o *GetQuestionAnswerFromAnswerOK) SetPayload(payload *models.QuestionAnswer) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuestionAnswerFromAnswerOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetQuestionAnswerFromAnswerBadRequestCode is the HTTP code returned for type GetQuestionAnswerFromAnswerBadRequest
const GetQuestionAnswerFromAnswerBadRequestCode int = 400

/*GetQuestionAnswerFromAnswerBadRequest Incorrect Request, or invalida data

swagger:response getQuestionAnswerFromAnswerBadRequest
*/
type GetQuestionAnswerFromAnswerBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetQuestionAnswerFromAnswerBadRequest creates GetQuestionAnswerFromAnswerBadRequest with default headers values
func NewGetQuestionAnswerFromAnswerBadRequest() *GetQuestionAnswerFromAnswerBadRequest {

	return &GetQuestionAnswerFromAnswerBadRequest{}
}

// WithPayload adds the payload to the get question answer from answer bad request response
func (o *GetQuestionAnswerFromAnswerBadRequest) WithPayload(payload *models.Error) *GetQuestionAnswerFromAnswerBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get question answer from answer bad request response
func (o *GetQuestionAnswerFromAnswerBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuestionAnswerFromAnswerBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetQuestionAnswerFromAnswerForbiddenCode is the HTTP code returned for type GetQuestionAnswerFromAnswerForbidden
const GetQuestionAnswerFromAnswerForbiddenCode int = 403

/*GetQuestionAnswerFromAnswerForbidden Not authorized to this content

swagger:response getQuestionAnswerFromAnswerForbidden
*/
type GetQuestionAnswerFromAnswerForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetQuestionAnswerFromAnswerForbidden creates GetQuestionAnswerFromAnswerForbidden with default headers values
func NewGetQuestionAnswerFromAnswerForbidden() *GetQuestionAnswerFromAnswerForbidden {

	return &GetQuestionAnswerFromAnswerForbidden{}
}

// WithPayload adds the payload to the get question answer from answer forbidden response
func (o *GetQuestionAnswerFromAnswerForbidden) WithPayload(payload *models.Error) *GetQuestionAnswerFromAnswerForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get question answer from answer forbidden response
func (o *GetQuestionAnswerFromAnswerForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuestionAnswerFromAnswerForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetQuestionAnswerFromAnswerGoneCode is the HTTP code returned for type GetQuestionAnswerFromAnswerGone
const GetQuestionAnswerFromAnswerGoneCode int = 410

/*GetQuestionAnswerFromAnswerGone That user (password and name) does not exist

swagger:response getQuestionAnswerFromAnswerGone
*/
type GetQuestionAnswerFromAnswerGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetQuestionAnswerFromAnswerGone creates GetQuestionAnswerFromAnswerGone with default headers values
func NewGetQuestionAnswerFromAnswerGone() *GetQuestionAnswerFromAnswerGone {

	return &GetQuestionAnswerFromAnswerGone{}
}

// WithPayload adds the payload to the get question answer from answer gone response
func (o *GetQuestionAnswerFromAnswerGone) WithPayload(payload *models.Error) *GetQuestionAnswerFromAnswerGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get question answer from answer gone response
func (o *GetQuestionAnswerFromAnswerGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuestionAnswerFromAnswerGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetQuestionAnswerFromAnswerInternalServerErrorCode is the HTTP code returned for type GetQuestionAnswerFromAnswerInternalServerError
const GetQuestionAnswerFromAnswerInternalServerErrorCode int = 500

/*GetQuestionAnswerFromAnswerInternalServerError Internal error

swagger:response getQuestionAnswerFromAnswerInternalServerError
*/
type GetQuestionAnswerFromAnswerInternalServerError struct {
}

// NewGetQuestionAnswerFromAnswerInternalServerError creates GetQuestionAnswerFromAnswerInternalServerError with default headers values
func NewGetQuestionAnswerFromAnswerInternalServerError() *GetQuestionAnswerFromAnswerInternalServerError {

	return &GetQuestionAnswerFromAnswerInternalServerError{}
}

// WriteResponse to the client
func (o *GetQuestionAnswerFromAnswerInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
