// Code generated by go-swagger; DO NOT EDIT.

package answer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"uva-devtest/models"
)

// PutQuestionAnswerFromAnswerHandlerFunc turns a function with the right signature into a put question answer from answer handler
type PutQuestionAnswerFromAnswerHandlerFunc func(PutQuestionAnswerFromAnswerParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn PutQuestionAnswerFromAnswerHandlerFunc) Handle(params PutQuestionAnswerFromAnswerParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// PutQuestionAnswerFromAnswerHandler interface for that can handle valid put question answer from answer params
type PutQuestionAnswerFromAnswerHandler interface {
	Handle(PutQuestionAnswerFromAnswerParams, *models.User) middleware.Responder
}

// NewPutQuestionAnswerFromAnswer creates a new http.Handler for the put question answer from answer operation
func NewPutQuestionAnswerFromAnswer(ctx *middleware.Context, handler PutQuestionAnswerFromAnswerHandler) *PutQuestionAnswerFromAnswer {
	return &PutQuestionAnswerFromAnswer{Context: ctx, Handler: handler}
}

/* PutQuestionAnswerFromAnswer swagger:route PUT /answers/{answerid}/qanswers/{questionid} answer putQuestionAnswerFromAnswer

Updates a QuestionAnswer

Updates a QuestionAnswer

*/
type PutQuestionAnswerFromAnswer struct {
	Context *middleware.Context
	Handler PutQuestionAnswerFromAnswerHandler
}

func (o *PutQuestionAnswerFromAnswer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutQuestionAnswerFromAnswerParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
