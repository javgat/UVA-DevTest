// Code generated by go-swagger; DO NOT EDIT.

package answer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// PutQuestionAnswerFromAnswerOKCode is the HTTP code returned for type PutQuestionAnswerFromAnswerOK
const PutQuestionAnswerFromAnswerOKCode int = 200

/*PutQuestionAnswerFromAnswerOK QuestionAnswer updated

swagger:response putQuestionAnswerFromAnswerOK
*/
type PutQuestionAnswerFromAnswerOK struct {
}

// NewPutQuestionAnswerFromAnswerOK creates PutQuestionAnswerFromAnswerOK with default headers values
func NewPutQuestionAnswerFromAnswerOK() *PutQuestionAnswerFromAnswerOK {

	return &PutQuestionAnswerFromAnswerOK{}
}

// WriteResponse to the client
func (o *PutQuestionAnswerFromAnswerOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// PutQuestionAnswerFromAnswerBadRequestCode is the HTTP code returned for type PutQuestionAnswerFromAnswerBadRequest
const PutQuestionAnswerFromAnswerBadRequestCode int = 400

/*PutQuestionAnswerFromAnswerBadRequest Incorrect Request, or invalida data

swagger:response putQuestionAnswerFromAnswerBadRequest
*/
type PutQuestionAnswerFromAnswerBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutQuestionAnswerFromAnswerBadRequest creates PutQuestionAnswerFromAnswerBadRequest with default headers values
func NewPutQuestionAnswerFromAnswerBadRequest() *PutQuestionAnswerFromAnswerBadRequest {

	return &PutQuestionAnswerFromAnswerBadRequest{}
}

// WithPayload adds the payload to the put question answer from answer bad request response
func (o *PutQuestionAnswerFromAnswerBadRequest) WithPayload(payload *models.Error) *PutQuestionAnswerFromAnswerBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put question answer from answer bad request response
func (o *PutQuestionAnswerFromAnswerBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutQuestionAnswerFromAnswerBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutQuestionAnswerFromAnswerForbiddenCode is the HTTP code returned for type PutQuestionAnswerFromAnswerForbidden
const PutQuestionAnswerFromAnswerForbiddenCode int = 403

/*PutQuestionAnswerFromAnswerForbidden Not authorized to this content

swagger:response putQuestionAnswerFromAnswerForbidden
*/
type PutQuestionAnswerFromAnswerForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutQuestionAnswerFromAnswerForbidden creates PutQuestionAnswerFromAnswerForbidden with default headers values
func NewPutQuestionAnswerFromAnswerForbidden() *PutQuestionAnswerFromAnswerForbidden {

	return &PutQuestionAnswerFromAnswerForbidden{}
}

// WithPayload adds the payload to the put question answer from answer forbidden response
func (o *PutQuestionAnswerFromAnswerForbidden) WithPayload(payload *models.Error) *PutQuestionAnswerFromAnswerForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put question answer from answer forbidden response
func (o *PutQuestionAnswerFromAnswerForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutQuestionAnswerFromAnswerForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutQuestionAnswerFromAnswerGoneCode is the HTTP code returned for type PutQuestionAnswerFromAnswerGone
const PutQuestionAnswerFromAnswerGoneCode int = 410

/*PutQuestionAnswerFromAnswerGone That user (password and name) does not exist

swagger:response putQuestionAnswerFromAnswerGone
*/
type PutQuestionAnswerFromAnswerGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutQuestionAnswerFromAnswerGone creates PutQuestionAnswerFromAnswerGone with default headers values
func NewPutQuestionAnswerFromAnswerGone() *PutQuestionAnswerFromAnswerGone {

	return &PutQuestionAnswerFromAnswerGone{}
}

// WithPayload adds the payload to the put question answer from answer gone response
func (o *PutQuestionAnswerFromAnswerGone) WithPayload(payload *models.Error) *PutQuestionAnswerFromAnswerGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put question answer from answer gone response
func (o *PutQuestionAnswerFromAnswerGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutQuestionAnswerFromAnswerGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutQuestionAnswerFromAnswerInternalServerErrorCode is the HTTP code returned for type PutQuestionAnswerFromAnswerInternalServerError
const PutQuestionAnswerFromAnswerInternalServerErrorCode int = 500

/*PutQuestionAnswerFromAnswerInternalServerError Internal error

swagger:response putQuestionAnswerFromAnswerInternalServerError
*/
type PutQuestionAnswerFromAnswerInternalServerError struct {
}

// NewPutQuestionAnswerFromAnswerInternalServerError creates PutQuestionAnswerFromAnswerInternalServerError with default headers values
func NewPutQuestionAnswerFromAnswerInternalServerError() *PutQuestionAnswerFromAnswerInternalServerError {

	return &PutQuestionAnswerFromAnswerInternalServerError{}
}

// WriteResponse to the client
func (o *PutQuestionAnswerFromAnswerInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
