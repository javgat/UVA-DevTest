// Code generated by go-swagger; DO NOT EDIT.

package answer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// PutReviewOKCode is the HTTP code returned for type PutReviewOK
const PutReviewOKCode int = 200

/*PutReviewOK Review updated

swagger:response putReviewOK
*/
type PutReviewOK struct {
}

// NewPutReviewOK creates PutReviewOK with default headers values
func NewPutReviewOK() *PutReviewOK {

	return &PutReviewOK{}
}

// WriteResponse to the client
func (o *PutReviewOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// PutReviewBadRequestCode is the HTTP code returned for type PutReviewBadRequest
const PutReviewBadRequestCode int = 400

/*PutReviewBadRequest Incorrect Request, or invalida data

swagger:response putReviewBadRequest
*/
type PutReviewBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutReviewBadRequest creates PutReviewBadRequest with default headers values
func NewPutReviewBadRequest() *PutReviewBadRequest {

	return &PutReviewBadRequest{}
}

// WithPayload adds the payload to the put review bad request response
func (o *PutReviewBadRequest) WithPayload(payload *models.Error) *PutReviewBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put review bad request response
func (o *PutReviewBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutReviewBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutReviewForbiddenCode is the HTTP code returned for type PutReviewForbidden
const PutReviewForbiddenCode int = 403

/*PutReviewForbidden Not authorized to this content

swagger:response putReviewForbidden
*/
type PutReviewForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutReviewForbidden creates PutReviewForbidden with default headers values
func NewPutReviewForbidden() *PutReviewForbidden {

	return &PutReviewForbidden{}
}

// WithPayload adds the payload to the put review forbidden response
func (o *PutReviewForbidden) WithPayload(payload *models.Error) *PutReviewForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put review forbidden response
func (o *PutReviewForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutReviewForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutReviewGoneCode is the HTTP code returned for type PutReviewGone
const PutReviewGoneCode int = 410

/*PutReviewGone That user (password and name) does not exist

swagger:response putReviewGone
*/
type PutReviewGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutReviewGone creates PutReviewGone with default headers values
func NewPutReviewGone() *PutReviewGone {

	return &PutReviewGone{}
}

// WithPayload adds the payload to the put review gone response
func (o *PutReviewGone) WithPayload(payload *models.Error) *PutReviewGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put review gone response
func (o *PutReviewGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutReviewGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutReviewInternalServerErrorCode is the HTTP code returned for type PutReviewInternalServerError
const PutReviewInternalServerErrorCode int = 500

/*PutReviewInternalServerError Internal error

swagger:response putReviewInternalServerError
*/
type PutReviewInternalServerError struct {
}

// NewPutReviewInternalServerError creates PutReviewInternalServerError with default headers values
func NewPutReviewInternalServerError() *PutReviewInternalServerError {

	return &PutReviewInternalServerError{}
}

// WriteResponse to the client
func (o *PutReviewInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
