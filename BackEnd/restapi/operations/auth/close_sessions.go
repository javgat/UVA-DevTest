// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"uva-devtest/models"
)

// CloseSessionsHandlerFunc turns a function with the right signature into a close sessions handler
type CloseSessionsHandlerFunc func(CloseSessionsParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn CloseSessionsHandlerFunc) Handle(params CloseSessionsParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// CloseSessionsHandler interface for that can handle valid close sessions params
type CloseSessionsHandler interface {
	Handle(CloseSessionsParams, *models.User) middleware.Responder
}

// NewCloseSessions creates a new http.Handler for the close sessions operation
func NewCloseSessions(ctx *middleware.Context, handler CloseSessionsHandler) *CloseSessions {
	return &CloseSessions{Context: ctx, Handler: handler}
}

/* CloseSessions swagger:route DELETE /accesstokens/{username} auth closeSessions

Deletes all sessions of the user. Makes every current JWT related to him useless.

Deletes all sessions of the user. Makes every current JWT related to him useless.

*/
type CloseSessions struct {
	Context *middleware.Context
	Handler CloseSessionsHandler
}

func (o *CloseSessions) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCloseSessionsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
