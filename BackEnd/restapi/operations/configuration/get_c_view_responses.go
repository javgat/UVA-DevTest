// Code generated by go-swagger; DO NOT EDIT.

package configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// GetCViewOKCode is the HTTP code returned for type GetCViewOK
const GetCViewOKCode int = 200

/*GetCViewOK CustomizedView Found

swagger:response getCViewOK
*/
type GetCViewOK struct {

	/*
	  In: Body
	*/
	Payload *models.CustomizedView `json:"body,omitempty"`
}

// NewGetCViewOK creates GetCViewOK with default headers values
func NewGetCViewOK() *GetCViewOK {

	return &GetCViewOK{}
}

// WithPayload adds the payload to the get c view o k response
func (o *GetCViewOK) WithPayload(payload *models.CustomizedView) *GetCViewOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get c view o k response
func (o *GetCViewOK) SetPayload(payload *models.CustomizedView) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCViewOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCViewForbiddenCode is the HTTP code returned for type GetCViewForbidden
const GetCViewForbiddenCode int = 403

/*GetCViewForbidden Not authorized to this content

swagger:response getCViewForbidden
*/
type GetCViewForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetCViewForbidden creates GetCViewForbidden with default headers values
func NewGetCViewForbidden() *GetCViewForbidden {

	return &GetCViewForbidden{}
}

// WithPayload adds the payload to the get c view forbidden response
func (o *GetCViewForbidden) WithPayload(payload *models.Error) *GetCViewForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get c view forbidden response
func (o *GetCViewForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCViewForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCViewGoneCode is the HTTP code returned for type GetCViewGone
const GetCViewGoneCode int = 410

/*GetCViewGone That resource does not exist

swagger:response getCViewGone
*/
type GetCViewGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetCViewGone creates GetCViewGone with default headers values
func NewGetCViewGone() *GetCViewGone {

	return &GetCViewGone{}
}

// WithPayload adds the payload to the get c view gone response
func (o *GetCViewGone) WithPayload(payload *models.Error) *GetCViewGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get c view gone response
func (o *GetCViewGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCViewGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCViewInternalServerErrorCode is the HTTP code returned for type GetCViewInternalServerError
const GetCViewInternalServerErrorCode int = 500

/*GetCViewInternalServerError Internal error

swagger:response getCViewInternalServerError
*/
type GetCViewInternalServerError struct {
}

// NewGetCViewInternalServerError creates GetCViewInternalServerError with default headers values
func NewGetCViewInternalServerError() *GetCViewInternalServerError {

	return &GetCViewInternalServerError{}
}

// WriteResponse to the client
func (o *GetCViewInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
