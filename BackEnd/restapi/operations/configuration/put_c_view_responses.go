// Code generated by go-swagger; DO NOT EDIT.

package configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// PutCViewOKCode is the HTTP code returned for type PutCViewOK
const PutCViewOKCode int = 200

/*PutCViewOK CustomizedView Found

swagger:response putCViewOK
*/
type PutCViewOK struct {

	/*
	  In: Body
	*/
	Payload *models.CustomizedView `json:"body,omitempty"`
}

// NewPutCViewOK creates PutCViewOK with default headers values
func NewPutCViewOK() *PutCViewOK {

	return &PutCViewOK{}
}

// WithPayload adds the payload to the put c view o k response
func (o *PutCViewOK) WithPayload(payload *models.CustomizedView) *PutCViewOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put c view o k response
func (o *PutCViewOK) SetPayload(payload *models.CustomizedView) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutCViewOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutCViewForbiddenCode is the HTTP code returned for type PutCViewForbidden
const PutCViewForbiddenCode int = 403

/*PutCViewForbidden Not authorized to this content

swagger:response putCViewForbidden
*/
type PutCViewForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutCViewForbidden creates PutCViewForbidden with default headers values
func NewPutCViewForbidden() *PutCViewForbidden {

	return &PutCViewForbidden{}
}

// WithPayload adds the payload to the put c view forbidden response
func (o *PutCViewForbidden) WithPayload(payload *models.Error) *PutCViewForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put c view forbidden response
func (o *PutCViewForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutCViewForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutCViewGoneCode is the HTTP code returned for type PutCViewGone
const PutCViewGoneCode int = 410

/*PutCViewGone That resource does not exist

swagger:response putCViewGone
*/
type PutCViewGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutCViewGone creates PutCViewGone with default headers values
func NewPutCViewGone() *PutCViewGone {

	return &PutCViewGone{}
}

// WithPayload adds the payload to the put c view gone response
func (o *PutCViewGone) WithPayload(payload *models.Error) *PutCViewGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put c view gone response
func (o *PutCViewGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutCViewGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutCViewInternalServerErrorCode is the HTTP code returned for type PutCViewInternalServerError
const PutCViewInternalServerErrorCode int = 500

/*PutCViewInternalServerError Internal error

swagger:response putCViewInternalServerError
*/
type PutCViewInternalServerError struct {
}

// NewPutCViewInternalServerError creates PutCViewInternalServerError with default headers values
func NewPutCViewInternalServerError() *PutCViewInternalServerError {

	return &PutCViewInternalServerError{}
}

// WriteResponse to the client
func (o *PutCViewInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
