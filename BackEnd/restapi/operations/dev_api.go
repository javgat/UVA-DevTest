// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"uva-devtest/models"
	"uva-devtest/restapi/operations/auth"
	"uva-devtest/restapi/operations/team"
	"uva-devtest/restapi/operations/user"
)

// NewDevAPI creates a new Dev instance
func NewDevAPI(spec *loads.Document) *DevAPI {
	return &DevAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		UserAddTeamOfUserHandler: user.AddTeamOfUserHandlerFunc(func(params user.AddTeamOfUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.AddTeamOfUser has not yet been implemented")
		}),
		UserAddUserFromTeamHandler: user.AddUserFromTeamHandlerFunc(func(params user.AddUserFromTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.AddUserFromTeam has not yet been implemented")
		}),
		UserDeleteTeamOfUserHandler: user.DeleteTeamOfUserHandlerFunc(func(params user.DeleteTeamOfUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.DeleteTeamOfUser has not yet been implemented")
		}),
		UserDeleteUserFromTeamHandler: user.DeleteUserFromTeamHandlerFunc(func(params user.DeleteUserFromTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.DeleteUserFromTeam has not yet been implemented")
		}),
		TeamGetTeamsHandler: team.GetTeamsHandlerFunc(func(params team.GetTeamsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.GetTeams has not yet been implemented")
		}),
		UserGetTeamsOfUserHandler: user.GetTeamsOfUserHandlerFunc(func(params user.GetTeamsOfUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetTeamsOfUser has not yet been implemented")
		}),
		TeamGetUserTeamRoleHandler: team.GetUserTeamRoleHandlerFunc(func(params team.GetUserTeamRoleParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.GetUserTeamRole has not yet been implemented")
		}),
		UserGetUsersHandler: user.GetUsersHandlerFunc(func(params user.GetUsersParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetUsers has not yet been implemented")
		}),
		UserGetUsersFromTeamHandler: user.GetUsersFromTeamHandlerFunc(func(params user.GetUsersFromTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetUsersFromTeam has not yet been implemented")
		}),
		AuthLoginHandler: auth.LoginHandlerFunc(func(params auth.LoginParams) middleware.Responder {
			return middleware.NotImplemented("operation auth.Login has not yet been implemented")
		}),
		TeamPostTeamHandler: team.PostTeamHandlerFunc(func(params team.PostTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.PostTeam has not yet been implemented")
		}),
		TeamPutUserTeamRoleHandler: team.PutUserTeamRoleHandlerFunc(func(params team.PutUserTeamRoleParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.PutUserTeamRole has not yet been implemented")
		}),
		UserRegisterUserHandler: user.RegisterUserHandlerFunc(func(params user.RegisterUserParams) middleware.Responder {
			return middleware.NotImplemented("operation user.RegisterUser has not yet been implemented")
		}),
		TeamDeleteTeamHandler: team.DeleteTeamHandlerFunc(func(params team.DeleteTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.DeleteTeam has not yet been implemented")
		}),
		UserDeleteUserHandler: user.DeleteUserHandlerFunc(func(params user.DeleteUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.DeleteUser has not yet been implemented")
		}),
		TeamGetTeamHandler: team.GetTeamHandlerFunc(func(params team.GetTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.GetTeam has not yet been implemented")
		}),
		UserGetUserHandler: user.GetUserHandlerFunc(func(params user.GetUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetUser has not yet been implemented")
		}),
		UserPutPasswordHandler: user.PutPasswordHandlerFunc(func(params user.PutPasswordParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.PutPassword has not yet been implemented")
		}),
		TeamPutTeamHandler: team.PutTeamHandlerFunc(func(params team.PutTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.PutTeam has not yet been implemented")
		}),
		UserPutUserHandler: user.PutUserHandlerFunc(func(params user.PutUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.PutUser has not yet been implemented")
		}),

		// Applies when the "Bearer" header is set
		BearerHeaderAuth: func(token string) (*models.User, error) {
			return nil, errors.NotImplemented("api key auth (BearerHeader) Bearer from header param [Bearer] has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*DevAPI DevTest */
type DevAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// BearerHeaderAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Bearer provided in the header
	BearerHeaderAuth func(string) (*models.User, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// UserAddTeamOfUserHandler sets the operation handler for the add team of user operation
	UserAddTeamOfUserHandler user.AddTeamOfUserHandler
	// UserAddUserFromTeamHandler sets the operation handler for the add user from team operation
	UserAddUserFromTeamHandler user.AddUserFromTeamHandler
	// UserDeleteTeamOfUserHandler sets the operation handler for the delete team of user operation
	UserDeleteTeamOfUserHandler user.DeleteTeamOfUserHandler
	// UserDeleteUserFromTeamHandler sets the operation handler for the delete user from team operation
	UserDeleteUserFromTeamHandler user.DeleteUserFromTeamHandler
	// TeamGetTeamsHandler sets the operation handler for the get teams operation
	TeamGetTeamsHandler team.GetTeamsHandler
	// UserGetTeamsOfUserHandler sets the operation handler for the get teams of user operation
	UserGetTeamsOfUserHandler user.GetTeamsOfUserHandler
	// TeamGetUserTeamRoleHandler sets the operation handler for the get user team role operation
	TeamGetUserTeamRoleHandler team.GetUserTeamRoleHandler
	// UserGetUsersHandler sets the operation handler for the get users operation
	UserGetUsersHandler user.GetUsersHandler
	// UserGetUsersFromTeamHandler sets the operation handler for the get users from team operation
	UserGetUsersFromTeamHandler user.GetUsersFromTeamHandler
	// AuthLoginHandler sets the operation handler for the login operation
	AuthLoginHandler auth.LoginHandler
	// TeamPostTeamHandler sets the operation handler for the post team operation
	TeamPostTeamHandler team.PostTeamHandler
	// TeamPutUserTeamRoleHandler sets the operation handler for the put user team role operation
	TeamPutUserTeamRoleHandler team.PutUserTeamRoleHandler
	// UserRegisterUserHandler sets the operation handler for the register user operation
	UserRegisterUserHandler user.RegisterUserHandler
	// TeamDeleteTeamHandler sets the operation handler for the delete team operation
	TeamDeleteTeamHandler team.DeleteTeamHandler
	// UserDeleteUserHandler sets the operation handler for the delete user operation
	UserDeleteUserHandler user.DeleteUserHandler
	// TeamGetTeamHandler sets the operation handler for the get team operation
	TeamGetTeamHandler team.GetTeamHandler
	// UserGetUserHandler sets the operation handler for the get user operation
	UserGetUserHandler user.GetUserHandler
	// UserPutPasswordHandler sets the operation handler for the put password operation
	UserPutPasswordHandler user.PutPasswordHandler
	// TeamPutTeamHandler sets the operation handler for the put team operation
	TeamPutTeamHandler team.PutTeamHandler
	// UserPutUserHandler sets the operation handler for the put user operation
	UserPutUserHandler user.PutUserHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *DevAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *DevAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *DevAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *DevAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *DevAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *DevAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *DevAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *DevAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *DevAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the DevAPI
func (o *DevAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BearerHeaderAuth == nil {
		unregistered = append(unregistered, "BearerAuth")
	}

	if o.UserAddTeamOfUserHandler == nil {
		unregistered = append(unregistered, "user.AddTeamOfUserHandler")
	}
	if o.UserAddUserFromTeamHandler == nil {
		unregistered = append(unregistered, "user.AddUserFromTeamHandler")
	}
	if o.UserDeleteTeamOfUserHandler == nil {
		unregistered = append(unregistered, "user.DeleteTeamOfUserHandler")
	}
	if o.UserDeleteUserFromTeamHandler == nil {
		unregistered = append(unregistered, "user.DeleteUserFromTeamHandler")
	}
	if o.TeamGetTeamsHandler == nil {
		unregistered = append(unregistered, "team.GetTeamsHandler")
	}
	if o.UserGetTeamsOfUserHandler == nil {
		unregistered = append(unregistered, "user.GetTeamsOfUserHandler")
	}
	if o.TeamGetUserTeamRoleHandler == nil {
		unregistered = append(unregistered, "team.GetUserTeamRoleHandler")
	}
	if o.UserGetUsersHandler == nil {
		unregistered = append(unregistered, "user.GetUsersHandler")
	}
	if o.UserGetUsersFromTeamHandler == nil {
		unregistered = append(unregistered, "user.GetUsersFromTeamHandler")
	}
	if o.AuthLoginHandler == nil {
		unregistered = append(unregistered, "auth.LoginHandler")
	}
	if o.TeamPostTeamHandler == nil {
		unregistered = append(unregistered, "team.PostTeamHandler")
	}
	if o.TeamPutUserTeamRoleHandler == nil {
		unregistered = append(unregistered, "team.PutUserTeamRoleHandler")
	}
	if o.UserRegisterUserHandler == nil {
		unregistered = append(unregistered, "user.RegisterUserHandler")
	}
	if o.TeamDeleteTeamHandler == nil {
		unregistered = append(unregistered, "team.DeleteTeamHandler")
	}
	if o.UserDeleteUserHandler == nil {
		unregistered = append(unregistered, "user.DeleteUserHandler")
	}
	if o.TeamGetTeamHandler == nil {
		unregistered = append(unregistered, "team.GetTeamHandler")
	}
	if o.UserGetUserHandler == nil {
		unregistered = append(unregistered, "user.GetUserHandler")
	}
	if o.UserPutPasswordHandler == nil {
		unregistered = append(unregistered, "user.PutPasswordHandler")
	}
	if o.TeamPutTeamHandler == nil {
		unregistered = append(unregistered, "team.PutTeamHandler")
	}
	if o.UserPutUserHandler == nil {
		unregistered = append(unregistered, "user.PutUserHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *DevAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *DevAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "BearerHeader":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, func(token string) (interface{}, error) {
				return o.BearerHeaderAuth(token)
			})

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *DevAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *DevAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *DevAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *DevAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the dev API
func (o *DevAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *DevAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{username}/teams/{teamname}"] = user.NewAddTeamOfUser(o.context, o.UserAddTeamOfUserHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/teams/{teamname}/users/{username}"] = user.NewAddUserFromTeam(o.context, o.UserAddUserFromTeamHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{username}/teams/{teamname}"] = user.NewDeleteTeamOfUser(o.context, o.UserDeleteTeamOfUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/teams/{teamname}/users/{username}"] = user.NewDeleteUserFromTeam(o.context, o.UserDeleteUserFromTeamHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams"] = team.NewGetTeams(o.context, o.TeamGetTeamsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/teams"] = user.NewGetTeamsOfUser(o.context, o.UserGetTeamsOfUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/teams/{teamname}/role"] = team.NewGetUserTeamRole(o.context, o.TeamGetUserTeamRoleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users"] = user.NewGetUsers(o.context, o.UserGetUsersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamname}/users"] = user.NewGetUsersFromTeam(o.context, o.UserGetUsersFromTeamHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/accesstokens"] = auth.NewLogin(o.context, o.AuthLoginHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/teams"] = team.NewPostTeam(o.context, o.TeamPostTeamHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{username}/teams/{teamname}/role"] = team.NewPutUserTeamRole(o.context, o.TeamPutUserTeamRoleHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users"] = user.NewRegisterUser(o.context, o.UserRegisterUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/teams/{teamname}"] = team.NewDeleteTeam(o.context, o.TeamDeleteTeamHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{username}"] = user.NewDeleteUser(o.context, o.UserDeleteUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamname}"] = team.NewGetTeam(o.context, o.TeamGetTeamHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}"] = user.NewGetUser(o.context, o.UserGetUserHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/passwords/{username}"] = user.NewPutPassword(o.context, o.UserPutPasswordHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/teams/{teamname}"] = team.NewPutTeam(o.context, o.TeamPutTeamHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{username}"] = user.NewPutUser(o.context, o.UserPutUserHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *DevAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *DevAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *DevAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *DevAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *DevAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
