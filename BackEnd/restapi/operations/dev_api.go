// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"uva-devtest/models"
	"uva-devtest/restapi/operations/answer"
	"uva-devtest/restapi/operations/auth"
	"uva-devtest/restapi/operations/configuration"
	"uva-devtest/restapi/operations/published_test"
	"uva-devtest/restapi/operations/question"
	"uva-devtest/restapi/operations/tag"
	"uva-devtest/restapi/operations/team"
	"uva-devtest/restapi/operations/test"
	"uva-devtest/restapi/operations/tiporol"
	"uva-devtest/restapi/operations/user"
)

// NewDevAPI creates a new Dev instance
func NewDevAPI(spec *loads.Document) *DevAPI {
	return &DevAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		TeamAddAdminHandler: team.AddAdminHandlerFunc(func(params team.AddAdminParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.AddAdmin has not yet been implemented")
		}),
		TestAddAdminTeamToTestHandler: test.AddAdminTeamToTestHandlerFunc(func(params test.AddAdminTeamToTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation test.AddAdminTeamToTest has not yet been implemented")
		}),
		TeamAddMemberHandler: team.AddMemberHandlerFunc(func(params team.AddMemberParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.AddMember has not yet been implemented")
		}),
		UserAddQuestionFavoriteHandler: user.AddQuestionFavoriteHandlerFunc(func(params user.AddQuestionFavoriteParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.AddQuestionFavorite has not yet been implemented")
		}),
		TestAddQuestionToTestHandler: test.AddQuestionToTestHandlerFunc(func(params test.AddQuestionToTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation test.AddQuestionToTest has not yet been implemented")
		}),
		QuestionAddTagToQuestionHandler: question.AddTagToQuestionHandlerFunc(func(params question.AddTagToQuestionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation question.AddTagToQuestion has not yet been implemented")
		}),
		TestAddTagToTestHandler: test.AddTagToTestHandlerFunc(func(params test.AddTagToTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation test.AddTagToTest has not yet been implemented")
		}),
		QuestionAddTeamToQuestionHandler: question.AddTeamToQuestionHandlerFunc(func(params question.AddTeamToQuestionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation question.AddTeamToQuestion has not yet been implemented")
		}),
		UserAddTestFavoriteHandler: user.AddTestFavoriteHandlerFunc(func(params user.AddTestFavoriteParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.AddTestFavorite has not yet been implemented")
		}),
		UserCopyQuestionHandler: user.CopyQuestionHandlerFunc(func(params user.CopyQuestionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.CopyQuestion has not yet been implemented")
		}),
		UserCopyTestHandler: user.CopyTestHandlerFunc(func(params user.CopyTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.CopyTest has not yet been implemented")
		}),
		QuestionDeleteOptionHandler: question.DeleteOptionHandlerFunc(func(params question.DeleteOptionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation question.DeleteOption has not yet been implemented")
		}),
		QuestionDeletePruebaHandler: question.DeletePruebaHandlerFunc(func(params question.DeletePruebaParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation question.DeletePrueba has not yet been implemented")
		}),
		QuestionDeleteQuestionHandler: question.DeleteQuestionHandlerFunc(func(params question.DeleteQuestionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation question.DeleteQuestion has not yet been implemented")
		}),
		AnswerDeleteQuestionAnswerFromAnswerHandler: answer.DeleteQuestionAnswerFromAnswerHandlerFunc(func(params answer.DeleteQuestionAnswerFromAnswerParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation answer.DeleteQuestionAnswerFromAnswer has not yet been implemented")
		}),
		AnswerDeleteReviewHandler: answer.DeleteReviewHandlerFunc(func(params answer.DeleteReviewParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation answer.DeleteReview has not yet been implemented")
		}),
		TestDeleteTestHandler: test.DeleteTestHandlerFunc(func(params test.DeleteTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation test.DeleteTest has not yet been implemented")
		}),
		TiporolDeleteTipoRolHandler: tiporol.DeleteTipoRolHandlerFunc(func(params tiporol.DeleteTipoRolParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation tiporol.DeleteTipoRol has not yet been implemented")
		}),
		TeamDeleteUserFromTeamHandler: team.DeleteUserFromTeamHandlerFunc(func(params team.DeleteUserFromTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.DeleteUserFromTeam has not yet been implemented")
		}),
		AnswerFinishAnswerHandler: answer.FinishAnswerHandlerFunc(func(params answer.FinishAnswerParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation answer.FinishAnswer has not yet been implemented")
		}),
		TeamGetAdminHandler: team.GetAdminHandlerFunc(func(params team.GetAdminParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.GetAdmin has not yet been implemented")
		}),
		TestGetAdminTeamsFromTestHandler: test.GetAdminTeamsFromTestHandlerFunc(func(params test.GetAdminTeamsFromTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation test.GetAdminTeamsFromTest has not yet been implemented")
		}),
		TeamGetAdminsHandler: team.GetAdminsHandlerFunc(func(params team.GetAdminsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.GetAdmins has not yet been implemented")
		}),
		QuestionGetAllEditQuestionsHandler: question.GetAllEditQuestionsHandlerFunc(func(params question.GetAllEditQuestionsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation question.GetAllEditQuestions has not yet been implemented")
		}),
		TestGetAllEditTestsHandler: test.GetAllEditTestsHandlerFunc(func(params test.GetAllEditTestsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation test.GetAllEditTests has not yet been implemented")
		}),
		QuestionGetAllQuestionsHandler: question.GetAllQuestionsHandlerFunc(func(params question.GetAllQuestionsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation question.GetAllQuestions has not yet been implemented")
		}),
		TestGetAllTestsHandler: test.GetAllTestsHandlerFunc(func(params test.GetAllTestsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation test.GetAllTests has not yet been implemented")
		}),
		AnswerGetAnswerHandler: answer.GetAnswerHandlerFunc(func(params answer.GetAnswerParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation answer.GetAnswer has not yet been implemented")
		}),
		UserGetAnswerFromUserHandler: user.GetAnswerFromUserHandlerFunc(func(params user.GetAnswerFromUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetAnswerFromUser has not yet been implemented")
		}),
		UserGetAnsweredTestFromUserHandler: user.GetAnsweredTestFromUserHandlerFunc(func(params user.GetAnsweredTestFromUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetAnsweredTestFromUser has not yet been implemented")
		}),
		UserGetAnsweredTestsFromUserHandler: user.GetAnsweredTestsFromUserHandlerFunc(func(params user.GetAnsweredTestsFromUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetAnsweredTestsFromUser has not yet been implemented")
		}),
		AnswerGetAnswersHandler: answer.GetAnswersHandlerFunc(func(params answer.GetAnswersParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation answer.GetAnswers has not yet been implemented")
		}),
		PublishedTestGetAnswersFromPublishedTestsHandler: published_test.GetAnswersFromPublishedTestsHandlerFunc(func(params published_test.GetAnswersFromPublishedTestsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation published_test.GetAnswersFromPublishedTests has not yet been implemented")
		}),
		UserGetAnswersFromUserHandler: user.GetAnswersFromUserHandlerFunc(func(params user.GetAnswersFromUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetAnswersFromUser has not yet been implemented")
		}),
		UserGetAnswersFromUserAnsweredTestHandler: user.GetAnswersFromUserAnsweredTestHandlerFunc(func(params user.GetAnswersFromUserAnsweredTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetAnswersFromUserAnsweredTest has not yet been implemented")
		}),
		UserGetAvailableEditQuestionsOfUserHandler: user.GetAvailableEditQuestionsOfUserHandlerFunc(func(params user.GetAvailableEditQuestionsOfUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetAvailableEditQuestionsOfUser has not yet been implemented")
		}),
		UserGetAvailableQuestionsOfUserHandler: user.GetAvailableQuestionsOfUserHandlerFunc(func(params user.GetAvailableQuestionsOfUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetAvailableQuestionsOfUser has not yet been implemented")
		}),
		ConfigurationGetCViewHandler: configuration.GetCViewHandlerFunc(func(params configuration.GetCViewParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation configuration.GetCView has not yet been implemented")
		}),
		ConfigurationGetCViewsHandler: configuration.GetCViewsHandlerFunc(func(params configuration.GetCViewsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation configuration.GetCViews has not yet been implemented")
		}),
		PublishedTestGetCorrectedAnswersFromPublishedTestsHandler: published_test.GetCorrectedAnswersFromPublishedTestsHandlerFunc(func(params published_test.GetCorrectedAnswersFromPublishedTestsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation published_test.GetCorrectedAnswersFromPublishedTests has not yet been implemented")
		}),
		UserGetCorrectedAnswersFromUserHandler: user.GetCorrectedAnswersFromUserHandlerFunc(func(params user.GetCorrectedAnswersFromUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetCorrectedAnswersFromUser has not yet been implemented")
		}),
		UserGetCorrectedAnswersFromUserAnsweredTestHandler: user.GetCorrectedAnswersFromUserAnsweredTestHandlerFunc(func(params user.GetCorrectedAnswersFromUserAnsweredTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetCorrectedAnswersFromUserAnsweredTest has not yet been implemented")
		}),
		QuestionGetEditQuestionsHandler: question.GetEditQuestionsHandlerFunc(func(params question.GetEditQuestionsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation question.GetEditQuestions has not yet been implemented")
		}),
		TagGetEditQuestionsFromTagHandler: tag.GetEditQuestionsFromTagHandlerFunc(func(params tag.GetEditQuestionsFromTagParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation tag.GetEditQuestionsFromTag has not yet been implemented")
		}),
		UserGetEditQuestionsOfUserHandler: user.GetEditQuestionsOfUserHandlerFunc(func(params user.GetEditQuestionsOfUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetEditQuestionsOfUser has not yet been implemented")
		}),
		TagGetEditTestsFromTagHandler: tag.GetEditTestsFromTagHandlerFunc(func(params tag.GetEditTestsFromTagParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation tag.GetEditTestsFromTag has not yet been implemented")
		}),
		UserGetEditTestsFromUserHandler: user.GetEditTestsFromUserHandlerFunc(func(params user.GetEditTestsFromUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetEditTestsFromUser has not yet been implemented")
		}),
		ConfigurationGetEmailConfigurationHandler: configuration.GetEmailConfigurationHandlerFunc(func(params configuration.GetEmailConfigurationParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation configuration.GetEmailConfiguration has not yet been implemented")
		}),
		UserGetFavoriteEditQuestionsHandler: user.GetFavoriteEditQuestionsHandlerFunc(func(params user.GetFavoriteEditQuestionsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetFavoriteEditQuestions has not yet been implemented")
		}),
		UserGetFavoriteEditTestsHandler: user.GetFavoriteEditTestsHandlerFunc(func(params user.GetFavoriteEditTestsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetFavoriteEditTests has not yet been implemented")
		}),
		UserGetFavoriteQuestionHandler: user.GetFavoriteQuestionHandlerFunc(func(params user.GetFavoriteQuestionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetFavoriteQuestion has not yet been implemented")
		}),
		UserGetFavoriteQuestionsHandler: user.GetFavoriteQuestionsHandlerFunc(func(params user.GetFavoriteQuestionsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetFavoriteQuestions has not yet been implemented")
		}),
		UserGetFavoriteTestHandler: user.GetFavoriteTestHandlerFunc(func(params user.GetFavoriteTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetFavoriteTest has not yet been implemented")
		}),
		UserGetFavoriteTestsHandler: user.GetFavoriteTestsHandlerFunc(func(params user.GetFavoriteTestsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetFavoriteTests has not yet been implemented")
		}),
		TeamGetInvitedTestFromTeamHandler: team.GetInvitedTestFromTeamHandlerFunc(func(params team.GetInvitedTestFromTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.GetInvitedTestFromTeam has not yet been implemented")
		}),
		UserGetInvitedTestFromUserHandler: user.GetInvitedTestFromUserHandlerFunc(func(params user.GetInvitedTestFromUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetInvitedTestFromUser has not yet been implemented")
		}),
		UserGetInvitedTestsByTeamsAndUserHandler: user.GetInvitedTestsByTeamsAndUserHandlerFunc(func(params user.GetInvitedTestsByTeamsAndUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetInvitedTestsByTeamsAndUser has not yet been implemented")
		}),
		TeamGetInvitedTestsFromTeamHandler: team.GetInvitedTestsFromTeamHandlerFunc(func(params team.GetInvitedTestsFromTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.GetInvitedTestsFromTeam has not yet been implemented")
		}),
		UserGetInvitedTestsFromUserHandler: user.GetInvitedTestsFromUserHandlerFunc(func(params user.GetInvitedTestsFromUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetInvitedTestsFromUser has not yet been implemented")
		}),
		TeamGetMemberHandler: team.GetMemberHandlerFunc(func(params team.GetMemberParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.GetMember has not yet been implemented")
		}),
		TeamGetMembersHandler: team.GetMembersHandlerFunc(func(params team.GetMembersParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.GetMembers has not yet been implemented")
		}),
		UserGetOpenAnswersFromUserTestHandler: user.GetOpenAnswersFromUserTestHandlerFunc(func(params user.GetOpenAnswersFromUserTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetOpenAnswersFromUserTest has not yet been implemented")
		}),
		QuestionGetOptionFromQuestionHandler: question.GetOptionFromQuestionHandlerFunc(func(params question.GetOptionFromQuestionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation question.GetOptionFromQuestion has not yet been implemented")
		}),
		PublishedTestGetOptionsFromPublishedQuestionHandler: published_test.GetOptionsFromPublishedQuestionHandlerFunc(func(params published_test.GetOptionsFromPublishedQuestionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation published_test.GetOptionsFromPublishedQuestion has not yet been implemented")
		}),
		QuestionGetOptionsFromQuestionHandler: question.GetOptionsFromQuestionHandlerFunc(func(params question.GetOptionsFromQuestionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation question.GetOptionsFromQuestion has not yet been implemented")
		}),
		UserGetPendingTestsFromUserHandler: user.GetPendingTestsFromUserHandlerFunc(func(params user.GetPendingTestsFromUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetPendingTestsFromUser has not yet been implemented")
		}),
		QuestionGetPruebaFromQuestionHandler: question.GetPruebaFromQuestionHandlerFunc(func(params question.GetPruebaFromQuestionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation question.GetPruebaFromQuestion has not yet been implemented")
		}),
		QuestionGetPruebasFromQuestionHandler: question.GetPruebasFromQuestionHandlerFunc(func(params question.GetPruebasFromQuestionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation question.GetPruebasFromQuestion has not yet been implemented")
		}),
		UserGetPublicEditQuestionsOfUserHandler: user.GetPublicEditQuestionsOfUserHandlerFunc(func(params user.GetPublicEditQuestionsOfUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetPublicEditQuestionsOfUser has not yet been implemented")
		}),
		TestGetPublicEditTestsHandler: test.GetPublicEditTestsHandlerFunc(func(params test.GetPublicEditTestsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation test.GetPublicEditTests has not yet been implemented")
		}),
		UserGetPublicEditTestsFromUserHandler: user.GetPublicEditTestsFromUserHandlerFunc(func(params user.GetPublicEditTestsFromUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetPublicEditTestsFromUser has not yet been implemented")
		}),
		PublishedTestGetPublicPublishedTestHandler: published_test.GetPublicPublishedTestHandlerFunc(func(params published_test.GetPublicPublishedTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation published_test.GetPublicPublishedTest has not yet been implemented")
		}),
		PublishedTestGetPublicPublishedTestsHandler: published_test.GetPublicPublishedTestsHandlerFunc(func(params published_test.GetPublicPublishedTestsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation published_test.GetPublicPublishedTests has not yet been implemented")
		}),
		UserGetPublicPublishedTestsFromUserHandler: user.GetPublicPublishedTestsFromUserHandlerFunc(func(params user.GetPublicPublishedTestsFromUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetPublicPublishedTestsFromUser has not yet been implemented")
		}),
		TestGetPublicTestsHandler: test.GetPublicTestsHandlerFunc(func(params test.GetPublicTestsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation test.GetPublicTests has not yet been implemented")
		}),
		PublishedTestGetPublishedTestHandler: published_test.GetPublishedTestHandlerFunc(func(params published_test.GetPublishedTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation published_test.GetPublishedTest has not yet been implemented")
		}),
		TeamGetPublishedTestFromTeamHandler: team.GetPublishedTestFromTeamHandlerFunc(func(params team.GetPublishedTestFromTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.GetPublishedTestFromTeam has not yet been implemented")
		}),
		PublishedTestGetPublishedTestsHandler: published_test.GetPublishedTestsHandlerFunc(func(params published_test.GetPublishedTestsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation published_test.GetPublishedTests has not yet been implemented")
		}),
		TeamGetPublishedTestsFromTeamHandler: team.GetPublishedTestsFromTeamHandlerFunc(func(params team.GetPublishedTestsFromTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.GetPublishedTestsFromTeam has not yet been implemented")
		}),
		TestGetPublishedTestsFromTestHandler: test.GetPublishedTestsFromTestHandlerFunc(func(params test.GetPublishedTestsFromTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation test.GetPublishedTestsFromTest has not yet been implemented")
		}),
		UserGetPublishedTestsFromUserHandler: user.GetPublishedTestsFromUserHandlerFunc(func(params user.GetPublishedTestsFromUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetPublishedTestsFromUser has not yet been implemented")
		}),
		QuestionGetQuestionHandler: question.GetQuestionHandlerFunc(func(params question.GetQuestionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation question.GetQuestion has not yet been implemented")
		}),
		AnswerGetQuestionAnswerFromAnswerHandler: answer.GetQuestionAnswerFromAnswerHandlerFunc(func(params answer.GetQuestionAnswerFromAnswerParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation answer.GetQuestionAnswerFromAnswer has not yet been implemented")
		}),
		AnswerGetQuestionAnswersFromAnswerHandler: answer.GetQuestionAnswersFromAnswerHandlerFunc(func(params answer.GetQuestionAnswersFromAnswerParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation answer.GetQuestionAnswersFromAnswer has not yet been implemented")
		}),
		AnswerGetQuestionAnswersFromAnswerAndQuestionHandler: answer.GetQuestionAnswersFromAnswerAndQuestionHandlerFunc(func(params answer.GetQuestionAnswersFromAnswerAndQuestionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation answer.GetQuestionAnswersFromAnswerAndQuestion has not yet been implemented")
		}),
		PublishedTestGetQuestionAnswersFromPublishedTestQuestionHandler: published_test.GetQuestionAnswersFromPublishedTestQuestionHandlerFunc(func(params published_test.GetQuestionAnswersFromPublishedTestQuestionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation published_test.GetQuestionAnswersFromPublishedTestQuestion has not yet been implemented")
		}),
		PublishedTestGetQuestionFromPublishedTestsHandler: published_test.GetQuestionFromPublishedTestsHandlerFunc(func(params published_test.GetQuestionFromPublishedTestsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation published_test.GetQuestionFromPublishedTests has not yet been implemented")
		}),
		TeamGetQuestionFromTeamHandler: team.GetQuestionFromTeamHandlerFunc(func(params team.GetQuestionFromTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.GetQuestionFromTeam has not yet been implemented")
		}),
		TestGetQuestionFromTestHandler: test.GetQuestionFromTestHandlerFunc(func(params test.GetQuestionFromTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation test.GetQuestionFromTest has not yet been implemented")
		}),
		UserGetQuestionFromUserHandler: user.GetQuestionFromUserHandlerFunc(func(params user.GetQuestionFromUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetQuestionFromUser has not yet been implemented")
		}),
		QuestionGetQuestionsHandler: question.GetQuestionsHandlerFunc(func(params question.GetQuestionsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation question.GetQuestions has not yet been implemented")
		}),
		AnswerGetQuestionsFromAnswerHandler: answer.GetQuestionsFromAnswerHandlerFunc(func(params answer.GetQuestionsFromAnswerParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation answer.GetQuestionsFromAnswer has not yet been implemented")
		}),
		PublishedTestGetQuestionsFromPublishedTestsHandler: published_test.GetQuestionsFromPublishedTestsHandlerFunc(func(params published_test.GetQuestionsFromPublishedTestsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation published_test.GetQuestionsFromPublishedTests has not yet been implemented")
		}),
		TagGetQuestionsFromTagHandler: tag.GetQuestionsFromTagHandlerFunc(func(params tag.GetQuestionsFromTagParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation tag.GetQuestionsFromTag has not yet been implemented")
		}),
		TeamGetQuestionsFromTeamHandler: team.GetQuestionsFromTeamHandlerFunc(func(params team.GetQuestionsFromTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.GetQuestionsFromTeam has not yet been implemented")
		}),
		TestGetQuestionsFromTestHandler: test.GetQuestionsFromTestHandlerFunc(func(params test.GetQuestionsFromTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation test.GetQuestionsFromTest has not yet been implemented")
		}),
		UserGetQuestionsOfUserHandler: user.GetQuestionsOfUserHandlerFunc(func(params user.GetQuestionsOfUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetQuestionsOfUser has not yet been implemented")
		}),
		UserGetSharedEditTestsFromUserHandler: user.GetSharedEditTestsFromUserHandlerFunc(func(params user.GetSharedEditTestsFromUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetSharedEditTestsFromUser has not yet been implemented")
		}),
		UserGetSharedPublishedTestsFromUserHandler: user.GetSharedPublishedTestsFromUserHandlerFunc(func(params user.GetSharedPublishedTestsFromUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetSharedPublishedTestsFromUser has not yet been implemented")
		}),
		UserGetSharedQuestionFromUserHandler: user.GetSharedQuestionFromUserHandlerFunc(func(params user.GetSharedQuestionFromUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetSharedQuestionFromUser has not yet been implemented")
		}),
		UserGetSharedQuestionsOfUserHandler: user.GetSharedQuestionsOfUserHandlerFunc(func(params user.GetSharedQuestionsOfUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetSharedQuestionsOfUser has not yet been implemented")
		}),
		UserGetSharedTestFromUserHandler: user.GetSharedTestFromUserHandlerFunc(func(params user.GetSharedTestFromUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetSharedTestFromUser has not yet been implemented")
		}),
		UserGetSharedTestsFromUserHandler: user.GetSharedTestsFromUserHandlerFunc(func(params user.GetSharedTestsFromUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetSharedTestsFromUser has not yet been implemented")
		}),
		UserGetSolvableTestFromUserHandler: user.GetSolvableTestFromUserHandlerFunc(func(params user.GetSolvableTestFromUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetSolvableTestFromUser has not yet been implemented")
		}),
		UserGetSolvableTestsFromUserHandler: user.GetSolvableTestsFromUserHandlerFunc(func(params user.GetSolvableTestsFromUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetSolvableTestsFromUser has not yet been implemented")
		}),
		TagGetTagHandler: tag.GetTagHandlerFunc(func(params tag.GetTagParams) middleware.Responder {
			return middleware.NotImplemented("operation tag.GetTag has not yet been implemented")
		}),
		PublishedTestGetTagFromPublishedTestHandler: published_test.GetTagFromPublishedTestHandlerFunc(func(params published_test.GetTagFromPublishedTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation published_test.GetTagFromPublishedTest has not yet been implemented")
		}),
		QuestionGetTagFromQuestionHandler: question.GetTagFromQuestionHandlerFunc(func(params question.GetTagFromQuestionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation question.GetTagFromQuestion has not yet been implemented")
		}),
		TestGetTagFromTestHandler: test.GetTagFromTestHandlerFunc(func(params test.GetTagFromTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation test.GetTagFromTest has not yet been implemented")
		}),
		TagGetTagsHandler: tag.GetTagsHandlerFunc(func(params tag.GetTagsParams) middleware.Responder {
			return middleware.NotImplemented("operation tag.GetTags has not yet been implemented")
		}),
		PublishedTestGetTagsFromPublishedQuestionHandler: published_test.GetTagsFromPublishedQuestionHandlerFunc(func(params published_test.GetTagsFromPublishedQuestionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation published_test.GetTagsFromPublishedQuestion has not yet been implemented")
		}),
		PublishedTestGetTagsFromPublishedTestHandler: published_test.GetTagsFromPublishedTestHandlerFunc(func(params published_test.GetTagsFromPublishedTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation published_test.GetTagsFromPublishedTest has not yet been implemented")
		}),
		QuestionGetTagsFromQuestionHandler: question.GetTagsFromQuestionHandlerFunc(func(params question.GetTagsFromQuestionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation question.GetTagsFromQuestion has not yet been implemented")
		}),
		TestGetTagsFromTestHandler: test.GetTagsFromTestHandlerFunc(func(params test.GetTagsFromTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation test.GetTagsFromTest has not yet been implemented")
		}),
		TeamGetTeamsHandler: team.GetTeamsHandlerFunc(func(params team.GetTeamsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.GetTeams has not yet been implemented")
		}),
		PublishedTestGetTeamsFromPublishedTestHandler: published_test.GetTeamsFromPublishedTestHandlerFunc(func(params published_test.GetTeamsFromPublishedTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation published_test.GetTeamsFromPublishedTest has not yet been implemented")
		}),
		QuestionGetTeamsFromQuestionHandler: question.GetTeamsFromQuestionHandlerFunc(func(params question.GetTeamsFromQuestionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation question.GetTeamsFromQuestion has not yet been implemented")
		}),
		UserGetTeamsOfUserHandler: user.GetTeamsOfUserHandlerFunc(func(params user.GetTeamsOfUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetTeamsOfUser has not yet been implemented")
		}),
		TestGetTestHandler: test.GetTestHandlerFunc(func(params test.GetTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation test.GetTest has not yet been implemented")
		}),
		TeamGetTestFromTeamHandler: team.GetTestFromTeamHandlerFunc(func(params team.GetTestFromTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.GetTestFromTeam has not yet been implemented")
		}),
		UserGetTestFromUserHandler: user.GetTestFromUserHandlerFunc(func(params user.GetTestFromUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetTestFromUser has not yet been implemented")
		}),
		TagGetTestsFromTagHandler: tag.GetTestsFromTagHandlerFunc(func(params tag.GetTestsFromTagParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation tag.GetTestsFromTag has not yet been implemented")
		}),
		TeamGetTestsFromTeamHandler: team.GetTestsFromTeamHandlerFunc(func(params team.GetTestsFromTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.GetTestsFromTeam has not yet been implemented")
		}),
		UserGetTestsFromUserHandler: user.GetTestsFromUserHandlerFunc(func(params user.GetTestsFromUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetTestsFromUser has not yet been implemented")
		}),
		TiporolGetTipoRolHandler: tiporol.GetTipoRolHandlerFunc(func(params tiporol.GetTipoRolParams) middleware.Responder {
			return middleware.NotImplemented("operation tiporol.GetTipoRol has not yet been implemented")
		}),
		TiporolGetTipoRolesHandler: tiporol.GetTipoRolesHandlerFunc(func(params tiporol.GetTipoRolesParams) middleware.Responder {
			return middleware.NotImplemented("operation tiporol.GetTipoRoles has not yet been implemented")
		}),
		PublishedTestGetUncorrectedAnswersFromPublishedTestsHandler: published_test.GetUncorrectedAnswersFromPublishedTestsHandlerFunc(func(params published_test.GetUncorrectedAnswersFromPublishedTestsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation published_test.GetUncorrectedAnswersFromPublishedTests has not yet been implemented")
		}),
		UserGetUncorrectedAnswersFromUserHandler: user.GetUncorrectedAnswersFromUserHandlerFunc(func(params user.GetUncorrectedAnswersFromUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetUncorrectedAnswersFromUser has not yet been implemented")
		}),
		UserGetUncorrectedAnswersFromUserAnsweredTestHandler: user.GetUncorrectedAnswersFromUserAnsweredTestHandlerFunc(func(params user.GetUncorrectedAnswersFromUserAnsweredTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetUncorrectedAnswersFromUserAnsweredTest has not yet been implemented")
		}),
		TeamGetUserFromTeamHandler: team.GetUserFromTeamHandlerFunc(func(params team.GetUserFromTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.GetUserFromTeam has not yet been implemented")
		}),
		UserGetUsersHandler: user.GetUsersHandlerFunc(func(params user.GetUsersParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetUsers has not yet been implemented")
		}),
		PublishedTestGetUsersFromPublishedTestHandler: published_test.GetUsersFromPublishedTestHandlerFunc(func(params published_test.GetUsersFromPublishedTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation published_test.GetUsersFromPublishedTest has not yet been implemented")
		}),
		TeamGetUsersFromTeamHandler: team.GetUsersFromTeamHandlerFunc(func(params team.GetUsersFromTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.GetUsersFromTeam has not yet been implemented")
		}),
		PublishedTestGetVisiblePruebasFromQuestionTestHandler: published_test.GetVisiblePruebasFromQuestionTestHandlerFunc(func(params published_test.GetVisiblePruebasFromQuestionTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation published_test.GetVisiblePruebasFromQuestionTest has not yet been implemented")
		}),
		PublishedTestInviteTeamToPublishedTestHandler: published_test.InviteTeamToPublishedTestHandlerFunc(func(params published_test.InviteTeamToPublishedTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation published_test.InviteTeamToPublishedTest has not yet been implemented")
		}),
		PublishedTestInviteUserToPublishedTestHandler: published_test.InviteUserToPublishedTestHandlerFunc(func(params published_test.InviteUserToPublishedTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation published_test.InviteUserToPublishedTest has not yet been implemented")
		}),
		AuthLoginHandler: auth.LoginHandlerFunc(func(params auth.LoginParams) middleware.Responder {
			return middleware.NotImplemented("operation auth.Login has not yet been implemented")
		}),
		AuthLogoutHandler: auth.LogoutHandlerFunc(func(params auth.LogoutParams) middleware.Responder {
			return middleware.NotImplemented("operation auth.Logout has not yet been implemented")
		}),
		UserPostEmailUserHandler: user.PostEmailUserHandlerFunc(func(params user.PostEmailUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.PostEmailUser has not yet been implemented")
		}),
		QuestionPostOptionHandler: question.PostOptionHandlerFunc(func(params question.PostOptionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation question.PostOption has not yet been implemented")
		}),
		QuestionPostPruebaHandler: question.PostPruebaHandlerFunc(func(params question.PostPruebaParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation question.PostPrueba has not yet been implemented")
		}),
		TestPostPublishedTestHandler: test.PostPublishedTestHandlerFunc(func(params test.PostPublishedTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation test.PostPublishedTest has not yet been implemented")
		}),
		UserPostQuestionHandler: user.PostQuestionHandlerFunc(func(params user.PostQuestionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.PostQuestion has not yet been implemented")
		}),
		AnswerPostQuestionAnswerHandler: answer.PostQuestionAnswerHandlerFunc(func(params answer.PostQuestionAnswerParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation answer.PostQuestionAnswer has not yet been implemented")
		}),
		TeamPostTeamHandler: team.PostTeamHandlerFunc(func(params team.PostTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.PostTeam has not yet been implemented")
		}),
		UserPostTestHandler: user.PostTestHandlerFunc(func(params user.PostTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.PostTest has not yet been implemented")
		}),
		TiporolPostTipoRolHandler: tiporol.PostTipoRolHandlerFunc(func(params tiporol.PostTipoRolParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation tiporol.PostTipoRol has not yet been implemented")
		}),
		ConfigurationPutCViewHandler: configuration.PutCViewHandlerFunc(func(params configuration.PutCViewParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation configuration.PutCView has not yet been implemented")
		}),
		ConfigurationPutEmailConfigurationHandler: configuration.PutEmailConfigurationHandlerFunc(func(params configuration.PutEmailConfigurationParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation configuration.PutEmailConfiguration has not yet been implemented")
		}),
		QuestionPutOptionHandler: question.PutOptionHandlerFunc(func(params question.PutOptionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation question.PutOption has not yet been implemented")
		}),
		QuestionPutPruebaHandler: question.PutPruebaHandlerFunc(func(params question.PutPruebaParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation question.PutPrueba has not yet been implemented")
		}),
		PublishedTestPutPublishedTestHandler: published_test.PutPublishedTestHandlerFunc(func(params published_test.PutPublishedTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation published_test.PutPublishedTest has not yet been implemented")
		}),
		QuestionPutQuestionHandler: question.PutQuestionHandlerFunc(func(params question.PutQuestionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation question.PutQuestion has not yet been implemented")
		}),
		AnswerPutQuestionAnswerFromAnswerHandler: answer.PutQuestionAnswerFromAnswerHandlerFunc(func(params answer.PutQuestionAnswerFromAnswerParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation answer.PutQuestionAnswerFromAnswer has not yet been implemented")
		}),
		AnswerPutReviewHandler: answer.PutReviewHandlerFunc(func(params answer.PutReviewParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation answer.PutReview has not yet been implemented")
		}),
		TestPutTestHandler: test.PutTestHandlerFunc(func(params test.PutTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation test.PutTest has not yet been implemented")
		}),
		TiporolPutTipoRolHandler: tiporol.PutTipoRolHandlerFunc(func(params tiporol.PutTipoRolParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation tiporol.PutTipoRol has not yet been implemented")
		}),
		UserRegisterUserHandler: user.RegisterUserHandlerFunc(func(params user.RegisterUserParams) middleware.Responder {
			return middleware.NotImplemented("operation user.RegisterUser has not yet been implemented")
		}),
		TestRemoveAdminTeamToTestHandler: test.RemoveAdminTeamToTestHandlerFunc(func(params test.RemoveAdminTeamToTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation test.RemoveAdminTeamToTest has not yet been implemented")
		}),
		UserRemoveQuestionFavoriteHandler: user.RemoveQuestionFavoriteHandlerFunc(func(params user.RemoveQuestionFavoriteParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.RemoveQuestionFavorite has not yet been implemented")
		}),
		TestRemoveQuestionFromTestHandler: test.RemoveQuestionFromTestHandlerFunc(func(params test.RemoveQuestionFromTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation test.RemoveQuestionFromTest has not yet been implemented")
		}),
		QuestionRemoveTagFromQuestionHandler: question.RemoveTagFromQuestionHandlerFunc(func(params question.RemoveTagFromQuestionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation question.RemoveTagFromQuestion has not yet been implemented")
		}),
		TestRemoveTagFromTestHandler: test.RemoveTagFromTestHandlerFunc(func(params test.RemoveTagFromTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation test.RemoveTagFromTest has not yet been implemented")
		}),
		PublishedTestRemoveTeamToPublishedTestHandler: published_test.RemoveTeamToPublishedTestHandlerFunc(func(params published_test.RemoveTeamToPublishedTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation published_test.RemoveTeamToPublishedTest has not yet been implemented")
		}),
		QuestionRemoveTeamToQuestionHandler: question.RemoveTeamToQuestionHandlerFunc(func(params question.RemoveTeamToQuestionParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation question.RemoveTeamToQuestion has not yet been implemented")
		}),
		UserRemoveTestFavoriteHandler: user.RemoveTestFavoriteHandlerFunc(func(params user.RemoveTestFavoriteParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.RemoveTestFavorite has not yet been implemented")
		}),
		PublishedTestRemoveUserToPublishedTestHandler: published_test.RemoveUserToPublishedTestHandlerFunc(func(params published_test.RemoveUserToPublishedTestParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation published_test.RemoveUserToPublishedTest has not yet been implemented")
		}),
		AnswerSetAnswerCorrectedHandler: answer.SetAnswerCorrectedHandlerFunc(func(params answer.SetAnswerCorrectedParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation answer.SetAnswerCorrected has not yet been implemented")
		}),
		AnswerSetAnswerNotCorrectedHandler: answer.SetAnswerNotCorrectedHandlerFunc(func(params answer.SetAnswerNotCorrectedParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation answer.SetAnswerNotCorrected has not yet been implemented")
		}),
		AnswerSetAnswerNotVisibleHandler: answer.SetAnswerNotVisibleHandlerFunc(func(params answer.SetAnswerNotVisibleParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation answer.SetAnswerNotVisible has not yet been implemented")
		}),
		AnswerSetAnswerVisibleHandler: answer.SetAnswerVisibleHandlerFunc(func(params answer.SetAnswerVisibleParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation answer.SetAnswerVisible has not yet been implemented")
		}),
		UserStartAnswerHandler: user.StartAnswerHandlerFunc(func(params user.StartAnswerParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.StartAnswer has not yet been implemented")
		}),
		AuthCloseSessionsHandler: auth.CloseSessionsHandlerFunc(func(params auth.CloseSessionsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation auth.CloseSessions has not yet been implemented")
		}),
		TeamDeleteTeamHandler: team.DeleteTeamHandlerFunc(func(params team.DeleteTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.DeleteTeam has not yet been implemented")
		}),
		UserDeleteUserHandler: user.DeleteUserHandlerFunc(func(params user.DeleteUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.DeleteUser has not yet been implemented")
		}),
		TeamGetTeamHandler: team.GetTeamHandlerFunc(func(params team.GetTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.GetTeam has not yet been implemented")
		}),
		UserGetTeamFromUserHandler: user.GetTeamFromUserHandlerFunc(func(params user.GetTeamFromUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetTeamFromUser has not yet been implemented")
		}),
		UserGetUserHandler: user.GetUserHandlerFunc(func(params user.GetUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.GetUser has not yet been implemented")
		}),
		UserPostRecoveryTokenHandler: user.PostRecoveryTokenHandlerFunc(func(params user.PostRecoveryTokenParams) middleware.Responder {
			return middleware.NotImplemented("operation user.PostRecoveryToken has not yet been implemented")
		}),
		UserPutPasswordHandler: user.PutPasswordHandlerFunc(func(params user.PutPasswordParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.PutPassword has not yet been implemented")
		}),
		UserPutRoleHandler: user.PutRoleHandlerFunc(func(params user.PutRoleParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.PutRole has not yet been implemented")
		}),
		TeamPutTeamHandler: team.PutTeamHandlerFunc(func(params team.PutTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.PutTeam has not yet been implemented")
		}),
		UserPutUserHandler: user.PutUserHandlerFunc(func(params user.PutUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.PutUser has not yet been implemented")
		}),
		UserRecoverPasswordHandler: user.RecoverPasswordHandlerFunc(func(params user.RecoverPasswordParams) middleware.Responder {
			return middleware.NotImplemented("operation user.RecoverPassword has not yet been implemented")
		}),
		AuthReloginHandler: auth.ReloginHandlerFunc(func(params auth.ReloginParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation auth.Relogin has not yet been implemented")
		}),

		// Applies when the "Cookie" header is set
		BearerCookieAuth: func(token string) (*models.User, error) {
			return nil, errors.NotImplemented("api key auth (BearerCookie) Cookie from header param [Cookie] has not yet been implemented")
		},
		// Applies when the "NotLoggedIn" header is set
		NoRegisteredAuth: func(token string) (*models.User, error) {
			return nil, errors.NotImplemented("api key auth (NoRegistered) NotLoggedIn from header param [NotLoggedIn] has not yet been implemented")
		},
		// Applies when the "Cookie" header is set
		ReAuthCookieAuth: func(token string) (*models.User, error) {
			return nil, errors.NotImplemented("api key auth (ReAuthCookie) Cookie from header param [Cookie] has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*DevAPI DevTest */
type DevAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// BearerCookieAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Cookie provided in the header
	BearerCookieAuth func(string) (*models.User, error)

	// NoRegisteredAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key NotLoggedIn provided in the header
	NoRegisteredAuth func(string) (*models.User, error)

	// ReAuthCookieAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Cookie provided in the header
	ReAuthCookieAuth func(string) (*models.User, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// TeamAddAdminHandler sets the operation handler for the add admin operation
	TeamAddAdminHandler team.AddAdminHandler
	// TestAddAdminTeamToTestHandler sets the operation handler for the add admin team to test operation
	TestAddAdminTeamToTestHandler test.AddAdminTeamToTestHandler
	// TeamAddMemberHandler sets the operation handler for the add member operation
	TeamAddMemberHandler team.AddMemberHandler
	// UserAddQuestionFavoriteHandler sets the operation handler for the add question favorite operation
	UserAddQuestionFavoriteHandler user.AddQuestionFavoriteHandler
	// TestAddQuestionToTestHandler sets the operation handler for the add question to test operation
	TestAddQuestionToTestHandler test.AddQuestionToTestHandler
	// QuestionAddTagToQuestionHandler sets the operation handler for the add tag to question operation
	QuestionAddTagToQuestionHandler question.AddTagToQuestionHandler
	// TestAddTagToTestHandler sets the operation handler for the add tag to test operation
	TestAddTagToTestHandler test.AddTagToTestHandler
	// QuestionAddTeamToQuestionHandler sets the operation handler for the add team to question operation
	QuestionAddTeamToQuestionHandler question.AddTeamToQuestionHandler
	// UserAddTestFavoriteHandler sets the operation handler for the add test favorite operation
	UserAddTestFavoriteHandler user.AddTestFavoriteHandler
	// UserCopyQuestionHandler sets the operation handler for the copy question operation
	UserCopyQuestionHandler user.CopyQuestionHandler
	// UserCopyTestHandler sets the operation handler for the copy test operation
	UserCopyTestHandler user.CopyTestHandler
	// QuestionDeleteOptionHandler sets the operation handler for the delete option operation
	QuestionDeleteOptionHandler question.DeleteOptionHandler
	// QuestionDeletePruebaHandler sets the operation handler for the delete prueba operation
	QuestionDeletePruebaHandler question.DeletePruebaHandler
	// QuestionDeleteQuestionHandler sets the operation handler for the delete question operation
	QuestionDeleteQuestionHandler question.DeleteQuestionHandler
	// AnswerDeleteQuestionAnswerFromAnswerHandler sets the operation handler for the delete question answer from answer operation
	AnswerDeleteQuestionAnswerFromAnswerHandler answer.DeleteQuestionAnswerFromAnswerHandler
	// AnswerDeleteReviewHandler sets the operation handler for the delete review operation
	AnswerDeleteReviewHandler answer.DeleteReviewHandler
	// TestDeleteTestHandler sets the operation handler for the delete test operation
	TestDeleteTestHandler test.DeleteTestHandler
	// TiporolDeleteTipoRolHandler sets the operation handler for the delete tipo rol operation
	TiporolDeleteTipoRolHandler tiporol.DeleteTipoRolHandler
	// TeamDeleteUserFromTeamHandler sets the operation handler for the delete user from team operation
	TeamDeleteUserFromTeamHandler team.DeleteUserFromTeamHandler
	// AnswerFinishAnswerHandler sets the operation handler for the finish answer operation
	AnswerFinishAnswerHandler answer.FinishAnswerHandler
	// TeamGetAdminHandler sets the operation handler for the get admin operation
	TeamGetAdminHandler team.GetAdminHandler
	// TestGetAdminTeamsFromTestHandler sets the operation handler for the get admin teams from test operation
	TestGetAdminTeamsFromTestHandler test.GetAdminTeamsFromTestHandler
	// TeamGetAdminsHandler sets the operation handler for the get admins operation
	TeamGetAdminsHandler team.GetAdminsHandler
	// QuestionGetAllEditQuestionsHandler sets the operation handler for the get all edit questions operation
	QuestionGetAllEditQuestionsHandler question.GetAllEditQuestionsHandler
	// TestGetAllEditTestsHandler sets the operation handler for the get all edit tests operation
	TestGetAllEditTestsHandler test.GetAllEditTestsHandler
	// QuestionGetAllQuestionsHandler sets the operation handler for the get all questions operation
	QuestionGetAllQuestionsHandler question.GetAllQuestionsHandler
	// TestGetAllTestsHandler sets the operation handler for the get all tests operation
	TestGetAllTestsHandler test.GetAllTestsHandler
	// AnswerGetAnswerHandler sets the operation handler for the get answer operation
	AnswerGetAnswerHandler answer.GetAnswerHandler
	// UserGetAnswerFromUserHandler sets the operation handler for the get answer from user operation
	UserGetAnswerFromUserHandler user.GetAnswerFromUserHandler
	// UserGetAnsweredTestFromUserHandler sets the operation handler for the get answered test from user operation
	UserGetAnsweredTestFromUserHandler user.GetAnsweredTestFromUserHandler
	// UserGetAnsweredTestsFromUserHandler sets the operation handler for the get answered tests from user operation
	UserGetAnsweredTestsFromUserHandler user.GetAnsweredTestsFromUserHandler
	// AnswerGetAnswersHandler sets the operation handler for the get answers operation
	AnswerGetAnswersHandler answer.GetAnswersHandler
	// PublishedTestGetAnswersFromPublishedTestsHandler sets the operation handler for the get answers from published tests operation
	PublishedTestGetAnswersFromPublishedTestsHandler published_test.GetAnswersFromPublishedTestsHandler
	// UserGetAnswersFromUserHandler sets the operation handler for the get answers from user operation
	UserGetAnswersFromUserHandler user.GetAnswersFromUserHandler
	// UserGetAnswersFromUserAnsweredTestHandler sets the operation handler for the get answers from user answered test operation
	UserGetAnswersFromUserAnsweredTestHandler user.GetAnswersFromUserAnsweredTestHandler
	// UserGetAvailableEditQuestionsOfUserHandler sets the operation handler for the get available edit questions of user operation
	UserGetAvailableEditQuestionsOfUserHandler user.GetAvailableEditQuestionsOfUserHandler
	// UserGetAvailableQuestionsOfUserHandler sets the operation handler for the get available questions of user operation
	UserGetAvailableQuestionsOfUserHandler user.GetAvailableQuestionsOfUserHandler
	// ConfigurationGetCViewHandler sets the operation handler for the get c view operation
	ConfigurationGetCViewHandler configuration.GetCViewHandler
	// ConfigurationGetCViewsHandler sets the operation handler for the get c views operation
	ConfigurationGetCViewsHandler configuration.GetCViewsHandler
	// PublishedTestGetCorrectedAnswersFromPublishedTestsHandler sets the operation handler for the get corrected answers from published tests operation
	PublishedTestGetCorrectedAnswersFromPublishedTestsHandler published_test.GetCorrectedAnswersFromPublishedTestsHandler
	// UserGetCorrectedAnswersFromUserHandler sets the operation handler for the get corrected answers from user operation
	UserGetCorrectedAnswersFromUserHandler user.GetCorrectedAnswersFromUserHandler
	// UserGetCorrectedAnswersFromUserAnsweredTestHandler sets the operation handler for the get corrected answers from user answered test operation
	UserGetCorrectedAnswersFromUserAnsweredTestHandler user.GetCorrectedAnswersFromUserAnsweredTestHandler
	// QuestionGetEditQuestionsHandler sets the operation handler for the get edit questions operation
	QuestionGetEditQuestionsHandler question.GetEditQuestionsHandler
	// TagGetEditQuestionsFromTagHandler sets the operation handler for the get edit questions from tag operation
	TagGetEditQuestionsFromTagHandler tag.GetEditQuestionsFromTagHandler
	// UserGetEditQuestionsOfUserHandler sets the operation handler for the get edit questions of user operation
	UserGetEditQuestionsOfUserHandler user.GetEditQuestionsOfUserHandler
	// TagGetEditTestsFromTagHandler sets the operation handler for the get edit tests from tag operation
	TagGetEditTestsFromTagHandler tag.GetEditTestsFromTagHandler
	// UserGetEditTestsFromUserHandler sets the operation handler for the get edit tests from user operation
	UserGetEditTestsFromUserHandler user.GetEditTestsFromUserHandler
	// ConfigurationGetEmailConfigurationHandler sets the operation handler for the get email configuration operation
	ConfigurationGetEmailConfigurationHandler configuration.GetEmailConfigurationHandler
	// UserGetFavoriteEditQuestionsHandler sets the operation handler for the get favorite edit questions operation
	UserGetFavoriteEditQuestionsHandler user.GetFavoriteEditQuestionsHandler
	// UserGetFavoriteEditTestsHandler sets the operation handler for the get favorite edit tests operation
	UserGetFavoriteEditTestsHandler user.GetFavoriteEditTestsHandler
	// UserGetFavoriteQuestionHandler sets the operation handler for the get favorite question operation
	UserGetFavoriteQuestionHandler user.GetFavoriteQuestionHandler
	// UserGetFavoriteQuestionsHandler sets the operation handler for the get favorite questions operation
	UserGetFavoriteQuestionsHandler user.GetFavoriteQuestionsHandler
	// UserGetFavoriteTestHandler sets the operation handler for the get favorite test operation
	UserGetFavoriteTestHandler user.GetFavoriteTestHandler
	// UserGetFavoriteTestsHandler sets the operation handler for the get favorite tests operation
	UserGetFavoriteTestsHandler user.GetFavoriteTestsHandler
	// TeamGetInvitedTestFromTeamHandler sets the operation handler for the get invited test from team operation
	TeamGetInvitedTestFromTeamHandler team.GetInvitedTestFromTeamHandler
	// UserGetInvitedTestFromUserHandler sets the operation handler for the get invited test from user operation
	UserGetInvitedTestFromUserHandler user.GetInvitedTestFromUserHandler
	// UserGetInvitedTestsByTeamsAndUserHandler sets the operation handler for the get invited tests by teams and user operation
	UserGetInvitedTestsByTeamsAndUserHandler user.GetInvitedTestsByTeamsAndUserHandler
	// TeamGetInvitedTestsFromTeamHandler sets the operation handler for the get invited tests from team operation
	TeamGetInvitedTestsFromTeamHandler team.GetInvitedTestsFromTeamHandler
	// UserGetInvitedTestsFromUserHandler sets the operation handler for the get invited tests from user operation
	UserGetInvitedTestsFromUserHandler user.GetInvitedTestsFromUserHandler
	// TeamGetMemberHandler sets the operation handler for the get member operation
	TeamGetMemberHandler team.GetMemberHandler
	// TeamGetMembersHandler sets the operation handler for the get members operation
	TeamGetMembersHandler team.GetMembersHandler
	// UserGetOpenAnswersFromUserTestHandler sets the operation handler for the get open answers from user test operation
	UserGetOpenAnswersFromUserTestHandler user.GetOpenAnswersFromUserTestHandler
	// QuestionGetOptionFromQuestionHandler sets the operation handler for the get option from question operation
	QuestionGetOptionFromQuestionHandler question.GetOptionFromQuestionHandler
	// PublishedTestGetOptionsFromPublishedQuestionHandler sets the operation handler for the get options from published question operation
	PublishedTestGetOptionsFromPublishedQuestionHandler published_test.GetOptionsFromPublishedQuestionHandler
	// QuestionGetOptionsFromQuestionHandler sets the operation handler for the get options from question operation
	QuestionGetOptionsFromQuestionHandler question.GetOptionsFromQuestionHandler
	// UserGetPendingTestsFromUserHandler sets the operation handler for the get pending tests from user operation
	UserGetPendingTestsFromUserHandler user.GetPendingTestsFromUserHandler
	// QuestionGetPruebaFromQuestionHandler sets the operation handler for the get prueba from question operation
	QuestionGetPruebaFromQuestionHandler question.GetPruebaFromQuestionHandler
	// QuestionGetPruebasFromQuestionHandler sets the operation handler for the get pruebas from question operation
	QuestionGetPruebasFromQuestionHandler question.GetPruebasFromQuestionHandler
	// UserGetPublicEditQuestionsOfUserHandler sets the operation handler for the get public edit questions of user operation
	UserGetPublicEditQuestionsOfUserHandler user.GetPublicEditQuestionsOfUserHandler
	// TestGetPublicEditTestsHandler sets the operation handler for the get public edit tests operation
	TestGetPublicEditTestsHandler test.GetPublicEditTestsHandler
	// UserGetPublicEditTestsFromUserHandler sets the operation handler for the get public edit tests from user operation
	UserGetPublicEditTestsFromUserHandler user.GetPublicEditTestsFromUserHandler
	// PublishedTestGetPublicPublishedTestHandler sets the operation handler for the get public published test operation
	PublishedTestGetPublicPublishedTestHandler published_test.GetPublicPublishedTestHandler
	// PublishedTestGetPublicPublishedTestsHandler sets the operation handler for the get public published tests operation
	PublishedTestGetPublicPublishedTestsHandler published_test.GetPublicPublishedTestsHandler
	// UserGetPublicPublishedTestsFromUserHandler sets the operation handler for the get public published tests from user operation
	UserGetPublicPublishedTestsFromUserHandler user.GetPublicPublishedTestsFromUserHandler
	// TestGetPublicTestsHandler sets the operation handler for the get public tests operation
	TestGetPublicTestsHandler test.GetPublicTestsHandler
	// PublishedTestGetPublishedTestHandler sets the operation handler for the get published test operation
	PublishedTestGetPublishedTestHandler published_test.GetPublishedTestHandler
	// TeamGetPublishedTestFromTeamHandler sets the operation handler for the get published test from team operation
	TeamGetPublishedTestFromTeamHandler team.GetPublishedTestFromTeamHandler
	// PublishedTestGetPublishedTestsHandler sets the operation handler for the get published tests operation
	PublishedTestGetPublishedTestsHandler published_test.GetPublishedTestsHandler
	// TeamGetPublishedTestsFromTeamHandler sets the operation handler for the get published tests from team operation
	TeamGetPublishedTestsFromTeamHandler team.GetPublishedTestsFromTeamHandler
	// TestGetPublishedTestsFromTestHandler sets the operation handler for the get published tests from test operation
	TestGetPublishedTestsFromTestHandler test.GetPublishedTestsFromTestHandler
	// UserGetPublishedTestsFromUserHandler sets the operation handler for the get published tests from user operation
	UserGetPublishedTestsFromUserHandler user.GetPublishedTestsFromUserHandler
	// QuestionGetQuestionHandler sets the operation handler for the get question operation
	QuestionGetQuestionHandler question.GetQuestionHandler
	// AnswerGetQuestionAnswerFromAnswerHandler sets the operation handler for the get question answer from answer operation
	AnswerGetQuestionAnswerFromAnswerHandler answer.GetQuestionAnswerFromAnswerHandler
	// AnswerGetQuestionAnswersFromAnswerHandler sets the operation handler for the get question answers from answer operation
	AnswerGetQuestionAnswersFromAnswerHandler answer.GetQuestionAnswersFromAnswerHandler
	// AnswerGetQuestionAnswersFromAnswerAndQuestionHandler sets the operation handler for the get question answers from answer and question operation
	AnswerGetQuestionAnswersFromAnswerAndQuestionHandler answer.GetQuestionAnswersFromAnswerAndQuestionHandler
	// PublishedTestGetQuestionAnswersFromPublishedTestQuestionHandler sets the operation handler for the get question answers from published test question operation
	PublishedTestGetQuestionAnswersFromPublishedTestQuestionHandler published_test.GetQuestionAnswersFromPublishedTestQuestionHandler
	// PublishedTestGetQuestionFromPublishedTestsHandler sets the operation handler for the get question from published tests operation
	PublishedTestGetQuestionFromPublishedTestsHandler published_test.GetQuestionFromPublishedTestsHandler
	// TeamGetQuestionFromTeamHandler sets the operation handler for the get question from team operation
	TeamGetQuestionFromTeamHandler team.GetQuestionFromTeamHandler
	// TestGetQuestionFromTestHandler sets the operation handler for the get question from test operation
	TestGetQuestionFromTestHandler test.GetQuestionFromTestHandler
	// UserGetQuestionFromUserHandler sets the operation handler for the get question from user operation
	UserGetQuestionFromUserHandler user.GetQuestionFromUserHandler
	// QuestionGetQuestionsHandler sets the operation handler for the get questions operation
	QuestionGetQuestionsHandler question.GetQuestionsHandler
	// AnswerGetQuestionsFromAnswerHandler sets the operation handler for the get questions from answer operation
	AnswerGetQuestionsFromAnswerHandler answer.GetQuestionsFromAnswerHandler
	// PublishedTestGetQuestionsFromPublishedTestsHandler sets the operation handler for the get questions from published tests operation
	PublishedTestGetQuestionsFromPublishedTestsHandler published_test.GetQuestionsFromPublishedTestsHandler
	// TagGetQuestionsFromTagHandler sets the operation handler for the get questions from tag operation
	TagGetQuestionsFromTagHandler tag.GetQuestionsFromTagHandler
	// TeamGetQuestionsFromTeamHandler sets the operation handler for the get questions from team operation
	TeamGetQuestionsFromTeamHandler team.GetQuestionsFromTeamHandler
	// TestGetQuestionsFromTestHandler sets the operation handler for the get questions from test operation
	TestGetQuestionsFromTestHandler test.GetQuestionsFromTestHandler
	// UserGetQuestionsOfUserHandler sets the operation handler for the get questions of user operation
	UserGetQuestionsOfUserHandler user.GetQuestionsOfUserHandler
	// UserGetSharedEditTestsFromUserHandler sets the operation handler for the get shared edit tests from user operation
	UserGetSharedEditTestsFromUserHandler user.GetSharedEditTestsFromUserHandler
	// UserGetSharedPublishedTestsFromUserHandler sets the operation handler for the get shared published tests from user operation
	UserGetSharedPublishedTestsFromUserHandler user.GetSharedPublishedTestsFromUserHandler
	// UserGetSharedQuestionFromUserHandler sets the operation handler for the get shared question from user operation
	UserGetSharedQuestionFromUserHandler user.GetSharedQuestionFromUserHandler
	// UserGetSharedQuestionsOfUserHandler sets the operation handler for the get shared questions of user operation
	UserGetSharedQuestionsOfUserHandler user.GetSharedQuestionsOfUserHandler
	// UserGetSharedTestFromUserHandler sets the operation handler for the get shared test from user operation
	UserGetSharedTestFromUserHandler user.GetSharedTestFromUserHandler
	// UserGetSharedTestsFromUserHandler sets the operation handler for the get shared tests from user operation
	UserGetSharedTestsFromUserHandler user.GetSharedTestsFromUserHandler
	// UserGetSolvableTestFromUserHandler sets the operation handler for the get solvable test from user operation
	UserGetSolvableTestFromUserHandler user.GetSolvableTestFromUserHandler
	// UserGetSolvableTestsFromUserHandler sets the operation handler for the get solvable tests from user operation
	UserGetSolvableTestsFromUserHandler user.GetSolvableTestsFromUserHandler
	// TagGetTagHandler sets the operation handler for the get tag operation
	TagGetTagHandler tag.GetTagHandler
	// PublishedTestGetTagFromPublishedTestHandler sets the operation handler for the get tag from published test operation
	PublishedTestGetTagFromPublishedTestHandler published_test.GetTagFromPublishedTestHandler
	// QuestionGetTagFromQuestionHandler sets the operation handler for the get tag from question operation
	QuestionGetTagFromQuestionHandler question.GetTagFromQuestionHandler
	// TestGetTagFromTestHandler sets the operation handler for the get tag from test operation
	TestGetTagFromTestHandler test.GetTagFromTestHandler
	// TagGetTagsHandler sets the operation handler for the get tags operation
	TagGetTagsHandler tag.GetTagsHandler
	// PublishedTestGetTagsFromPublishedQuestionHandler sets the operation handler for the get tags from published question operation
	PublishedTestGetTagsFromPublishedQuestionHandler published_test.GetTagsFromPublishedQuestionHandler
	// PublishedTestGetTagsFromPublishedTestHandler sets the operation handler for the get tags from published test operation
	PublishedTestGetTagsFromPublishedTestHandler published_test.GetTagsFromPublishedTestHandler
	// QuestionGetTagsFromQuestionHandler sets the operation handler for the get tags from question operation
	QuestionGetTagsFromQuestionHandler question.GetTagsFromQuestionHandler
	// TestGetTagsFromTestHandler sets the operation handler for the get tags from test operation
	TestGetTagsFromTestHandler test.GetTagsFromTestHandler
	// TeamGetTeamsHandler sets the operation handler for the get teams operation
	TeamGetTeamsHandler team.GetTeamsHandler
	// PublishedTestGetTeamsFromPublishedTestHandler sets the operation handler for the get teams from published test operation
	PublishedTestGetTeamsFromPublishedTestHandler published_test.GetTeamsFromPublishedTestHandler
	// QuestionGetTeamsFromQuestionHandler sets the operation handler for the get teams from question operation
	QuestionGetTeamsFromQuestionHandler question.GetTeamsFromQuestionHandler
	// UserGetTeamsOfUserHandler sets the operation handler for the get teams of user operation
	UserGetTeamsOfUserHandler user.GetTeamsOfUserHandler
	// TestGetTestHandler sets the operation handler for the get test operation
	TestGetTestHandler test.GetTestHandler
	// TeamGetTestFromTeamHandler sets the operation handler for the get test from team operation
	TeamGetTestFromTeamHandler team.GetTestFromTeamHandler
	// UserGetTestFromUserHandler sets the operation handler for the get test from user operation
	UserGetTestFromUserHandler user.GetTestFromUserHandler
	// TagGetTestsFromTagHandler sets the operation handler for the get tests from tag operation
	TagGetTestsFromTagHandler tag.GetTestsFromTagHandler
	// TeamGetTestsFromTeamHandler sets the operation handler for the get tests from team operation
	TeamGetTestsFromTeamHandler team.GetTestsFromTeamHandler
	// UserGetTestsFromUserHandler sets the operation handler for the get tests from user operation
	UserGetTestsFromUserHandler user.GetTestsFromUserHandler
	// TiporolGetTipoRolHandler sets the operation handler for the get tipo rol operation
	TiporolGetTipoRolHandler tiporol.GetTipoRolHandler
	// TiporolGetTipoRolesHandler sets the operation handler for the get tipo roles operation
	TiporolGetTipoRolesHandler tiporol.GetTipoRolesHandler
	// PublishedTestGetUncorrectedAnswersFromPublishedTestsHandler sets the operation handler for the get uncorrected answers from published tests operation
	PublishedTestGetUncorrectedAnswersFromPublishedTestsHandler published_test.GetUncorrectedAnswersFromPublishedTestsHandler
	// UserGetUncorrectedAnswersFromUserHandler sets the operation handler for the get uncorrected answers from user operation
	UserGetUncorrectedAnswersFromUserHandler user.GetUncorrectedAnswersFromUserHandler
	// UserGetUncorrectedAnswersFromUserAnsweredTestHandler sets the operation handler for the get uncorrected answers from user answered test operation
	UserGetUncorrectedAnswersFromUserAnsweredTestHandler user.GetUncorrectedAnswersFromUserAnsweredTestHandler
	// TeamGetUserFromTeamHandler sets the operation handler for the get user from team operation
	TeamGetUserFromTeamHandler team.GetUserFromTeamHandler
	// UserGetUsersHandler sets the operation handler for the get users operation
	UserGetUsersHandler user.GetUsersHandler
	// PublishedTestGetUsersFromPublishedTestHandler sets the operation handler for the get users from published test operation
	PublishedTestGetUsersFromPublishedTestHandler published_test.GetUsersFromPublishedTestHandler
	// TeamGetUsersFromTeamHandler sets the operation handler for the get users from team operation
	TeamGetUsersFromTeamHandler team.GetUsersFromTeamHandler
	// PublishedTestGetVisiblePruebasFromQuestionTestHandler sets the operation handler for the get visible pruebas from question test operation
	PublishedTestGetVisiblePruebasFromQuestionTestHandler published_test.GetVisiblePruebasFromQuestionTestHandler
	// PublishedTestInviteTeamToPublishedTestHandler sets the operation handler for the invite team to published test operation
	PublishedTestInviteTeamToPublishedTestHandler published_test.InviteTeamToPublishedTestHandler
	// PublishedTestInviteUserToPublishedTestHandler sets the operation handler for the invite user to published test operation
	PublishedTestInviteUserToPublishedTestHandler published_test.InviteUserToPublishedTestHandler
	// AuthLoginHandler sets the operation handler for the login operation
	AuthLoginHandler auth.LoginHandler
	// AuthLogoutHandler sets the operation handler for the logout operation
	AuthLogoutHandler auth.LogoutHandler
	// UserPostEmailUserHandler sets the operation handler for the post email user operation
	UserPostEmailUserHandler user.PostEmailUserHandler
	// QuestionPostOptionHandler sets the operation handler for the post option operation
	QuestionPostOptionHandler question.PostOptionHandler
	// QuestionPostPruebaHandler sets the operation handler for the post prueba operation
	QuestionPostPruebaHandler question.PostPruebaHandler
	// TestPostPublishedTestHandler sets the operation handler for the post published test operation
	TestPostPublishedTestHandler test.PostPublishedTestHandler
	// UserPostQuestionHandler sets the operation handler for the post question operation
	UserPostQuestionHandler user.PostQuestionHandler
	// AnswerPostQuestionAnswerHandler sets the operation handler for the post question answer operation
	AnswerPostQuestionAnswerHandler answer.PostQuestionAnswerHandler
	// TeamPostTeamHandler sets the operation handler for the post team operation
	TeamPostTeamHandler team.PostTeamHandler
	// UserPostTestHandler sets the operation handler for the post test operation
	UserPostTestHandler user.PostTestHandler
	// TiporolPostTipoRolHandler sets the operation handler for the post tipo rol operation
	TiporolPostTipoRolHandler tiporol.PostTipoRolHandler
	// ConfigurationPutCViewHandler sets the operation handler for the put c view operation
	ConfigurationPutCViewHandler configuration.PutCViewHandler
	// ConfigurationPutEmailConfigurationHandler sets the operation handler for the put email configuration operation
	ConfigurationPutEmailConfigurationHandler configuration.PutEmailConfigurationHandler
	// QuestionPutOptionHandler sets the operation handler for the put option operation
	QuestionPutOptionHandler question.PutOptionHandler
	// QuestionPutPruebaHandler sets the operation handler for the put prueba operation
	QuestionPutPruebaHandler question.PutPruebaHandler
	// PublishedTestPutPublishedTestHandler sets the operation handler for the put published test operation
	PublishedTestPutPublishedTestHandler published_test.PutPublishedTestHandler
	// QuestionPutQuestionHandler sets the operation handler for the put question operation
	QuestionPutQuestionHandler question.PutQuestionHandler
	// AnswerPutQuestionAnswerFromAnswerHandler sets the operation handler for the put question answer from answer operation
	AnswerPutQuestionAnswerFromAnswerHandler answer.PutQuestionAnswerFromAnswerHandler
	// AnswerPutReviewHandler sets the operation handler for the put review operation
	AnswerPutReviewHandler answer.PutReviewHandler
	// TestPutTestHandler sets the operation handler for the put test operation
	TestPutTestHandler test.PutTestHandler
	// TiporolPutTipoRolHandler sets the operation handler for the put tipo rol operation
	TiporolPutTipoRolHandler tiporol.PutTipoRolHandler
	// UserRegisterUserHandler sets the operation handler for the register user operation
	UserRegisterUserHandler user.RegisterUserHandler
	// TestRemoveAdminTeamToTestHandler sets the operation handler for the remove admin team to test operation
	TestRemoveAdminTeamToTestHandler test.RemoveAdminTeamToTestHandler
	// UserRemoveQuestionFavoriteHandler sets the operation handler for the remove question favorite operation
	UserRemoveQuestionFavoriteHandler user.RemoveQuestionFavoriteHandler
	// TestRemoveQuestionFromTestHandler sets the operation handler for the remove question from test operation
	TestRemoveQuestionFromTestHandler test.RemoveQuestionFromTestHandler
	// QuestionRemoveTagFromQuestionHandler sets the operation handler for the remove tag from question operation
	QuestionRemoveTagFromQuestionHandler question.RemoveTagFromQuestionHandler
	// TestRemoveTagFromTestHandler sets the operation handler for the remove tag from test operation
	TestRemoveTagFromTestHandler test.RemoveTagFromTestHandler
	// PublishedTestRemoveTeamToPublishedTestHandler sets the operation handler for the remove team to published test operation
	PublishedTestRemoveTeamToPublishedTestHandler published_test.RemoveTeamToPublishedTestHandler
	// QuestionRemoveTeamToQuestionHandler sets the operation handler for the remove team to question operation
	QuestionRemoveTeamToQuestionHandler question.RemoveTeamToQuestionHandler
	// UserRemoveTestFavoriteHandler sets the operation handler for the remove test favorite operation
	UserRemoveTestFavoriteHandler user.RemoveTestFavoriteHandler
	// PublishedTestRemoveUserToPublishedTestHandler sets the operation handler for the remove user to published test operation
	PublishedTestRemoveUserToPublishedTestHandler published_test.RemoveUserToPublishedTestHandler
	// AnswerSetAnswerCorrectedHandler sets the operation handler for the set answer corrected operation
	AnswerSetAnswerCorrectedHandler answer.SetAnswerCorrectedHandler
	// AnswerSetAnswerNotCorrectedHandler sets the operation handler for the set answer not corrected operation
	AnswerSetAnswerNotCorrectedHandler answer.SetAnswerNotCorrectedHandler
	// AnswerSetAnswerNotVisibleHandler sets the operation handler for the set answer not visible operation
	AnswerSetAnswerNotVisibleHandler answer.SetAnswerNotVisibleHandler
	// AnswerSetAnswerVisibleHandler sets the operation handler for the set answer visible operation
	AnswerSetAnswerVisibleHandler answer.SetAnswerVisibleHandler
	// UserStartAnswerHandler sets the operation handler for the start answer operation
	UserStartAnswerHandler user.StartAnswerHandler
	// AuthCloseSessionsHandler sets the operation handler for the close sessions operation
	AuthCloseSessionsHandler auth.CloseSessionsHandler
	// TeamDeleteTeamHandler sets the operation handler for the delete team operation
	TeamDeleteTeamHandler team.DeleteTeamHandler
	// UserDeleteUserHandler sets the operation handler for the delete user operation
	UserDeleteUserHandler user.DeleteUserHandler
	// TeamGetTeamHandler sets the operation handler for the get team operation
	TeamGetTeamHandler team.GetTeamHandler
	// UserGetTeamFromUserHandler sets the operation handler for the get team from user operation
	UserGetTeamFromUserHandler user.GetTeamFromUserHandler
	// UserGetUserHandler sets the operation handler for the get user operation
	UserGetUserHandler user.GetUserHandler
	// UserPostRecoveryTokenHandler sets the operation handler for the post recovery token operation
	UserPostRecoveryTokenHandler user.PostRecoveryTokenHandler
	// UserPutPasswordHandler sets the operation handler for the put password operation
	UserPutPasswordHandler user.PutPasswordHandler
	// UserPutRoleHandler sets the operation handler for the put role operation
	UserPutRoleHandler user.PutRoleHandler
	// TeamPutTeamHandler sets the operation handler for the put team operation
	TeamPutTeamHandler team.PutTeamHandler
	// UserPutUserHandler sets the operation handler for the put user operation
	UserPutUserHandler user.PutUserHandler
	// UserRecoverPasswordHandler sets the operation handler for the recover password operation
	UserRecoverPasswordHandler user.RecoverPasswordHandler
	// AuthReloginHandler sets the operation handler for the relogin operation
	AuthReloginHandler auth.ReloginHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *DevAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *DevAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *DevAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *DevAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *DevAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *DevAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *DevAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *DevAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *DevAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the DevAPI
func (o *DevAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BearerCookieAuth == nil {
		unregistered = append(unregistered, "CookieAuth")
	}
	if o.NoRegisteredAuth == nil {
		unregistered = append(unregistered, "NotLoggedInAuth")
	}
	if o.ReAuthCookieAuth == nil {
		unregistered = append(unregistered, "CookieAuth")
	}

	if o.TeamAddAdminHandler == nil {
		unregistered = append(unregistered, "team.AddAdminHandler")
	}
	if o.TestAddAdminTeamToTestHandler == nil {
		unregistered = append(unregistered, "test.AddAdminTeamToTestHandler")
	}
	if o.TeamAddMemberHandler == nil {
		unregistered = append(unregistered, "team.AddMemberHandler")
	}
	if o.UserAddQuestionFavoriteHandler == nil {
		unregistered = append(unregistered, "user.AddQuestionFavoriteHandler")
	}
	if o.TestAddQuestionToTestHandler == nil {
		unregistered = append(unregistered, "test.AddQuestionToTestHandler")
	}
	if o.QuestionAddTagToQuestionHandler == nil {
		unregistered = append(unregistered, "question.AddTagToQuestionHandler")
	}
	if o.TestAddTagToTestHandler == nil {
		unregistered = append(unregistered, "test.AddTagToTestHandler")
	}
	if o.QuestionAddTeamToQuestionHandler == nil {
		unregistered = append(unregistered, "question.AddTeamToQuestionHandler")
	}
	if o.UserAddTestFavoriteHandler == nil {
		unregistered = append(unregistered, "user.AddTestFavoriteHandler")
	}
	if o.UserCopyQuestionHandler == nil {
		unregistered = append(unregistered, "user.CopyQuestionHandler")
	}
	if o.UserCopyTestHandler == nil {
		unregistered = append(unregistered, "user.CopyTestHandler")
	}
	if o.QuestionDeleteOptionHandler == nil {
		unregistered = append(unregistered, "question.DeleteOptionHandler")
	}
	if o.QuestionDeletePruebaHandler == nil {
		unregistered = append(unregistered, "question.DeletePruebaHandler")
	}
	if o.QuestionDeleteQuestionHandler == nil {
		unregistered = append(unregistered, "question.DeleteQuestionHandler")
	}
	if o.AnswerDeleteQuestionAnswerFromAnswerHandler == nil {
		unregistered = append(unregistered, "answer.DeleteQuestionAnswerFromAnswerHandler")
	}
	if o.AnswerDeleteReviewHandler == nil {
		unregistered = append(unregistered, "answer.DeleteReviewHandler")
	}
	if o.TestDeleteTestHandler == nil {
		unregistered = append(unregistered, "test.DeleteTestHandler")
	}
	if o.TiporolDeleteTipoRolHandler == nil {
		unregistered = append(unregistered, "tiporol.DeleteTipoRolHandler")
	}
	if o.TeamDeleteUserFromTeamHandler == nil {
		unregistered = append(unregistered, "team.DeleteUserFromTeamHandler")
	}
	if o.AnswerFinishAnswerHandler == nil {
		unregistered = append(unregistered, "answer.FinishAnswerHandler")
	}
	if o.TeamGetAdminHandler == nil {
		unregistered = append(unregistered, "team.GetAdminHandler")
	}
	if o.TestGetAdminTeamsFromTestHandler == nil {
		unregistered = append(unregistered, "test.GetAdminTeamsFromTestHandler")
	}
	if o.TeamGetAdminsHandler == nil {
		unregistered = append(unregistered, "team.GetAdminsHandler")
	}
	if o.QuestionGetAllEditQuestionsHandler == nil {
		unregistered = append(unregistered, "question.GetAllEditQuestionsHandler")
	}
	if o.TestGetAllEditTestsHandler == nil {
		unregistered = append(unregistered, "test.GetAllEditTestsHandler")
	}
	if o.QuestionGetAllQuestionsHandler == nil {
		unregistered = append(unregistered, "question.GetAllQuestionsHandler")
	}
	if o.TestGetAllTestsHandler == nil {
		unregistered = append(unregistered, "test.GetAllTestsHandler")
	}
	if o.AnswerGetAnswerHandler == nil {
		unregistered = append(unregistered, "answer.GetAnswerHandler")
	}
	if o.UserGetAnswerFromUserHandler == nil {
		unregistered = append(unregistered, "user.GetAnswerFromUserHandler")
	}
	if o.UserGetAnsweredTestFromUserHandler == nil {
		unregistered = append(unregistered, "user.GetAnsweredTestFromUserHandler")
	}
	if o.UserGetAnsweredTestsFromUserHandler == nil {
		unregistered = append(unregistered, "user.GetAnsweredTestsFromUserHandler")
	}
	if o.AnswerGetAnswersHandler == nil {
		unregistered = append(unregistered, "answer.GetAnswersHandler")
	}
	if o.PublishedTestGetAnswersFromPublishedTestsHandler == nil {
		unregistered = append(unregistered, "published_test.GetAnswersFromPublishedTestsHandler")
	}
	if o.UserGetAnswersFromUserHandler == nil {
		unregistered = append(unregistered, "user.GetAnswersFromUserHandler")
	}
	if o.UserGetAnswersFromUserAnsweredTestHandler == nil {
		unregistered = append(unregistered, "user.GetAnswersFromUserAnsweredTestHandler")
	}
	if o.UserGetAvailableEditQuestionsOfUserHandler == nil {
		unregistered = append(unregistered, "user.GetAvailableEditQuestionsOfUserHandler")
	}
	if o.UserGetAvailableQuestionsOfUserHandler == nil {
		unregistered = append(unregistered, "user.GetAvailableQuestionsOfUserHandler")
	}
	if o.ConfigurationGetCViewHandler == nil {
		unregistered = append(unregistered, "configuration.GetCViewHandler")
	}
	if o.ConfigurationGetCViewsHandler == nil {
		unregistered = append(unregistered, "configuration.GetCViewsHandler")
	}
	if o.PublishedTestGetCorrectedAnswersFromPublishedTestsHandler == nil {
		unregistered = append(unregistered, "published_test.GetCorrectedAnswersFromPublishedTestsHandler")
	}
	if o.UserGetCorrectedAnswersFromUserHandler == nil {
		unregistered = append(unregistered, "user.GetCorrectedAnswersFromUserHandler")
	}
	if o.UserGetCorrectedAnswersFromUserAnsweredTestHandler == nil {
		unregistered = append(unregistered, "user.GetCorrectedAnswersFromUserAnsweredTestHandler")
	}
	if o.QuestionGetEditQuestionsHandler == nil {
		unregistered = append(unregistered, "question.GetEditQuestionsHandler")
	}
	if o.TagGetEditQuestionsFromTagHandler == nil {
		unregistered = append(unregistered, "tag.GetEditQuestionsFromTagHandler")
	}
	if o.UserGetEditQuestionsOfUserHandler == nil {
		unregistered = append(unregistered, "user.GetEditQuestionsOfUserHandler")
	}
	if o.TagGetEditTestsFromTagHandler == nil {
		unregistered = append(unregistered, "tag.GetEditTestsFromTagHandler")
	}
	if o.UserGetEditTestsFromUserHandler == nil {
		unregistered = append(unregistered, "user.GetEditTestsFromUserHandler")
	}
	if o.ConfigurationGetEmailConfigurationHandler == nil {
		unregistered = append(unregistered, "configuration.GetEmailConfigurationHandler")
	}
	if o.UserGetFavoriteEditQuestionsHandler == nil {
		unregistered = append(unregistered, "user.GetFavoriteEditQuestionsHandler")
	}
	if o.UserGetFavoriteEditTestsHandler == nil {
		unregistered = append(unregistered, "user.GetFavoriteEditTestsHandler")
	}
	if o.UserGetFavoriteQuestionHandler == nil {
		unregistered = append(unregistered, "user.GetFavoriteQuestionHandler")
	}
	if o.UserGetFavoriteQuestionsHandler == nil {
		unregistered = append(unregistered, "user.GetFavoriteQuestionsHandler")
	}
	if o.UserGetFavoriteTestHandler == nil {
		unregistered = append(unregistered, "user.GetFavoriteTestHandler")
	}
	if o.UserGetFavoriteTestsHandler == nil {
		unregistered = append(unregistered, "user.GetFavoriteTestsHandler")
	}
	if o.TeamGetInvitedTestFromTeamHandler == nil {
		unregistered = append(unregistered, "team.GetInvitedTestFromTeamHandler")
	}
	if o.UserGetInvitedTestFromUserHandler == nil {
		unregistered = append(unregistered, "user.GetInvitedTestFromUserHandler")
	}
	if o.UserGetInvitedTestsByTeamsAndUserHandler == nil {
		unregistered = append(unregistered, "user.GetInvitedTestsByTeamsAndUserHandler")
	}
	if o.TeamGetInvitedTestsFromTeamHandler == nil {
		unregistered = append(unregistered, "team.GetInvitedTestsFromTeamHandler")
	}
	if o.UserGetInvitedTestsFromUserHandler == nil {
		unregistered = append(unregistered, "user.GetInvitedTestsFromUserHandler")
	}
	if o.TeamGetMemberHandler == nil {
		unregistered = append(unregistered, "team.GetMemberHandler")
	}
	if o.TeamGetMembersHandler == nil {
		unregistered = append(unregistered, "team.GetMembersHandler")
	}
	if o.UserGetOpenAnswersFromUserTestHandler == nil {
		unregistered = append(unregistered, "user.GetOpenAnswersFromUserTestHandler")
	}
	if o.QuestionGetOptionFromQuestionHandler == nil {
		unregistered = append(unregistered, "question.GetOptionFromQuestionHandler")
	}
	if o.PublishedTestGetOptionsFromPublishedQuestionHandler == nil {
		unregistered = append(unregistered, "published_test.GetOptionsFromPublishedQuestionHandler")
	}
	if o.QuestionGetOptionsFromQuestionHandler == nil {
		unregistered = append(unregistered, "question.GetOptionsFromQuestionHandler")
	}
	if o.UserGetPendingTestsFromUserHandler == nil {
		unregistered = append(unregistered, "user.GetPendingTestsFromUserHandler")
	}
	if o.QuestionGetPruebaFromQuestionHandler == nil {
		unregistered = append(unregistered, "question.GetPruebaFromQuestionHandler")
	}
	if o.QuestionGetPruebasFromQuestionHandler == nil {
		unregistered = append(unregistered, "question.GetPruebasFromQuestionHandler")
	}
	if o.UserGetPublicEditQuestionsOfUserHandler == nil {
		unregistered = append(unregistered, "user.GetPublicEditQuestionsOfUserHandler")
	}
	if o.TestGetPublicEditTestsHandler == nil {
		unregistered = append(unregistered, "test.GetPublicEditTestsHandler")
	}
	if o.UserGetPublicEditTestsFromUserHandler == nil {
		unregistered = append(unregistered, "user.GetPublicEditTestsFromUserHandler")
	}
	if o.PublishedTestGetPublicPublishedTestHandler == nil {
		unregistered = append(unregistered, "published_test.GetPublicPublishedTestHandler")
	}
	if o.PublishedTestGetPublicPublishedTestsHandler == nil {
		unregistered = append(unregistered, "published_test.GetPublicPublishedTestsHandler")
	}
	if o.UserGetPublicPublishedTestsFromUserHandler == nil {
		unregistered = append(unregistered, "user.GetPublicPublishedTestsFromUserHandler")
	}
	if o.TestGetPublicTestsHandler == nil {
		unregistered = append(unregistered, "test.GetPublicTestsHandler")
	}
	if o.PublishedTestGetPublishedTestHandler == nil {
		unregistered = append(unregistered, "published_test.GetPublishedTestHandler")
	}
	if o.TeamGetPublishedTestFromTeamHandler == nil {
		unregistered = append(unregistered, "team.GetPublishedTestFromTeamHandler")
	}
	if o.PublishedTestGetPublishedTestsHandler == nil {
		unregistered = append(unregistered, "published_test.GetPublishedTestsHandler")
	}
	if o.TeamGetPublishedTestsFromTeamHandler == nil {
		unregistered = append(unregistered, "team.GetPublishedTestsFromTeamHandler")
	}
	if o.TestGetPublishedTestsFromTestHandler == nil {
		unregistered = append(unregistered, "test.GetPublishedTestsFromTestHandler")
	}
	if o.UserGetPublishedTestsFromUserHandler == nil {
		unregistered = append(unregistered, "user.GetPublishedTestsFromUserHandler")
	}
	if o.QuestionGetQuestionHandler == nil {
		unregistered = append(unregistered, "question.GetQuestionHandler")
	}
	if o.AnswerGetQuestionAnswerFromAnswerHandler == nil {
		unregistered = append(unregistered, "answer.GetQuestionAnswerFromAnswerHandler")
	}
	if o.AnswerGetQuestionAnswersFromAnswerHandler == nil {
		unregistered = append(unregistered, "answer.GetQuestionAnswersFromAnswerHandler")
	}
	if o.AnswerGetQuestionAnswersFromAnswerAndQuestionHandler == nil {
		unregistered = append(unregistered, "answer.GetQuestionAnswersFromAnswerAndQuestionHandler")
	}
	if o.PublishedTestGetQuestionAnswersFromPublishedTestQuestionHandler == nil {
		unregistered = append(unregistered, "published_test.GetQuestionAnswersFromPublishedTestQuestionHandler")
	}
	if o.PublishedTestGetQuestionFromPublishedTestsHandler == nil {
		unregistered = append(unregistered, "published_test.GetQuestionFromPublishedTestsHandler")
	}
	if o.TeamGetQuestionFromTeamHandler == nil {
		unregistered = append(unregistered, "team.GetQuestionFromTeamHandler")
	}
	if o.TestGetQuestionFromTestHandler == nil {
		unregistered = append(unregistered, "test.GetQuestionFromTestHandler")
	}
	if o.UserGetQuestionFromUserHandler == nil {
		unregistered = append(unregistered, "user.GetQuestionFromUserHandler")
	}
	if o.QuestionGetQuestionsHandler == nil {
		unregistered = append(unregistered, "question.GetQuestionsHandler")
	}
	if o.AnswerGetQuestionsFromAnswerHandler == nil {
		unregistered = append(unregistered, "answer.GetQuestionsFromAnswerHandler")
	}
	if o.PublishedTestGetQuestionsFromPublishedTestsHandler == nil {
		unregistered = append(unregistered, "published_test.GetQuestionsFromPublishedTestsHandler")
	}
	if o.TagGetQuestionsFromTagHandler == nil {
		unregistered = append(unregistered, "tag.GetQuestionsFromTagHandler")
	}
	if o.TeamGetQuestionsFromTeamHandler == nil {
		unregistered = append(unregistered, "team.GetQuestionsFromTeamHandler")
	}
	if o.TestGetQuestionsFromTestHandler == nil {
		unregistered = append(unregistered, "test.GetQuestionsFromTestHandler")
	}
	if o.UserGetQuestionsOfUserHandler == nil {
		unregistered = append(unregistered, "user.GetQuestionsOfUserHandler")
	}
	if o.UserGetSharedEditTestsFromUserHandler == nil {
		unregistered = append(unregistered, "user.GetSharedEditTestsFromUserHandler")
	}
	if o.UserGetSharedPublishedTestsFromUserHandler == nil {
		unregistered = append(unregistered, "user.GetSharedPublishedTestsFromUserHandler")
	}
	if o.UserGetSharedQuestionFromUserHandler == nil {
		unregistered = append(unregistered, "user.GetSharedQuestionFromUserHandler")
	}
	if o.UserGetSharedQuestionsOfUserHandler == nil {
		unregistered = append(unregistered, "user.GetSharedQuestionsOfUserHandler")
	}
	if o.UserGetSharedTestFromUserHandler == nil {
		unregistered = append(unregistered, "user.GetSharedTestFromUserHandler")
	}
	if o.UserGetSharedTestsFromUserHandler == nil {
		unregistered = append(unregistered, "user.GetSharedTestsFromUserHandler")
	}
	if o.UserGetSolvableTestFromUserHandler == nil {
		unregistered = append(unregistered, "user.GetSolvableTestFromUserHandler")
	}
	if o.UserGetSolvableTestsFromUserHandler == nil {
		unregistered = append(unregistered, "user.GetSolvableTestsFromUserHandler")
	}
	if o.TagGetTagHandler == nil {
		unregistered = append(unregistered, "tag.GetTagHandler")
	}
	if o.PublishedTestGetTagFromPublishedTestHandler == nil {
		unregistered = append(unregistered, "published_test.GetTagFromPublishedTestHandler")
	}
	if o.QuestionGetTagFromQuestionHandler == nil {
		unregistered = append(unregistered, "question.GetTagFromQuestionHandler")
	}
	if o.TestGetTagFromTestHandler == nil {
		unregistered = append(unregistered, "test.GetTagFromTestHandler")
	}
	if o.TagGetTagsHandler == nil {
		unregistered = append(unregistered, "tag.GetTagsHandler")
	}
	if o.PublishedTestGetTagsFromPublishedQuestionHandler == nil {
		unregistered = append(unregistered, "published_test.GetTagsFromPublishedQuestionHandler")
	}
	if o.PublishedTestGetTagsFromPublishedTestHandler == nil {
		unregistered = append(unregistered, "published_test.GetTagsFromPublishedTestHandler")
	}
	if o.QuestionGetTagsFromQuestionHandler == nil {
		unregistered = append(unregistered, "question.GetTagsFromQuestionHandler")
	}
	if o.TestGetTagsFromTestHandler == nil {
		unregistered = append(unregistered, "test.GetTagsFromTestHandler")
	}
	if o.TeamGetTeamsHandler == nil {
		unregistered = append(unregistered, "team.GetTeamsHandler")
	}
	if o.PublishedTestGetTeamsFromPublishedTestHandler == nil {
		unregistered = append(unregistered, "published_test.GetTeamsFromPublishedTestHandler")
	}
	if o.QuestionGetTeamsFromQuestionHandler == nil {
		unregistered = append(unregistered, "question.GetTeamsFromQuestionHandler")
	}
	if o.UserGetTeamsOfUserHandler == nil {
		unregistered = append(unregistered, "user.GetTeamsOfUserHandler")
	}
	if o.TestGetTestHandler == nil {
		unregistered = append(unregistered, "test.GetTestHandler")
	}
	if o.TeamGetTestFromTeamHandler == nil {
		unregistered = append(unregistered, "team.GetTestFromTeamHandler")
	}
	if o.UserGetTestFromUserHandler == nil {
		unregistered = append(unregistered, "user.GetTestFromUserHandler")
	}
	if o.TagGetTestsFromTagHandler == nil {
		unregistered = append(unregistered, "tag.GetTestsFromTagHandler")
	}
	if o.TeamGetTestsFromTeamHandler == nil {
		unregistered = append(unregistered, "team.GetTestsFromTeamHandler")
	}
	if o.UserGetTestsFromUserHandler == nil {
		unregistered = append(unregistered, "user.GetTestsFromUserHandler")
	}
	if o.TiporolGetTipoRolHandler == nil {
		unregistered = append(unregistered, "tiporol.GetTipoRolHandler")
	}
	if o.TiporolGetTipoRolesHandler == nil {
		unregistered = append(unregistered, "tiporol.GetTipoRolesHandler")
	}
	if o.PublishedTestGetUncorrectedAnswersFromPublishedTestsHandler == nil {
		unregistered = append(unregistered, "published_test.GetUncorrectedAnswersFromPublishedTestsHandler")
	}
	if o.UserGetUncorrectedAnswersFromUserHandler == nil {
		unregistered = append(unregistered, "user.GetUncorrectedAnswersFromUserHandler")
	}
	if o.UserGetUncorrectedAnswersFromUserAnsweredTestHandler == nil {
		unregistered = append(unregistered, "user.GetUncorrectedAnswersFromUserAnsweredTestHandler")
	}
	if o.TeamGetUserFromTeamHandler == nil {
		unregistered = append(unregistered, "team.GetUserFromTeamHandler")
	}
	if o.UserGetUsersHandler == nil {
		unregistered = append(unregistered, "user.GetUsersHandler")
	}
	if o.PublishedTestGetUsersFromPublishedTestHandler == nil {
		unregistered = append(unregistered, "published_test.GetUsersFromPublishedTestHandler")
	}
	if o.TeamGetUsersFromTeamHandler == nil {
		unregistered = append(unregistered, "team.GetUsersFromTeamHandler")
	}
	if o.PublishedTestGetVisiblePruebasFromQuestionTestHandler == nil {
		unregistered = append(unregistered, "published_test.GetVisiblePruebasFromQuestionTestHandler")
	}
	if o.PublishedTestInviteTeamToPublishedTestHandler == nil {
		unregistered = append(unregistered, "published_test.InviteTeamToPublishedTestHandler")
	}
	if o.PublishedTestInviteUserToPublishedTestHandler == nil {
		unregistered = append(unregistered, "published_test.InviteUserToPublishedTestHandler")
	}
	if o.AuthLoginHandler == nil {
		unregistered = append(unregistered, "auth.LoginHandler")
	}
	if o.AuthLogoutHandler == nil {
		unregistered = append(unregistered, "auth.LogoutHandler")
	}
	if o.UserPostEmailUserHandler == nil {
		unregistered = append(unregistered, "user.PostEmailUserHandler")
	}
	if o.QuestionPostOptionHandler == nil {
		unregistered = append(unregistered, "question.PostOptionHandler")
	}
	if o.QuestionPostPruebaHandler == nil {
		unregistered = append(unregistered, "question.PostPruebaHandler")
	}
	if o.TestPostPublishedTestHandler == nil {
		unregistered = append(unregistered, "test.PostPublishedTestHandler")
	}
	if o.UserPostQuestionHandler == nil {
		unregistered = append(unregistered, "user.PostQuestionHandler")
	}
	if o.AnswerPostQuestionAnswerHandler == nil {
		unregistered = append(unregistered, "answer.PostQuestionAnswerHandler")
	}
	if o.TeamPostTeamHandler == nil {
		unregistered = append(unregistered, "team.PostTeamHandler")
	}
	if o.UserPostTestHandler == nil {
		unregistered = append(unregistered, "user.PostTestHandler")
	}
	if o.TiporolPostTipoRolHandler == nil {
		unregistered = append(unregistered, "tiporol.PostTipoRolHandler")
	}
	if o.ConfigurationPutCViewHandler == nil {
		unregistered = append(unregistered, "configuration.PutCViewHandler")
	}
	if o.ConfigurationPutEmailConfigurationHandler == nil {
		unregistered = append(unregistered, "configuration.PutEmailConfigurationHandler")
	}
	if o.QuestionPutOptionHandler == nil {
		unregistered = append(unregistered, "question.PutOptionHandler")
	}
	if o.QuestionPutPruebaHandler == nil {
		unregistered = append(unregistered, "question.PutPruebaHandler")
	}
	if o.PublishedTestPutPublishedTestHandler == nil {
		unregistered = append(unregistered, "published_test.PutPublishedTestHandler")
	}
	if o.QuestionPutQuestionHandler == nil {
		unregistered = append(unregistered, "question.PutQuestionHandler")
	}
	if o.AnswerPutQuestionAnswerFromAnswerHandler == nil {
		unregistered = append(unregistered, "answer.PutQuestionAnswerFromAnswerHandler")
	}
	if o.AnswerPutReviewHandler == nil {
		unregistered = append(unregistered, "answer.PutReviewHandler")
	}
	if o.TestPutTestHandler == nil {
		unregistered = append(unregistered, "test.PutTestHandler")
	}
	if o.TiporolPutTipoRolHandler == nil {
		unregistered = append(unregistered, "tiporol.PutTipoRolHandler")
	}
	if o.UserRegisterUserHandler == nil {
		unregistered = append(unregistered, "user.RegisterUserHandler")
	}
	if o.TestRemoveAdminTeamToTestHandler == nil {
		unregistered = append(unregistered, "test.RemoveAdminTeamToTestHandler")
	}
	if o.UserRemoveQuestionFavoriteHandler == nil {
		unregistered = append(unregistered, "user.RemoveQuestionFavoriteHandler")
	}
	if o.TestRemoveQuestionFromTestHandler == nil {
		unregistered = append(unregistered, "test.RemoveQuestionFromTestHandler")
	}
	if o.QuestionRemoveTagFromQuestionHandler == nil {
		unregistered = append(unregistered, "question.RemoveTagFromQuestionHandler")
	}
	if o.TestRemoveTagFromTestHandler == nil {
		unregistered = append(unregistered, "test.RemoveTagFromTestHandler")
	}
	if o.PublishedTestRemoveTeamToPublishedTestHandler == nil {
		unregistered = append(unregistered, "published_test.RemoveTeamToPublishedTestHandler")
	}
	if o.QuestionRemoveTeamToQuestionHandler == nil {
		unregistered = append(unregistered, "question.RemoveTeamToQuestionHandler")
	}
	if o.UserRemoveTestFavoriteHandler == nil {
		unregistered = append(unregistered, "user.RemoveTestFavoriteHandler")
	}
	if o.PublishedTestRemoveUserToPublishedTestHandler == nil {
		unregistered = append(unregistered, "published_test.RemoveUserToPublishedTestHandler")
	}
	if o.AnswerSetAnswerCorrectedHandler == nil {
		unregistered = append(unregistered, "answer.SetAnswerCorrectedHandler")
	}
	if o.AnswerSetAnswerNotCorrectedHandler == nil {
		unregistered = append(unregistered, "answer.SetAnswerNotCorrectedHandler")
	}
	if o.AnswerSetAnswerNotVisibleHandler == nil {
		unregistered = append(unregistered, "answer.SetAnswerNotVisibleHandler")
	}
	if o.AnswerSetAnswerVisibleHandler == nil {
		unregistered = append(unregistered, "answer.SetAnswerVisibleHandler")
	}
	if o.UserStartAnswerHandler == nil {
		unregistered = append(unregistered, "user.StartAnswerHandler")
	}
	if o.AuthCloseSessionsHandler == nil {
		unregistered = append(unregistered, "auth.CloseSessionsHandler")
	}
	if o.TeamDeleteTeamHandler == nil {
		unregistered = append(unregistered, "team.DeleteTeamHandler")
	}
	if o.UserDeleteUserHandler == nil {
		unregistered = append(unregistered, "user.DeleteUserHandler")
	}
	if o.TeamGetTeamHandler == nil {
		unregistered = append(unregistered, "team.GetTeamHandler")
	}
	if o.UserGetTeamFromUserHandler == nil {
		unregistered = append(unregistered, "user.GetTeamFromUserHandler")
	}
	if o.UserGetUserHandler == nil {
		unregistered = append(unregistered, "user.GetUserHandler")
	}
	if o.UserPostRecoveryTokenHandler == nil {
		unregistered = append(unregistered, "user.PostRecoveryTokenHandler")
	}
	if o.UserPutPasswordHandler == nil {
		unregistered = append(unregistered, "user.PutPasswordHandler")
	}
	if o.UserPutRoleHandler == nil {
		unregistered = append(unregistered, "user.PutRoleHandler")
	}
	if o.TeamPutTeamHandler == nil {
		unregistered = append(unregistered, "team.PutTeamHandler")
	}
	if o.UserPutUserHandler == nil {
		unregistered = append(unregistered, "user.PutUserHandler")
	}
	if o.UserRecoverPasswordHandler == nil {
		unregistered = append(unregistered, "user.RecoverPasswordHandler")
	}
	if o.AuthReloginHandler == nil {
		unregistered = append(unregistered, "auth.ReloginHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *DevAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *DevAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "BearerCookie":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, func(token string) (interface{}, error) {
				return o.BearerCookieAuth(token)
			})

		case "NoRegistered":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, func(token string) (interface{}, error) {
				return o.NoRegisteredAuth(token)
			})

		case "ReAuthCookie":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, func(token string) (interface{}, error) {
				return o.ReAuthCookieAuth(token)
			})

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *DevAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *DevAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *DevAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *DevAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the dev API
func (o *DevAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *DevAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/teams/{teamname}/admins/{username}"] = team.NewAddAdmin(o.context, o.TeamAddAdminHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tests/{testid}/adminTeams/{teamname}"] = test.NewAddAdminTeamToTest(o.context, o.TestAddAdminTeamToTestHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/teams/{teamname}/members/{username}"] = team.NewAddMember(o.context, o.TeamAddMemberHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{username}/favoriteQuestions/{questionid}"] = user.NewAddQuestionFavorite(o.context, o.UserAddQuestionFavoriteHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tests/{testid}/questions/{questionid}"] = test.NewAddQuestionToTest(o.context, o.TestAddQuestionToTestHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/questions/{questionid}/tags/{tag}"] = question.NewAddTagToQuestion(o.context, o.QuestionAddTagToQuestionHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tests/{testid}/tags/{tag}"] = test.NewAddTagToTest(o.context, o.TestAddTagToTestHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/questions/{questionid}/teams/{teamname}"] = question.NewAddTeamToQuestion(o.context, o.QuestionAddTeamToQuestionHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{username}/favoriteTests/{testid}"] = user.NewAddTestFavorite(o.context, o.UserAddTestFavoriteHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/{username}/questions/{questionid}/copiedQuestions"] = user.NewCopyQuestion(o.context, o.UserCopyQuestionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/{username}/tests/{testid}/copiedTests"] = user.NewCopyTest(o.context, o.UserCopyTestHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/questions/{questionid}/options/{optionindex}"] = question.NewDeleteOption(o.context, o.QuestionDeleteOptionHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/questions/{questionid}/pruebas/{pruebaid}"] = question.NewDeletePrueba(o.context, o.QuestionDeletePruebaHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/questions/{questionid}"] = question.NewDeleteQuestion(o.context, o.QuestionDeleteQuestionHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/answers/{answerid}/qanswers/{questionid}"] = answer.NewDeleteQuestionAnswerFromAnswer(o.context, o.AnswerDeleteQuestionAnswerFromAnswerHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/answers/{answerid}/qanswers/{questionid}/review"] = answer.NewDeleteReview(o.context, o.AnswerDeleteReviewHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/tests/{testid}"] = test.NewDeleteTest(o.context, o.TestDeleteTestHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/tipoRoles/{rolNombre}"] = tiporol.NewDeleteTipoRol(o.context, o.TiporolDeleteTipoRolHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/teams/{teamname}/users/{username}"] = team.NewDeleteUserFromTeam(o.context, o.TeamDeleteUserFromTeamHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/answers/{answerid}"] = answer.NewFinishAnswer(o.context, o.AnswerFinishAnswerHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamname}/admins/{username}"] = team.NewGetAdmin(o.context, o.TeamGetAdminHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tests/{testid}/adminTeams"] = test.NewGetAdminTeamsFromTest(o.context, o.TestGetAdminTeamsFromTestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamname}/admins"] = team.NewGetAdmins(o.context, o.TeamGetAdminsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/allEditQuestions"] = question.NewGetAllEditQuestions(o.context, o.QuestionGetAllEditQuestionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/editTests"] = test.NewGetAllEditTests(o.context, o.TestGetAllEditTestsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/allQuestions"] = question.NewGetAllQuestions(o.context, o.QuestionGetAllQuestionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tests"] = test.NewGetAllTests(o.context, o.TestGetAllTestsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/answers/{answerid}"] = answer.NewGetAnswer(o.context, o.AnswerGetAnswerHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/answers/{answerid}"] = user.NewGetAnswerFromUser(o.context, o.UserGetAnswerFromUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/answeredTests/{testid}"] = user.NewGetAnsweredTestFromUser(o.context, o.UserGetAnsweredTestFromUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/answeredTests"] = user.NewGetAnsweredTestsFromUser(o.context, o.UserGetAnsweredTestsFromUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/answers"] = answer.NewGetAnswers(o.context, o.AnswerGetAnswersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/publishedTests/{testid}/answers"] = published_test.NewGetAnswersFromPublishedTests(o.context, o.PublishedTestGetAnswersFromPublishedTestsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/answers"] = user.NewGetAnswersFromUser(o.context, o.UserGetAnswersFromUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/answeredTests/{testid}/answers"] = user.NewGetAnswersFromUserAnsweredTest(o.context, o.UserGetAnswersFromUserAnsweredTestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/availableEditQuestions"] = user.NewGetAvailableEditQuestionsOfUser(o.context, o.UserGetAvailableEditQuestionsOfUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/availableQuestions"] = user.NewGetAvailableQuestionsOfUser(o.context, o.UserGetAvailableQuestionsOfUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/customizedViews/{rolBase}"] = configuration.NewGetCView(o.context, o.ConfigurationGetCViewHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/customizedViews"] = configuration.NewGetCViews(o.context, o.ConfigurationGetCViewsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/publishedTests/{testid}/correctedAnswers"] = published_test.NewGetCorrectedAnswersFromPublishedTests(o.context, o.PublishedTestGetCorrectedAnswersFromPublishedTestsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/correctedAnswers"] = user.NewGetCorrectedAnswersFromUser(o.context, o.UserGetCorrectedAnswersFromUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/answeredTests/{testid}/finishedAnswers"] = user.NewGetCorrectedAnswersFromUserAnsweredTest(o.context, o.UserGetCorrectedAnswersFromUserAnsweredTestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/editQuestions"] = question.NewGetEditQuestions(o.context, o.QuestionGetEditQuestionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tags/{tag}/editQuestions"] = tag.NewGetEditQuestionsFromTag(o.context, o.TagGetEditQuestionsFromTagHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/editQuestions"] = user.NewGetEditQuestionsOfUser(o.context, o.UserGetEditQuestionsOfUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tags/{tag}/editTests"] = tag.NewGetEditTestsFromTag(o.context, o.TagGetEditTestsFromTagHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/editTests"] = user.NewGetEditTestsFromUser(o.context, o.UserGetEditTestsFromUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/emailConfiguration"] = configuration.NewGetEmailConfiguration(o.context, o.ConfigurationGetEmailConfigurationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/favoriteEditQuestions"] = user.NewGetFavoriteEditQuestions(o.context, o.UserGetFavoriteEditQuestionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/favoriteEditTests"] = user.NewGetFavoriteEditTests(o.context, o.UserGetFavoriteEditTestsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/favoriteQuestions/{questionid}"] = user.NewGetFavoriteQuestion(o.context, o.UserGetFavoriteQuestionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/favoriteQuestions"] = user.NewGetFavoriteQuestions(o.context, o.UserGetFavoriteQuestionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/favoriteTests/{testid}"] = user.NewGetFavoriteTest(o.context, o.UserGetFavoriteTestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/favoriteTests"] = user.NewGetFavoriteTests(o.context, o.UserGetFavoriteTestsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamname}/invitedTests/{testid}"] = team.NewGetInvitedTestFromTeam(o.context, o.TeamGetInvitedTestFromTeamHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/invitedTests/{testid}"] = user.NewGetInvitedTestFromUser(o.context, o.UserGetInvitedTestFromUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/invitedTestsByTeamsAndUser"] = user.NewGetInvitedTestsByTeamsAndUser(o.context, o.UserGetInvitedTestsByTeamsAndUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamname}/invitedTests"] = team.NewGetInvitedTestsFromTeam(o.context, o.TeamGetInvitedTestsFromTeamHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/invitedTests"] = user.NewGetInvitedTestsFromUser(o.context, o.UserGetInvitedTestsFromUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamname}/members/{username}"] = team.NewGetMember(o.context, o.TeamGetMemberHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamname}/members"] = team.NewGetMembers(o.context, o.TeamGetMembersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/solvableTests/{testid}/openAnswers"] = user.NewGetOpenAnswersFromUserTest(o.context, o.UserGetOpenAnswersFromUserTestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/questions/{questionid}/options/{optionindex}"] = question.NewGetOptionFromQuestion(o.context, o.QuestionGetOptionFromQuestionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/publishedTests/{testid}/questions/{questionid}/options"] = published_test.NewGetOptionsFromPublishedQuestion(o.context, o.PublishedTestGetOptionsFromPublishedQuestionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/questions/{questionid}/options"] = question.NewGetOptionsFromQuestion(o.context, o.QuestionGetOptionsFromQuestionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/pendingTests"] = user.NewGetPendingTestsFromUser(o.context, o.UserGetPendingTestsFromUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/questions/{questionid}/pruebas/{pruebaid}"] = question.NewGetPruebaFromQuestion(o.context, o.QuestionGetPruebaFromQuestionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/questions/{questionid}/pruebas"] = question.NewGetPruebasFromQuestion(o.context, o.QuestionGetPruebasFromQuestionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/publicEditQuestions"] = user.NewGetPublicEditQuestionsOfUser(o.context, o.UserGetPublicEditQuestionsOfUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/publicEditTests"] = test.NewGetPublicEditTests(o.context, o.TestGetPublicEditTestsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/publicEditTests"] = user.NewGetPublicEditTestsFromUser(o.context, o.UserGetPublicEditTestsFromUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/publicPublishedTests/{testid}"] = published_test.NewGetPublicPublishedTest(o.context, o.PublishedTestGetPublicPublishedTestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/publicPublishedTests"] = published_test.NewGetPublicPublishedTests(o.context, o.PublishedTestGetPublicPublishedTestsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/publicPublishedPTests"] = user.NewGetPublicPublishedTestsFromUser(o.context, o.UserGetPublicPublishedTestsFromUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/publicTests"] = test.NewGetPublicTests(o.context, o.TestGetPublicTestsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/publishedTests/{testid}"] = published_test.NewGetPublishedTest(o.context, o.PublishedTestGetPublishedTestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamname}/publishedTests/{testid}"] = team.NewGetPublishedTestFromTeam(o.context, o.TeamGetPublishedTestFromTeamHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/publishedTests"] = published_test.NewGetPublishedTests(o.context, o.PublishedTestGetPublishedTestsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamname}/publishedTests"] = team.NewGetPublishedTestsFromTeam(o.context, o.TeamGetPublishedTestsFromTeamHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tests/{testid}/publishedTests"] = test.NewGetPublishedTestsFromTest(o.context, o.TestGetPublishedTestsFromTestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/publishedTests"] = user.NewGetPublishedTestsFromUser(o.context, o.UserGetPublishedTestsFromUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/questions/{questionid}"] = question.NewGetQuestion(o.context, o.QuestionGetQuestionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/answers/{answerid}/qanswers/{questionid}"] = answer.NewGetQuestionAnswerFromAnswer(o.context, o.AnswerGetQuestionAnswerFromAnswerHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/answers/{answerid}/qanswers"] = answer.NewGetQuestionAnswersFromAnswer(o.context, o.AnswerGetQuestionAnswersFromAnswerHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/answers/{answerid}/questions/{questionid}/qanswers"] = answer.NewGetQuestionAnswersFromAnswerAndQuestion(o.context, o.AnswerGetQuestionAnswersFromAnswerAndQuestionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/publishedTests/{testid}/questions/{questionid}/qanswers"] = published_test.NewGetQuestionAnswersFromPublishedTestQuestion(o.context, o.PublishedTestGetQuestionAnswersFromPublishedTestQuestionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/publishedTests/{testid}/questions/{questionid}"] = published_test.NewGetQuestionFromPublishedTests(o.context, o.PublishedTestGetQuestionFromPublishedTestsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamname}/questions/{questionid}"] = team.NewGetQuestionFromTeam(o.context, o.TeamGetQuestionFromTeamHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tests/{testid}/questions/{questionid}"] = test.NewGetQuestionFromTest(o.context, o.TestGetQuestionFromTestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/questions/{questionid}"] = user.NewGetQuestionFromUser(o.context, o.UserGetQuestionFromUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/questions"] = question.NewGetQuestions(o.context, o.QuestionGetQuestionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/answers/{answerid}/questions"] = answer.NewGetQuestionsFromAnswer(o.context, o.AnswerGetQuestionsFromAnswerHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/publishedTests/{testid}/questions"] = published_test.NewGetQuestionsFromPublishedTests(o.context, o.PublishedTestGetQuestionsFromPublishedTestsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tags/{tag}/questions"] = tag.NewGetQuestionsFromTag(o.context, o.TagGetQuestionsFromTagHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamname}/questions"] = team.NewGetQuestionsFromTeam(o.context, o.TeamGetQuestionsFromTeamHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tests/{testid}/questions"] = test.NewGetQuestionsFromTest(o.context, o.TestGetQuestionsFromTestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/questions"] = user.NewGetQuestionsOfUser(o.context, o.UserGetQuestionsOfUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/sharedEditTests"] = user.NewGetSharedEditTestsFromUser(o.context, o.UserGetSharedEditTestsFromUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/sharedPublishedTests"] = user.NewGetSharedPublishedTestsFromUser(o.context, o.UserGetSharedPublishedTestsFromUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/sharedQuestions/{questionid}"] = user.NewGetSharedQuestionFromUser(o.context, o.UserGetSharedQuestionFromUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/sharedQuestions"] = user.NewGetSharedQuestionsOfUser(o.context, o.UserGetSharedQuestionsOfUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/sharedTests/{testid}"] = user.NewGetSharedTestFromUser(o.context, o.UserGetSharedTestFromUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/sharedTests"] = user.NewGetSharedTestsFromUser(o.context, o.UserGetSharedTestsFromUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/solvableTests/{testid}"] = user.NewGetSolvableTestFromUser(o.context, o.UserGetSolvableTestFromUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/solvableTests"] = user.NewGetSolvableTestsFromUser(o.context, o.UserGetSolvableTestsFromUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tags/{tag}"] = tag.NewGetTag(o.context, o.TagGetTagHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/publishedTests/{testid}/tags/{tag}"] = published_test.NewGetTagFromPublishedTest(o.context, o.PublishedTestGetTagFromPublishedTestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/questions/{questionid}/tags/{tag}"] = question.NewGetTagFromQuestion(o.context, o.QuestionGetTagFromQuestionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tests/{testid}/tags/{tag}"] = test.NewGetTagFromTest(o.context, o.TestGetTagFromTestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tags"] = tag.NewGetTags(o.context, o.TagGetTagsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/publishedTests/{testid}/questions/{questionid}/tags"] = published_test.NewGetTagsFromPublishedQuestion(o.context, o.PublishedTestGetTagsFromPublishedQuestionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/publishedTests/{testid}/tags"] = published_test.NewGetTagsFromPublishedTest(o.context, o.PublishedTestGetTagsFromPublishedTestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/questions/{questionid}/tags"] = question.NewGetTagsFromQuestion(o.context, o.QuestionGetTagsFromQuestionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tests/{testid}/tags"] = test.NewGetTagsFromTest(o.context, o.TestGetTagsFromTestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams"] = team.NewGetTeams(o.context, o.TeamGetTeamsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/publishedTests/{testid}/teams"] = published_test.NewGetTeamsFromPublishedTest(o.context, o.PublishedTestGetTeamsFromPublishedTestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/questions/{questionid}/teams"] = question.NewGetTeamsFromQuestion(o.context, o.QuestionGetTeamsFromQuestionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/teams"] = user.NewGetTeamsOfUser(o.context, o.UserGetTeamsOfUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tests/{testid}"] = test.NewGetTest(o.context, o.TestGetTestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamname}/tests/{testid}"] = team.NewGetTestFromTeam(o.context, o.TeamGetTestFromTeamHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/tests/{testid}"] = user.NewGetTestFromUser(o.context, o.UserGetTestFromUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tags/{tag}/tests"] = tag.NewGetTestsFromTag(o.context, o.TagGetTestsFromTagHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamname}/tests"] = team.NewGetTestsFromTeam(o.context, o.TeamGetTestsFromTeamHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/tests"] = user.NewGetTestsFromUser(o.context, o.UserGetTestsFromUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tipoRoles/{rolNombre}"] = tiporol.NewGetTipoRol(o.context, o.TiporolGetTipoRolHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tipoRoles"] = tiporol.NewGetTipoRoles(o.context, o.TiporolGetTipoRolesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/publishedTests/{testid}/uncorrectedAnswers"] = published_test.NewGetUncorrectedAnswersFromPublishedTests(o.context, o.PublishedTestGetUncorrectedAnswersFromPublishedTestsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/UncorrectedAnswers"] = user.NewGetUncorrectedAnswersFromUser(o.context, o.UserGetUncorrectedAnswersFromUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/answeredTests/{testid}/uncorrectedAnswers"] = user.NewGetUncorrectedAnswersFromUserAnsweredTest(o.context, o.UserGetUncorrectedAnswersFromUserAnsweredTestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamname}/users/{username}"] = team.NewGetUserFromTeam(o.context, o.TeamGetUserFromTeamHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users"] = user.NewGetUsers(o.context, o.UserGetUsersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/publishedTests/{testid}/users"] = published_test.NewGetUsersFromPublishedTest(o.context, o.PublishedTestGetUsersFromPublishedTestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamname}/users"] = team.NewGetUsersFromTeam(o.context, o.TeamGetUsersFromTeamHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/publishedTests/{testid}/questions/{questionid}/pruebas"] = published_test.NewGetVisiblePruebasFromQuestionTest(o.context, o.PublishedTestGetVisiblePruebasFromQuestionTestHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/publishedTests/{testid}/teams/{teamname}"] = published_test.NewInviteTeamToPublishedTest(o.context, o.PublishedTestInviteTeamToPublishedTestHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/publishedTests/{testid}/users/{username}"] = published_test.NewInviteUserToPublishedTest(o.context, o.PublishedTestInviteUserToPublishedTestHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/accesstokens"] = auth.NewLogin(o.context, o.AuthLoginHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/logout"] = auth.NewLogout(o.context, o.AuthLogoutHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/emailUsers"] = user.NewPostEmailUser(o.context, o.UserPostEmailUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/questions/{questionid}/options"] = question.NewPostOption(o.context, o.QuestionPostOptionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/questions/{questionid}/pruebas"] = question.NewPostPrueba(o.context, o.QuestionPostPruebaHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tests/{testid}/publishedTests"] = test.NewPostPublishedTest(o.context, o.TestPostPublishedTestHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/{username}/questions"] = user.NewPostQuestion(o.context, o.UserPostQuestionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/answers/{answerid}/qanswers"] = answer.NewPostQuestionAnswer(o.context, o.AnswerPostQuestionAnswerHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/{username}/teams"] = team.NewPostTeam(o.context, o.TeamPostTeamHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/{username}/tests"] = user.NewPostTest(o.context, o.UserPostTestHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tipoRoles"] = tiporol.NewPostTipoRol(o.context, o.TiporolPostTipoRolHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/customizedViews/{rolBase}"] = configuration.NewPutCView(o.context, o.ConfigurationPutCViewHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/emailConfiguration"] = configuration.NewPutEmailConfiguration(o.context, o.ConfigurationPutEmailConfigurationHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/questions/{questionid}/options/{optionindex}"] = question.NewPutOption(o.context, o.QuestionPutOptionHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/questions/{questionid}/pruebas/{pruebaid}"] = question.NewPutPrueba(o.context, o.QuestionPutPruebaHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/publishedTests/{testid}"] = published_test.NewPutPublishedTest(o.context, o.PublishedTestPutPublishedTestHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/questions/{questionid}"] = question.NewPutQuestion(o.context, o.QuestionPutQuestionHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/answers/{answerid}/qanswers/{questionid}"] = answer.NewPutQuestionAnswerFromAnswer(o.context, o.AnswerPutQuestionAnswerFromAnswerHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/answers/{answerid}/qanswers/{questionid}/review"] = answer.NewPutReview(o.context, o.AnswerPutReviewHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tests/{testid}"] = test.NewPutTest(o.context, o.TestPutTestHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tipoRoles/{rolNombre}"] = tiporol.NewPutTipoRol(o.context, o.TiporolPutTipoRolHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users"] = user.NewRegisterUser(o.context, o.UserRegisterUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/tests/{testid}/adminTeams/{teamname}"] = test.NewRemoveAdminTeamToTest(o.context, o.TestRemoveAdminTeamToTestHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{username}/favoriteQuestions/{questionid}"] = user.NewRemoveQuestionFavorite(o.context, o.UserRemoveQuestionFavoriteHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/tests/{testid}/questions/{questionid}"] = test.NewRemoveQuestionFromTest(o.context, o.TestRemoveQuestionFromTestHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/questions/{questionid}/tags/{tag}"] = question.NewRemoveTagFromQuestion(o.context, o.QuestionRemoveTagFromQuestionHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/tests/{testid}/tags/{tag}"] = test.NewRemoveTagFromTest(o.context, o.TestRemoveTagFromTestHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/publishedTests/{testid}/teams/{teamname}"] = published_test.NewRemoveTeamToPublishedTest(o.context, o.PublishedTestRemoveTeamToPublishedTestHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/questions/{questionid}/teams/{teamname}"] = question.NewRemoveTeamToQuestion(o.context, o.QuestionRemoveTeamToQuestionHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{username}/favoriteTests/{testid}"] = user.NewRemoveTestFavorite(o.context, o.UserRemoveTestFavoriteHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/publishedTests/{testid}/users/{username}"] = published_test.NewRemoveUserToPublishedTest(o.context, o.PublishedTestRemoveUserToPublishedTestHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/answers/{answerid}/corrected"] = answer.NewSetAnswerCorrected(o.context, o.AnswerSetAnswerCorrectedHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/answers/{answerid}/corrected"] = answer.NewSetAnswerNotCorrected(o.context, o.AnswerSetAnswerNotCorrectedHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/answers/{answerid}/visible"] = answer.NewSetAnswerNotVisible(o.context, o.AnswerSetAnswerNotVisibleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/answers/{answerid}/visible"] = answer.NewSetAnswerVisible(o.context, o.AnswerSetAnswerVisibleHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/{username}/solvableTests/{testid}/answers"] = user.NewStartAnswer(o.context, o.UserStartAnswerHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/accesstokens/{username}"] = auth.NewCloseSessions(o.context, o.AuthCloseSessionsHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/teams/{teamname}"] = team.NewDeleteTeam(o.context, o.TeamDeleteTeamHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{username}"] = user.NewDeleteUser(o.context, o.UserDeleteUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{teamname}"] = team.NewGetTeam(o.context, o.TeamGetTeamHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}/teams/{teamname}"] = user.NewGetTeamFromUser(o.context, o.UserGetTeamFromUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{username}"] = user.NewGetUser(o.context, o.UserGetUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/{username}/passRecoveryTokens"] = user.NewPostRecoveryToken(o.context, o.UserPostRecoveryTokenHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{username}/password"] = user.NewPutPassword(o.context, o.UserPutPasswordHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{username}/role"] = user.NewPutRole(o.context, o.UserPutRoleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/teams/{teamname}"] = team.NewPutTeam(o.context, o.TeamPutTeamHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{username}"] = user.NewPutUser(o.context, o.UserPutUserHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{username}/recoverPassword"] = user.NewRecoverPassword(o.context, o.UserRecoverPasswordHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/relogin"] = auth.NewRelogin(o.context, o.AuthReloginHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *DevAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *DevAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *DevAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *DevAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *DevAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
