// Code generated by go-swagger; DO NOT EDIT.

package published_test

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// GetQuestionAnswersFromPublishedTestQuestionOKCode is the HTTP code returned for type GetQuestionAnswersFromPublishedTestQuestionOK
const GetQuestionAnswersFromPublishedTestQuestionOKCode int = 200

/*GetQuestionAnswersFromPublishedTestQuestionOK QuestionAnswers found

swagger:response getQuestionAnswersFromPublishedTestQuestionOK
*/
type GetQuestionAnswersFromPublishedTestQuestionOK struct {

	/*
	  In: Body
	*/
	Payload []*models.QuestionAnswer `json:"body,omitempty"`
}

// NewGetQuestionAnswersFromPublishedTestQuestionOK creates GetQuestionAnswersFromPublishedTestQuestionOK with default headers values
func NewGetQuestionAnswersFromPublishedTestQuestionOK() *GetQuestionAnswersFromPublishedTestQuestionOK {

	return &GetQuestionAnswersFromPublishedTestQuestionOK{}
}

// WithPayload adds the payload to the get question answers from published test question o k response
func (o *GetQuestionAnswersFromPublishedTestQuestionOK) WithPayload(payload []*models.QuestionAnswer) *GetQuestionAnswersFromPublishedTestQuestionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get question answers from published test question o k response
func (o *GetQuestionAnswersFromPublishedTestQuestionOK) SetPayload(payload []*models.QuestionAnswer) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuestionAnswersFromPublishedTestQuestionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.QuestionAnswer, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetQuestionAnswersFromPublishedTestQuestionBadRequestCode is the HTTP code returned for type GetQuestionAnswersFromPublishedTestQuestionBadRequest
const GetQuestionAnswersFromPublishedTestQuestionBadRequestCode int = 400

/*GetQuestionAnswersFromPublishedTestQuestionBadRequest Incorrect Request, or invalida data

swagger:response getQuestionAnswersFromPublishedTestQuestionBadRequest
*/
type GetQuestionAnswersFromPublishedTestQuestionBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetQuestionAnswersFromPublishedTestQuestionBadRequest creates GetQuestionAnswersFromPublishedTestQuestionBadRequest with default headers values
func NewGetQuestionAnswersFromPublishedTestQuestionBadRequest() *GetQuestionAnswersFromPublishedTestQuestionBadRequest {

	return &GetQuestionAnswersFromPublishedTestQuestionBadRequest{}
}

// WithPayload adds the payload to the get question answers from published test question bad request response
func (o *GetQuestionAnswersFromPublishedTestQuestionBadRequest) WithPayload(payload *models.Error) *GetQuestionAnswersFromPublishedTestQuestionBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get question answers from published test question bad request response
func (o *GetQuestionAnswersFromPublishedTestQuestionBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuestionAnswersFromPublishedTestQuestionBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetQuestionAnswersFromPublishedTestQuestionForbiddenCode is the HTTP code returned for type GetQuestionAnswersFromPublishedTestQuestionForbidden
const GetQuestionAnswersFromPublishedTestQuestionForbiddenCode int = 403

/*GetQuestionAnswersFromPublishedTestQuestionForbidden Not authorized to this content

swagger:response getQuestionAnswersFromPublishedTestQuestionForbidden
*/
type GetQuestionAnswersFromPublishedTestQuestionForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetQuestionAnswersFromPublishedTestQuestionForbidden creates GetQuestionAnswersFromPublishedTestQuestionForbidden with default headers values
func NewGetQuestionAnswersFromPublishedTestQuestionForbidden() *GetQuestionAnswersFromPublishedTestQuestionForbidden {

	return &GetQuestionAnswersFromPublishedTestQuestionForbidden{}
}

// WithPayload adds the payload to the get question answers from published test question forbidden response
func (o *GetQuestionAnswersFromPublishedTestQuestionForbidden) WithPayload(payload *models.Error) *GetQuestionAnswersFromPublishedTestQuestionForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get question answers from published test question forbidden response
func (o *GetQuestionAnswersFromPublishedTestQuestionForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuestionAnswersFromPublishedTestQuestionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetQuestionAnswersFromPublishedTestQuestionGoneCode is the HTTP code returned for type GetQuestionAnswersFromPublishedTestQuestionGone
const GetQuestionAnswersFromPublishedTestQuestionGoneCode int = 410

/*GetQuestionAnswersFromPublishedTestQuestionGone That user (password and name) does not exist

swagger:response getQuestionAnswersFromPublishedTestQuestionGone
*/
type GetQuestionAnswersFromPublishedTestQuestionGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetQuestionAnswersFromPublishedTestQuestionGone creates GetQuestionAnswersFromPublishedTestQuestionGone with default headers values
func NewGetQuestionAnswersFromPublishedTestQuestionGone() *GetQuestionAnswersFromPublishedTestQuestionGone {

	return &GetQuestionAnswersFromPublishedTestQuestionGone{}
}

// WithPayload adds the payload to the get question answers from published test question gone response
func (o *GetQuestionAnswersFromPublishedTestQuestionGone) WithPayload(payload *models.Error) *GetQuestionAnswersFromPublishedTestQuestionGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get question answers from published test question gone response
func (o *GetQuestionAnswersFromPublishedTestQuestionGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuestionAnswersFromPublishedTestQuestionGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetQuestionAnswersFromPublishedTestQuestionInternalServerErrorCode is the HTTP code returned for type GetQuestionAnswersFromPublishedTestQuestionInternalServerError
const GetQuestionAnswersFromPublishedTestQuestionInternalServerErrorCode int = 500

/*GetQuestionAnswersFromPublishedTestQuestionInternalServerError Internal error

swagger:response getQuestionAnswersFromPublishedTestQuestionInternalServerError
*/
type GetQuestionAnswersFromPublishedTestQuestionInternalServerError struct {
}

// NewGetQuestionAnswersFromPublishedTestQuestionInternalServerError creates GetQuestionAnswersFromPublishedTestQuestionInternalServerError with default headers values
func NewGetQuestionAnswersFromPublishedTestQuestionInternalServerError() *GetQuestionAnswersFromPublishedTestQuestionInternalServerError {

	return &GetQuestionAnswersFromPublishedTestQuestionInternalServerError{}
}

// WriteResponse to the client
func (o *GetQuestionAnswersFromPublishedTestQuestionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
