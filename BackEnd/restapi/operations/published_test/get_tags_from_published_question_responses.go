// Code generated by go-swagger; DO NOT EDIT.

package published_test

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// GetTagsFromPublishedQuestionOKCode is the HTTP code returned for type GetTagsFromPublishedQuestionOK
const GetTagsFromPublishedQuestionOKCode int = 200

/*GetTagsFromPublishedQuestionOK tags found

swagger:response getTagsFromPublishedQuestionOK
*/
type GetTagsFromPublishedQuestionOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Tag `json:"body,omitempty"`
}

// NewGetTagsFromPublishedQuestionOK creates GetTagsFromPublishedQuestionOK with default headers values
func NewGetTagsFromPublishedQuestionOK() *GetTagsFromPublishedQuestionOK {

	return &GetTagsFromPublishedQuestionOK{}
}

// WithPayload adds the payload to the get tags from published question o k response
func (o *GetTagsFromPublishedQuestionOK) WithPayload(payload []*models.Tag) *GetTagsFromPublishedQuestionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get tags from published question o k response
func (o *GetTagsFromPublishedQuestionOK) SetPayload(payload []*models.Tag) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTagsFromPublishedQuestionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Tag, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetTagsFromPublishedQuestionBadRequestCode is the HTTP code returned for type GetTagsFromPublishedQuestionBadRequest
const GetTagsFromPublishedQuestionBadRequestCode int = 400

/*GetTagsFromPublishedQuestionBadRequest Incorrect Request, or invalida data

swagger:response getTagsFromPublishedQuestionBadRequest
*/
type GetTagsFromPublishedQuestionBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTagsFromPublishedQuestionBadRequest creates GetTagsFromPublishedQuestionBadRequest with default headers values
func NewGetTagsFromPublishedQuestionBadRequest() *GetTagsFromPublishedQuestionBadRequest {

	return &GetTagsFromPublishedQuestionBadRequest{}
}

// WithPayload adds the payload to the get tags from published question bad request response
func (o *GetTagsFromPublishedQuestionBadRequest) WithPayload(payload *models.Error) *GetTagsFromPublishedQuestionBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get tags from published question bad request response
func (o *GetTagsFromPublishedQuestionBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTagsFromPublishedQuestionBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTagsFromPublishedQuestionForbiddenCode is the HTTP code returned for type GetTagsFromPublishedQuestionForbidden
const GetTagsFromPublishedQuestionForbiddenCode int = 403

/*GetTagsFromPublishedQuestionForbidden Not authorized to this content

swagger:response getTagsFromPublishedQuestionForbidden
*/
type GetTagsFromPublishedQuestionForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTagsFromPublishedQuestionForbidden creates GetTagsFromPublishedQuestionForbidden with default headers values
func NewGetTagsFromPublishedQuestionForbidden() *GetTagsFromPublishedQuestionForbidden {

	return &GetTagsFromPublishedQuestionForbidden{}
}

// WithPayload adds the payload to the get tags from published question forbidden response
func (o *GetTagsFromPublishedQuestionForbidden) WithPayload(payload *models.Error) *GetTagsFromPublishedQuestionForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get tags from published question forbidden response
func (o *GetTagsFromPublishedQuestionForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTagsFromPublishedQuestionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTagsFromPublishedQuestionGoneCode is the HTTP code returned for type GetTagsFromPublishedQuestionGone
const GetTagsFromPublishedQuestionGoneCode int = 410

/*GetTagsFromPublishedQuestionGone That user (password and name) does not exist

swagger:response getTagsFromPublishedQuestionGone
*/
type GetTagsFromPublishedQuestionGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTagsFromPublishedQuestionGone creates GetTagsFromPublishedQuestionGone with default headers values
func NewGetTagsFromPublishedQuestionGone() *GetTagsFromPublishedQuestionGone {

	return &GetTagsFromPublishedQuestionGone{}
}

// WithPayload adds the payload to the get tags from published question gone response
func (o *GetTagsFromPublishedQuestionGone) WithPayload(payload *models.Error) *GetTagsFromPublishedQuestionGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get tags from published question gone response
func (o *GetTagsFromPublishedQuestionGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTagsFromPublishedQuestionGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTagsFromPublishedQuestionInternalServerErrorCode is the HTTP code returned for type GetTagsFromPublishedQuestionInternalServerError
const GetTagsFromPublishedQuestionInternalServerErrorCode int = 500

/*GetTagsFromPublishedQuestionInternalServerError Internal error

swagger:response getTagsFromPublishedQuestionInternalServerError
*/
type GetTagsFromPublishedQuestionInternalServerError struct {
}

// NewGetTagsFromPublishedQuestionInternalServerError creates GetTagsFromPublishedQuestionInternalServerError with default headers values
func NewGetTagsFromPublishedQuestionInternalServerError() *GetTagsFromPublishedQuestionInternalServerError {

	return &GetTagsFromPublishedQuestionInternalServerError{}
}

// WriteResponse to the client
func (o *GetTagsFromPublishedQuestionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
