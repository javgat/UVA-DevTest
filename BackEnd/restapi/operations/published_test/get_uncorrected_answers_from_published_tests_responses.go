// Code generated by go-swagger; DO NOT EDIT.

package published_test

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// GetUncorrectedAnswersFromPublishedTestsOKCode is the HTTP code returned for type GetUncorrectedAnswersFromPublishedTestsOK
const GetUncorrectedAnswersFromPublishedTestsOKCode int = 200

/*GetUncorrectedAnswersFromPublishedTestsOK Answers found

swagger:response getUncorrectedAnswersFromPublishedTestsOK
*/
type GetUncorrectedAnswersFromPublishedTestsOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Answer `json:"body,omitempty"`
}

// NewGetUncorrectedAnswersFromPublishedTestsOK creates GetUncorrectedAnswersFromPublishedTestsOK with default headers values
func NewGetUncorrectedAnswersFromPublishedTestsOK() *GetUncorrectedAnswersFromPublishedTestsOK {

	return &GetUncorrectedAnswersFromPublishedTestsOK{}
}

// WithPayload adds the payload to the get uncorrected answers from published tests o k response
func (o *GetUncorrectedAnswersFromPublishedTestsOK) WithPayload(payload []*models.Answer) *GetUncorrectedAnswersFromPublishedTestsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get uncorrected answers from published tests o k response
func (o *GetUncorrectedAnswersFromPublishedTestsOK) SetPayload(payload []*models.Answer) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUncorrectedAnswersFromPublishedTestsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Answer, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetUncorrectedAnswersFromPublishedTestsBadRequestCode is the HTTP code returned for type GetUncorrectedAnswersFromPublishedTestsBadRequest
const GetUncorrectedAnswersFromPublishedTestsBadRequestCode int = 400

/*GetUncorrectedAnswersFromPublishedTestsBadRequest Incorrect Request, or invalida data

swagger:response getUncorrectedAnswersFromPublishedTestsBadRequest
*/
type GetUncorrectedAnswersFromPublishedTestsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetUncorrectedAnswersFromPublishedTestsBadRequest creates GetUncorrectedAnswersFromPublishedTestsBadRequest with default headers values
func NewGetUncorrectedAnswersFromPublishedTestsBadRequest() *GetUncorrectedAnswersFromPublishedTestsBadRequest {

	return &GetUncorrectedAnswersFromPublishedTestsBadRequest{}
}

// WithPayload adds the payload to the get uncorrected answers from published tests bad request response
func (o *GetUncorrectedAnswersFromPublishedTestsBadRequest) WithPayload(payload *models.Error) *GetUncorrectedAnswersFromPublishedTestsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get uncorrected answers from published tests bad request response
func (o *GetUncorrectedAnswersFromPublishedTestsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUncorrectedAnswersFromPublishedTestsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUncorrectedAnswersFromPublishedTestsForbiddenCode is the HTTP code returned for type GetUncorrectedAnswersFromPublishedTestsForbidden
const GetUncorrectedAnswersFromPublishedTestsForbiddenCode int = 403

/*GetUncorrectedAnswersFromPublishedTestsForbidden Not authorized to this content

swagger:response getUncorrectedAnswersFromPublishedTestsForbidden
*/
type GetUncorrectedAnswersFromPublishedTestsForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetUncorrectedAnswersFromPublishedTestsForbidden creates GetUncorrectedAnswersFromPublishedTestsForbidden with default headers values
func NewGetUncorrectedAnswersFromPublishedTestsForbidden() *GetUncorrectedAnswersFromPublishedTestsForbidden {

	return &GetUncorrectedAnswersFromPublishedTestsForbidden{}
}

// WithPayload adds the payload to the get uncorrected answers from published tests forbidden response
func (o *GetUncorrectedAnswersFromPublishedTestsForbidden) WithPayload(payload *models.Error) *GetUncorrectedAnswersFromPublishedTestsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get uncorrected answers from published tests forbidden response
func (o *GetUncorrectedAnswersFromPublishedTestsForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUncorrectedAnswersFromPublishedTestsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUncorrectedAnswersFromPublishedTestsGoneCode is the HTTP code returned for type GetUncorrectedAnswersFromPublishedTestsGone
const GetUncorrectedAnswersFromPublishedTestsGoneCode int = 410

/*GetUncorrectedAnswersFromPublishedTestsGone That resource does not exist

swagger:response getUncorrectedAnswersFromPublishedTestsGone
*/
type GetUncorrectedAnswersFromPublishedTestsGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetUncorrectedAnswersFromPublishedTestsGone creates GetUncorrectedAnswersFromPublishedTestsGone with default headers values
func NewGetUncorrectedAnswersFromPublishedTestsGone() *GetUncorrectedAnswersFromPublishedTestsGone {

	return &GetUncorrectedAnswersFromPublishedTestsGone{}
}

// WithPayload adds the payload to the get uncorrected answers from published tests gone response
func (o *GetUncorrectedAnswersFromPublishedTestsGone) WithPayload(payload *models.Error) *GetUncorrectedAnswersFromPublishedTestsGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get uncorrected answers from published tests gone response
func (o *GetUncorrectedAnswersFromPublishedTestsGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUncorrectedAnswersFromPublishedTestsGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUncorrectedAnswersFromPublishedTestsInternalServerErrorCode is the HTTP code returned for type GetUncorrectedAnswersFromPublishedTestsInternalServerError
const GetUncorrectedAnswersFromPublishedTestsInternalServerErrorCode int = 500

/*GetUncorrectedAnswersFromPublishedTestsInternalServerError Internal error

swagger:response getUncorrectedAnswersFromPublishedTestsInternalServerError
*/
type GetUncorrectedAnswersFromPublishedTestsInternalServerError struct {
}

// NewGetUncorrectedAnswersFromPublishedTestsInternalServerError creates GetUncorrectedAnswersFromPublishedTestsInternalServerError with default headers values
func NewGetUncorrectedAnswersFromPublishedTestsInternalServerError() *GetUncorrectedAnswersFromPublishedTestsInternalServerError {

	return &GetUncorrectedAnswersFromPublishedTestsInternalServerError{}
}

// WriteResponse to the client
func (o *GetUncorrectedAnswersFromPublishedTestsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
