// Code generated by go-swagger; DO NOT EDIT.

package published_test

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// InviteTeamToPublishedTestOKCode is the HTTP code returned for type InviteTeamToPublishedTestOK
const InviteTeamToPublishedTestOKCode int = 200

/*InviteTeamToPublishedTestOK team invited

swagger:response inviteTeamToPublishedTestOK
*/
type InviteTeamToPublishedTestOK struct {
}

// NewInviteTeamToPublishedTestOK creates InviteTeamToPublishedTestOK with default headers values
func NewInviteTeamToPublishedTestOK() *InviteTeamToPublishedTestOK {

	return &InviteTeamToPublishedTestOK{}
}

// WriteResponse to the client
func (o *InviteTeamToPublishedTestOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// InviteTeamToPublishedTestBadRequestCode is the HTTP code returned for type InviteTeamToPublishedTestBadRequest
const InviteTeamToPublishedTestBadRequestCode int = 400

/*InviteTeamToPublishedTestBadRequest Incorrect Request, or invalida data

swagger:response inviteTeamToPublishedTestBadRequest
*/
type InviteTeamToPublishedTestBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewInviteTeamToPublishedTestBadRequest creates InviteTeamToPublishedTestBadRequest with default headers values
func NewInviteTeamToPublishedTestBadRequest() *InviteTeamToPublishedTestBadRequest {

	return &InviteTeamToPublishedTestBadRequest{}
}

// WithPayload adds the payload to the invite team to published test bad request response
func (o *InviteTeamToPublishedTestBadRequest) WithPayload(payload *models.Error) *InviteTeamToPublishedTestBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the invite team to published test bad request response
func (o *InviteTeamToPublishedTestBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *InviteTeamToPublishedTestBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// InviteTeamToPublishedTestForbiddenCode is the HTTP code returned for type InviteTeamToPublishedTestForbidden
const InviteTeamToPublishedTestForbiddenCode int = 403

/*InviteTeamToPublishedTestForbidden Not authorized to this content

swagger:response inviteTeamToPublishedTestForbidden
*/
type InviteTeamToPublishedTestForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewInviteTeamToPublishedTestForbidden creates InviteTeamToPublishedTestForbidden with default headers values
func NewInviteTeamToPublishedTestForbidden() *InviteTeamToPublishedTestForbidden {

	return &InviteTeamToPublishedTestForbidden{}
}

// WithPayload adds the payload to the invite team to published test forbidden response
func (o *InviteTeamToPublishedTestForbidden) WithPayload(payload *models.Error) *InviteTeamToPublishedTestForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the invite team to published test forbidden response
func (o *InviteTeamToPublishedTestForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *InviteTeamToPublishedTestForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// InviteTeamToPublishedTestGoneCode is the HTTP code returned for type InviteTeamToPublishedTestGone
const InviteTeamToPublishedTestGoneCode int = 410

/*InviteTeamToPublishedTestGone That user (password and name) does not exist

swagger:response inviteTeamToPublishedTestGone
*/
type InviteTeamToPublishedTestGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewInviteTeamToPublishedTestGone creates InviteTeamToPublishedTestGone with default headers values
func NewInviteTeamToPublishedTestGone() *InviteTeamToPublishedTestGone {

	return &InviteTeamToPublishedTestGone{}
}

// WithPayload adds the payload to the invite team to published test gone response
func (o *InviteTeamToPublishedTestGone) WithPayload(payload *models.Error) *InviteTeamToPublishedTestGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the invite team to published test gone response
func (o *InviteTeamToPublishedTestGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *InviteTeamToPublishedTestGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// InviteTeamToPublishedTestInternalServerErrorCode is the HTTP code returned for type InviteTeamToPublishedTestInternalServerError
const InviteTeamToPublishedTestInternalServerErrorCode int = 500

/*InviteTeamToPublishedTestInternalServerError Internal error

swagger:response inviteTeamToPublishedTestInternalServerError
*/
type InviteTeamToPublishedTestInternalServerError struct {
}

// NewInviteTeamToPublishedTestInternalServerError creates InviteTeamToPublishedTestInternalServerError with default headers values
func NewInviteTeamToPublishedTestInternalServerError() *InviteTeamToPublishedTestInternalServerError {

	return &InviteTeamToPublishedTestInternalServerError{}
}

// WriteResponse to the client
func (o *InviteTeamToPublishedTestInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
