// Code generated by go-swagger; DO NOT EDIT.

package published_test

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// InviteUserToPublishedTestOKCode is the HTTP code returned for type InviteUserToPublishedTestOK
const InviteUserToPublishedTestOKCode int = 200

/*InviteUserToPublishedTestOK user invited

swagger:response inviteUserToPublishedTestOK
*/
type InviteUserToPublishedTestOK struct {
}

// NewInviteUserToPublishedTestOK creates InviteUserToPublishedTestOK with default headers values
func NewInviteUserToPublishedTestOK() *InviteUserToPublishedTestOK {

	return &InviteUserToPublishedTestOK{}
}

// WriteResponse to the client
func (o *InviteUserToPublishedTestOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// InviteUserToPublishedTestBadRequestCode is the HTTP code returned for type InviteUserToPublishedTestBadRequest
const InviteUserToPublishedTestBadRequestCode int = 400

/*InviteUserToPublishedTestBadRequest Incorrect Request, or invalida data

swagger:response inviteUserToPublishedTestBadRequest
*/
type InviteUserToPublishedTestBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewInviteUserToPublishedTestBadRequest creates InviteUserToPublishedTestBadRequest with default headers values
func NewInviteUserToPublishedTestBadRequest() *InviteUserToPublishedTestBadRequest {

	return &InviteUserToPublishedTestBadRequest{}
}

// WithPayload adds the payload to the invite user to published test bad request response
func (o *InviteUserToPublishedTestBadRequest) WithPayload(payload *models.Error) *InviteUserToPublishedTestBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the invite user to published test bad request response
func (o *InviteUserToPublishedTestBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *InviteUserToPublishedTestBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// InviteUserToPublishedTestForbiddenCode is the HTTP code returned for type InviteUserToPublishedTestForbidden
const InviteUserToPublishedTestForbiddenCode int = 403

/*InviteUserToPublishedTestForbidden Not authorized to this content

swagger:response inviteUserToPublishedTestForbidden
*/
type InviteUserToPublishedTestForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewInviteUserToPublishedTestForbidden creates InviteUserToPublishedTestForbidden with default headers values
func NewInviteUserToPublishedTestForbidden() *InviteUserToPublishedTestForbidden {

	return &InviteUserToPublishedTestForbidden{}
}

// WithPayload adds the payload to the invite user to published test forbidden response
func (o *InviteUserToPublishedTestForbidden) WithPayload(payload *models.Error) *InviteUserToPublishedTestForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the invite user to published test forbidden response
func (o *InviteUserToPublishedTestForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *InviteUserToPublishedTestForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// InviteUserToPublishedTestGoneCode is the HTTP code returned for type InviteUserToPublishedTestGone
const InviteUserToPublishedTestGoneCode int = 410

/*InviteUserToPublishedTestGone That user (password and name) does not exist

swagger:response inviteUserToPublishedTestGone
*/
type InviteUserToPublishedTestGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewInviteUserToPublishedTestGone creates InviteUserToPublishedTestGone with default headers values
func NewInviteUserToPublishedTestGone() *InviteUserToPublishedTestGone {

	return &InviteUserToPublishedTestGone{}
}

// WithPayload adds the payload to the invite user to published test gone response
func (o *InviteUserToPublishedTestGone) WithPayload(payload *models.Error) *InviteUserToPublishedTestGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the invite user to published test gone response
func (o *InviteUserToPublishedTestGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *InviteUserToPublishedTestGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// InviteUserToPublishedTestInternalServerErrorCode is the HTTP code returned for type InviteUserToPublishedTestInternalServerError
const InviteUserToPublishedTestInternalServerErrorCode int = 500

/*InviteUserToPublishedTestInternalServerError Internal error

swagger:response inviteUserToPublishedTestInternalServerError
*/
type InviteUserToPublishedTestInternalServerError struct {
}

// NewInviteUserToPublishedTestInternalServerError creates InviteUserToPublishedTestInternalServerError with default headers values
func NewInviteUserToPublishedTestInternalServerError() *InviteUserToPublishedTestInternalServerError {

	return &InviteUserToPublishedTestInternalServerError{}
}

// WriteResponse to the client
func (o *InviteUserToPublishedTestInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
