// Code generated by go-swagger; DO NOT EDIT.

package published_test

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// RemoveUserToPublishedTestOKCode is the HTTP code returned for type RemoveUserToPublishedTestOK
const RemoveUserToPublishedTestOKCode int = 200

/*RemoveUserToPublishedTestOK user removed

swagger:response removeUserToPublishedTestOK
*/
type RemoveUserToPublishedTestOK struct {
}

// NewRemoveUserToPublishedTestOK creates RemoveUserToPublishedTestOK with default headers values
func NewRemoveUserToPublishedTestOK() *RemoveUserToPublishedTestOK {

	return &RemoveUserToPublishedTestOK{}
}

// WriteResponse to the client
func (o *RemoveUserToPublishedTestOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// RemoveUserToPublishedTestBadRequestCode is the HTTP code returned for type RemoveUserToPublishedTestBadRequest
const RemoveUserToPublishedTestBadRequestCode int = 400

/*RemoveUserToPublishedTestBadRequest Incorrect Request, or invalida data

swagger:response removeUserToPublishedTestBadRequest
*/
type RemoveUserToPublishedTestBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRemoveUserToPublishedTestBadRequest creates RemoveUserToPublishedTestBadRequest with default headers values
func NewRemoveUserToPublishedTestBadRequest() *RemoveUserToPublishedTestBadRequest {

	return &RemoveUserToPublishedTestBadRequest{}
}

// WithPayload adds the payload to the remove user to published test bad request response
func (o *RemoveUserToPublishedTestBadRequest) WithPayload(payload *models.Error) *RemoveUserToPublishedTestBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove user to published test bad request response
func (o *RemoveUserToPublishedTestBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveUserToPublishedTestBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RemoveUserToPublishedTestForbiddenCode is the HTTP code returned for type RemoveUserToPublishedTestForbidden
const RemoveUserToPublishedTestForbiddenCode int = 403

/*RemoveUserToPublishedTestForbidden Not authorized to this content

swagger:response removeUserToPublishedTestForbidden
*/
type RemoveUserToPublishedTestForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRemoveUserToPublishedTestForbidden creates RemoveUserToPublishedTestForbidden with default headers values
func NewRemoveUserToPublishedTestForbidden() *RemoveUserToPublishedTestForbidden {

	return &RemoveUserToPublishedTestForbidden{}
}

// WithPayload adds the payload to the remove user to published test forbidden response
func (o *RemoveUserToPublishedTestForbidden) WithPayload(payload *models.Error) *RemoveUserToPublishedTestForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove user to published test forbidden response
func (o *RemoveUserToPublishedTestForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveUserToPublishedTestForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RemoveUserToPublishedTestGoneCode is the HTTP code returned for type RemoveUserToPublishedTestGone
const RemoveUserToPublishedTestGoneCode int = 410

/*RemoveUserToPublishedTestGone That user (password and name) does not exist

swagger:response removeUserToPublishedTestGone
*/
type RemoveUserToPublishedTestGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewRemoveUserToPublishedTestGone creates RemoveUserToPublishedTestGone with default headers values
func NewRemoveUserToPublishedTestGone() *RemoveUserToPublishedTestGone {

	return &RemoveUserToPublishedTestGone{}
}

// WithPayload adds the payload to the remove user to published test gone response
func (o *RemoveUserToPublishedTestGone) WithPayload(payload *models.Error) *RemoveUserToPublishedTestGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove user to published test gone response
func (o *RemoveUserToPublishedTestGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveUserToPublishedTestGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RemoveUserToPublishedTestInternalServerErrorCode is the HTTP code returned for type RemoveUserToPublishedTestInternalServerError
const RemoveUserToPublishedTestInternalServerErrorCode int = 500

/*RemoveUserToPublishedTestInternalServerError Internal error

swagger:response removeUserToPublishedTestInternalServerError
*/
type RemoveUserToPublishedTestInternalServerError struct {
}

// NewRemoveUserToPublishedTestInternalServerError creates RemoveUserToPublishedTestInternalServerError with default headers values
func NewRemoveUserToPublishedTestInternalServerError() *RemoveUserToPublishedTestInternalServerError {

	return &RemoveUserToPublishedTestInternalServerError{}
}

// WriteResponse to the client
func (o *RemoveUserToPublishedTestInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
