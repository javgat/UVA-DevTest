// Code generated by go-swagger; DO NOT EDIT.

package question

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// AddTagToQuestionOKCode is the HTTP code returned for type AddTagToQuestionOK
const AddTagToQuestionOKCode int = 200

/*AddTagToQuestionOK tag added

swagger:response addTagToQuestionOK
*/
type AddTagToQuestionOK struct {
}

// NewAddTagToQuestionOK creates AddTagToQuestionOK with default headers values
func NewAddTagToQuestionOK() *AddTagToQuestionOK {

	return &AddTagToQuestionOK{}
}

// WriteResponse to the client
func (o *AddTagToQuestionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// AddTagToQuestionBadRequestCode is the HTTP code returned for type AddTagToQuestionBadRequest
const AddTagToQuestionBadRequestCode int = 400

/*AddTagToQuestionBadRequest Incorrect Request, or invalida data

swagger:response addTagToQuestionBadRequest
*/
type AddTagToQuestionBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddTagToQuestionBadRequest creates AddTagToQuestionBadRequest with default headers values
func NewAddTagToQuestionBadRequest() *AddTagToQuestionBadRequest {

	return &AddTagToQuestionBadRequest{}
}

// WithPayload adds the payload to the add tag to question bad request response
func (o *AddTagToQuestionBadRequest) WithPayload(payload *models.Error) *AddTagToQuestionBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add tag to question bad request response
func (o *AddTagToQuestionBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddTagToQuestionBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddTagToQuestionForbiddenCode is the HTTP code returned for type AddTagToQuestionForbidden
const AddTagToQuestionForbiddenCode int = 403

/*AddTagToQuestionForbidden Not authorized to this content

swagger:response addTagToQuestionForbidden
*/
type AddTagToQuestionForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddTagToQuestionForbidden creates AddTagToQuestionForbidden with default headers values
func NewAddTagToQuestionForbidden() *AddTagToQuestionForbidden {

	return &AddTagToQuestionForbidden{}
}

// WithPayload adds the payload to the add tag to question forbidden response
func (o *AddTagToQuestionForbidden) WithPayload(payload *models.Error) *AddTagToQuestionForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add tag to question forbidden response
func (o *AddTagToQuestionForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddTagToQuestionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddTagToQuestionConflictCode is the HTTP code returned for type AddTagToQuestionConflict
const AddTagToQuestionConflictCode int = 409

/*AddTagToQuestionConflict A user with same username/email already exists

swagger:response addTagToQuestionConflict
*/
type AddTagToQuestionConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddTagToQuestionConflict creates AddTagToQuestionConflict with default headers values
func NewAddTagToQuestionConflict() *AddTagToQuestionConflict {

	return &AddTagToQuestionConflict{}
}

// WithPayload adds the payload to the add tag to question conflict response
func (o *AddTagToQuestionConflict) WithPayload(payload *models.Error) *AddTagToQuestionConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add tag to question conflict response
func (o *AddTagToQuestionConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddTagToQuestionConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddTagToQuestionGoneCode is the HTTP code returned for type AddTagToQuestionGone
const AddTagToQuestionGoneCode int = 410

/*AddTagToQuestionGone That resource does not exist

swagger:response addTagToQuestionGone
*/
type AddTagToQuestionGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddTagToQuestionGone creates AddTagToQuestionGone with default headers values
func NewAddTagToQuestionGone() *AddTagToQuestionGone {

	return &AddTagToQuestionGone{}
}

// WithPayload adds the payload to the add tag to question gone response
func (o *AddTagToQuestionGone) WithPayload(payload *models.Error) *AddTagToQuestionGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add tag to question gone response
func (o *AddTagToQuestionGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddTagToQuestionGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddTagToQuestionInternalServerErrorCode is the HTTP code returned for type AddTagToQuestionInternalServerError
const AddTagToQuestionInternalServerErrorCode int = 500

/*AddTagToQuestionInternalServerError Internal error

swagger:response addTagToQuestionInternalServerError
*/
type AddTagToQuestionInternalServerError struct {
}

// NewAddTagToQuestionInternalServerError creates AddTagToQuestionInternalServerError with default headers values
func NewAddTagToQuestionInternalServerError() *AddTagToQuestionInternalServerError {

	return &AddTagToQuestionInternalServerError{}
}

// WriteResponse to the client
func (o *AddTagToQuestionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
