// Code generated by go-swagger; DO NOT EDIT.

package question

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// GetOptionFromQuestionOKCode is the HTTP code returned for type GetOptionFromQuestionOK
const GetOptionFromQuestionOKCode int = 200

/*GetOptionFromQuestionOK option found

swagger:response getOptionFromQuestionOK
*/
type GetOptionFromQuestionOK struct {

	/*
	  In: Body
	*/
	Payload *models.Option `json:"body,omitempty"`
}

// NewGetOptionFromQuestionOK creates GetOptionFromQuestionOK with default headers values
func NewGetOptionFromQuestionOK() *GetOptionFromQuestionOK {

	return &GetOptionFromQuestionOK{}
}

// WithPayload adds the payload to the get option from question o k response
func (o *GetOptionFromQuestionOK) WithPayload(payload *models.Option) *GetOptionFromQuestionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get option from question o k response
func (o *GetOptionFromQuestionOK) SetPayload(payload *models.Option) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOptionFromQuestionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetOptionFromQuestionBadRequestCode is the HTTP code returned for type GetOptionFromQuestionBadRequest
const GetOptionFromQuestionBadRequestCode int = 400

/*GetOptionFromQuestionBadRequest Incorrect Request, or invalida data

swagger:response getOptionFromQuestionBadRequest
*/
type GetOptionFromQuestionBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetOptionFromQuestionBadRequest creates GetOptionFromQuestionBadRequest with default headers values
func NewGetOptionFromQuestionBadRequest() *GetOptionFromQuestionBadRequest {

	return &GetOptionFromQuestionBadRequest{}
}

// WithPayload adds the payload to the get option from question bad request response
func (o *GetOptionFromQuestionBadRequest) WithPayload(payload *models.Error) *GetOptionFromQuestionBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get option from question bad request response
func (o *GetOptionFromQuestionBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOptionFromQuestionBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetOptionFromQuestionForbiddenCode is the HTTP code returned for type GetOptionFromQuestionForbidden
const GetOptionFromQuestionForbiddenCode int = 403

/*GetOptionFromQuestionForbidden Not authorized to this content

swagger:response getOptionFromQuestionForbidden
*/
type GetOptionFromQuestionForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetOptionFromQuestionForbidden creates GetOptionFromQuestionForbidden with default headers values
func NewGetOptionFromQuestionForbidden() *GetOptionFromQuestionForbidden {

	return &GetOptionFromQuestionForbidden{}
}

// WithPayload adds the payload to the get option from question forbidden response
func (o *GetOptionFromQuestionForbidden) WithPayload(payload *models.Error) *GetOptionFromQuestionForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get option from question forbidden response
func (o *GetOptionFromQuestionForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOptionFromQuestionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetOptionFromQuestionGoneCode is the HTTP code returned for type GetOptionFromQuestionGone
const GetOptionFromQuestionGoneCode int = 410

/*GetOptionFromQuestionGone That user (password and name) does not exist

swagger:response getOptionFromQuestionGone
*/
type GetOptionFromQuestionGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetOptionFromQuestionGone creates GetOptionFromQuestionGone with default headers values
func NewGetOptionFromQuestionGone() *GetOptionFromQuestionGone {

	return &GetOptionFromQuestionGone{}
}

// WithPayload adds the payload to the get option from question gone response
func (o *GetOptionFromQuestionGone) WithPayload(payload *models.Error) *GetOptionFromQuestionGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get option from question gone response
func (o *GetOptionFromQuestionGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOptionFromQuestionGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetOptionFromQuestionInternalServerErrorCode is the HTTP code returned for type GetOptionFromQuestionInternalServerError
const GetOptionFromQuestionInternalServerErrorCode int = 500

/*GetOptionFromQuestionInternalServerError Internal error

swagger:response getOptionFromQuestionInternalServerError
*/
type GetOptionFromQuestionInternalServerError struct {
}

// NewGetOptionFromQuestionInternalServerError creates GetOptionFromQuestionInternalServerError with default headers values
func NewGetOptionFromQuestionInternalServerError() *GetOptionFromQuestionInternalServerError {

	return &GetOptionFromQuestionInternalServerError{}
}

// WriteResponse to the client
func (o *GetOptionFromQuestionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
