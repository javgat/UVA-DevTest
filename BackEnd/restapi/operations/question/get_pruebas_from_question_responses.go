// Code generated by go-swagger; DO NOT EDIT.

package question

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// GetPruebasFromQuestionOKCode is the HTTP code returned for type GetPruebasFromQuestionOK
const GetPruebasFromQuestionOKCode int = 200

/*GetPruebasFromQuestionOK pruebas found

swagger:response getPruebasFromQuestionOK
*/
type GetPruebasFromQuestionOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Prueba `json:"body,omitempty"`
}

// NewGetPruebasFromQuestionOK creates GetPruebasFromQuestionOK with default headers values
func NewGetPruebasFromQuestionOK() *GetPruebasFromQuestionOK {

	return &GetPruebasFromQuestionOK{}
}

// WithPayload adds the payload to the get pruebas from question o k response
func (o *GetPruebasFromQuestionOK) WithPayload(payload []*models.Prueba) *GetPruebasFromQuestionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get pruebas from question o k response
func (o *GetPruebasFromQuestionOK) SetPayload(payload []*models.Prueba) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPruebasFromQuestionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Prueba, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetPruebasFromQuestionBadRequestCode is the HTTP code returned for type GetPruebasFromQuestionBadRequest
const GetPruebasFromQuestionBadRequestCode int = 400

/*GetPruebasFromQuestionBadRequest Incorrect Request, or invalida data

swagger:response getPruebasFromQuestionBadRequest
*/
type GetPruebasFromQuestionBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetPruebasFromQuestionBadRequest creates GetPruebasFromQuestionBadRequest with default headers values
func NewGetPruebasFromQuestionBadRequest() *GetPruebasFromQuestionBadRequest {

	return &GetPruebasFromQuestionBadRequest{}
}

// WithPayload adds the payload to the get pruebas from question bad request response
func (o *GetPruebasFromQuestionBadRequest) WithPayload(payload *models.Error) *GetPruebasFromQuestionBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get pruebas from question bad request response
func (o *GetPruebasFromQuestionBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPruebasFromQuestionBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPruebasFromQuestionForbiddenCode is the HTTP code returned for type GetPruebasFromQuestionForbidden
const GetPruebasFromQuestionForbiddenCode int = 403

/*GetPruebasFromQuestionForbidden Not authorized to this content

swagger:response getPruebasFromQuestionForbidden
*/
type GetPruebasFromQuestionForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetPruebasFromQuestionForbidden creates GetPruebasFromQuestionForbidden with default headers values
func NewGetPruebasFromQuestionForbidden() *GetPruebasFromQuestionForbidden {

	return &GetPruebasFromQuestionForbidden{}
}

// WithPayload adds the payload to the get pruebas from question forbidden response
func (o *GetPruebasFromQuestionForbidden) WithPayload(payload *models.Error) *GetPruebasFromQuestionForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get pruebas from question forbidden response
func (o *GetPruebasFromQuestionForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPruebasFromQuestionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPruebasFromQuestionGoneCode is the HTTP code returned for type GetPruebasFromQuestionGone
const GetPruebasFromQuestionGoneCode int = 410

/*GetPruebasFromQuestionGone That resource does not exist

swagger:response getPruebasFromQuestionGone
*/
type GetPruebasFromQuestionGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetPruebasFromQuestionGone creates GetPruebasFromQuestionGone with default headers values
func NewGetPruebasFromQuestionGone() *GetPruebasFromQuestionGone {

	return &GetPruebasFromQuestionGone{}
}

// WithPayload adds the payload to the get pruebas from question gone response
func (o *GetPruebasFromQuestionGone) WithPayload(payload *models.Error) *GetPruebasFromQuestionGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get pruebas from question gone response
func (o *GetPruebasFromQuestionGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPruebasFromQuestionGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPruebasFromQuestionInternalServerErrorCode is the HTTP code returned for type GetPruebasFromQuestionInternalServerError
const GetPruebasFromQuestionInternalServerErrorCode int = 500

/*GetPruebasFromQuestionInternalServerError Internal error

swagger:response getPruebasFromQuestionInternalServerError
*/
type GetPruebasFromQuestionInternalServerError struct {
}

// NewGetPruebasFromQuestionInternalServerError creates GetPruebasFromQuestionInternalServerError with default headers values
func NewGetPruebasFromQuestionInternalServerError() *GetPruebasFromQuestionInternalServerError {

	return &GetPruebasFromQuestionInternalServerError{}
}

// WriteResponse to the client
func (o *GetPruebasFromQuestionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
