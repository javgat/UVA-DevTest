// Code generated by go-swagger; DO NOT EDIT.

package question

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"uva-devtest/models"
)

// GetTagsFromQuestionHandlerFunc turns a function with the right signature into a get tags from question handler
type GetTagsFromQuestionHandlerFunc func(GetTagsFromQuestionParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTagsFromQuestionHandlerFunc) Handle(params GetTagsFromQuestionParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// GetTagsFromQuestionHandler interface for that can handle valid get tags from question params
type GetTagsFromQuestionHandler interface {
	Handle(GetTagsFromQuestionParams, *models.User) middleware.Responder
}

// NewGetTagsFromQuestion creates a new http.Handler for the get tags from question operation
func NewGetTagsFromQuestion(ctx *middleware.Context, handler GetTagsFromQuestionHandler) *GetTagsFromQuestion {
	return &GetTagsFromQuestion{Context: ctx, Handler: handler}
}

/* GetTagsFromQuestion swagger:route GET /questions/{questionid}/tags question getTagsFromQuestion

Returns all tags from a question.

Returns all tags from a question.

*/
type GetTagsFromQuestion struct {
	Context *middleware.Context
	Handler GetTagsFromQuestionHandler
}

func (o *GetTagsFromQuestion) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetTagsFromQuestionParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
