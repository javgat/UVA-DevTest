// Code generated by go-swagger; DO NOT EDIT.

package question

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// GetTeamsFromQuestionOKCode is the HTTP code returned for type GetTeamsFromQuestionOK
const GetTeamsFromQuestionOKCode int = 200

/*GetTeamsFromQuestionOK teams found

swagger:response getTeamsFromQuestionOK
*/
type GetTeamsFromQuestionOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Team `json:"body,omitempty"`
}

// NewGetTeamsFromQuestionOK creates GetTeamsFromQuestionOK with default headers values
func NewGetTeamsFromQuestionOK() *GetTeamsFromQuestionOK {

	return &GetTeamsFromQuestionOK{}
}

// WithPayload adds the payload to the get teams from question o k response
func (o *GetTeamsFromQuestionOK) WithPayload(payload []*models.Team) *GetTeamsFromQuestionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get teams from question o k response
func (o *GetTeamsFromQuestionOK) SetPayload(payload []*models.Team) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTeamsFromQuestionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Team, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetTeamsFromQuestionBadRequestCode is the HTTP code returned for type GetTeamsFromQuestionBadRequest
const GetTeamsFromQuestionBadRequestCode int = 400

/*GetTeamsFromQuestionBadRequest Incorrect Request, or invalida data

swagger:response getTeamsFromQuestionBadRequest
*/
type GetTeamsFromQuestionBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTeamsFromQuestionBadRequest creates GetTeamsFromQuestionBadRequest with default headers values
func NewGetTeamsFromQuestionBadRequest() *GetTeamsFromQuestionBadRequest {

	return &GetTeamsFromQuestionBadRequest{}
}

// WithPayload adds the payload to the get teams from question bad request response
func (o *GetTeamsFromQuestionBadRequest) WithPayload(payload *models.Error) *GetTeamsFromQuestionBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get teams from question bad request response
func (o *GetTeamsFromQuestionBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTeamsFromQuestionBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTeamsFromQuestionForbiddenCode is the HTTP code returned for type GetTeamsFromQuestionForbidden
const GetTeamsFromQuestionForbiddenCode int = 403

/*GetTeamsFromQuestionForbidden Not authorized to this content

swagger:response getTeamsFromQuestionForbidden
*/
type GetTeamsFromQuestionForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTeamsFromQuestionForbidden creates GetTeamsFromQuestionForbidden with default headers values
func NewGetTeamsFromQuestionForbidden() *GetTeamsFromQuestionForbidden {

	return &GetTeamsFromQuestionForbidden{}
}

// WithPayload adds the payload to the get teams from question forbidden response
func (o *GetTeamsFromQuestionForbidden) WithPayload(payload *models.Error) *GetTeamsFromQuestionForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get teams from question forbidden response
func (o *GetTeamsFromQuestionForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTeamsFromQuestionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTeamsFromQuestionGoneCode is the HTTP code returned for type GetTeamsFromQuestionGone
const GetTeamsFromQuestionGoneCode int = 410

/*GetTeamsFromQuestionGone That user (password and name) does not exist

swagger:response getTeamsFromQuestionGone
*/
type GetTeamsFromQuestionGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTeamsFromQuestionGone creates GetTeamsFromQuestionGone with default headers values
func NewGetTeamsFromQuestionGone() *GetTeamsFromQuestionGone {

	return &GetTeamsFromQuestionGone{}
}

// WithPayload adds the payload to the get teams from question gone response
func (o *GetTeamsFromQuestionGone) WithPayload(payload *models.Error) *GetTeamsFromQuestionGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get teams from question gone response
func (o *GetTeamsFromQuestionGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTeamsFromQuestionGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTeamsFromQuestionInternalServerErrorCode is the HTTP code returned for type GetTeamsFromQuestionInternalServerError
const GetTeamsFromQuestionInternalServerErrorCode int = 500

/*GetTeamsFromQuestionInternalServerError Internal error

swagger:response getTeamsFromQuestionInternalServerError
*/
type GetTeamsFromQuestionInternalServerError struct {
}

// NewGetTeamsFromQuestionInternalServerError creates GetTeamsFromQuestionInternalServerError with default headers values
func NewGetTeamsFromQuestionInternalServerError() *GetTeamsFromQuestionInternalServerError {

	return &GetTeamsFromQuestionInternalServerError{}
}

// WriteResponse to the client
func (o *GetTeamsFromQuestionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
