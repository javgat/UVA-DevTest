// Code generated by go-swagger; DO NOT EDIT.

package question

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"uva-devtest/models"
)

// PostPruebaHandlerFunc turns a function with the right signature into a post prueba handler
type PostPruebaHandlerFunc func(PostPruebaParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn PostPruebaHandlerFunc) Handle(params PostPruebaParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// PostPruebaHandler interface for that can handle valid post prueba params
type PostPruebaHandler interface {
	Handle(PostPruebaParams, *models.User) middleware.Responder
}

// NewPostPrueba creates a new http.Handler for the post prueba operation
func NewPostPrueba(ctx *middleware.Context, handler PostPruebaHandler) *PostPrueba {
	return &PostPrueba{Context: ctx, Handler: handler}
}

/* PostPrueba swagger:route POST /questions/{questionid}/pruebas question postPrueba

Creates new prueba to a question.

Creates new prueba to a question.

*/
type PostPrueba struct {
	Context *middleware.Context
	Handler PostPruebaHandler
}

func (o *PostPrueba) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostPruebaParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
