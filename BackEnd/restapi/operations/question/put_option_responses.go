// Code generated by go-swagger; DO NOT EDIT.

package question

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// PutOptionOKCode is the HTTP code returned for type PutOptionOK
const PutOptionOKCode int = 200

/*PutOptionOK option updated

swagger:response putOptionOK
*/
type PutOptionOK struct {
}

// NewPutOptionOK creates PutOptionOK with default headers values
func NewPutOptionOK() *PutOptionOK {

	return &PutOptionOK{}
}

// WriteResponse to the client
func (o *PutOptionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// PutOptionBadRequestCode is the HTTP code returned for type PutOptionBadRequest
const PutOptionBadRequestCode int = 400

/*PutOptionBadRequest Incorrect Request, or invalida data

swagger:response putOptionBadRequest
*/
type PutOptionBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutOptionBadRequest creates PutOptionBadRequest with default headers values
func NewPutOptionBadRequest() *PutOptionBadRequest {

	return &PutOptionBadRequest{}
}

// WithPayload adds the payload to the put option bad request response
func (o *PutOptionBadRequest) WithPayload(payload *models.Error) *PutOptionBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put option bad request response
func (o *PutOptionBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutOptionBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutOptionForbiddenCode is the HTTP code returned for type PutOptionForbidden
const PutOptionForbiddenCode int = 403

/*PutOptionForbidden Not authorized to this content

swagger:response putOptionForbidden
*/
type PutOptionForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutOptionForbidden creates PutOptionForbidden with default headers values
func NewPutOptionForbidden() *PutOptionForbidden {

	return &PutOptionForbidden{}
}

// WithPayload adds the payload to the put option forbidden response
func (o *PutOptionForbidden) WithPayload(payload *models.Error) *PutOptionForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put option forbidden response
func (o *PutOptionForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutOptionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutOptionGoneCode is the HTTP code returned for type PutOptionGone
const PutOptionGoneCode int = 410

/*PutOptionGone That user (password and name) does not exist

swagger:response putOptionGone
*/
type PutOptionGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutOptionGone creates PutOptionGone with default headers values
func NewPutOptionGone() *PutOptionGone {

	return &PutOptionGone{}
}

// WithPayload adds the payload to the put option gone response
func (o *PutOptionGone) WithPayload(payload *models.Error) *PutOptionGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put option gone response
func (o *PutOptionGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutOptionGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutOptionInternalServerErrorCode is the HTTP code returned for type PutOptionInternalServerError
const PutOptionInternalServerErrorCode int = 500

/*PutOptionInternalServerError Internal error

swagger:response putOptionInternalServerError
*/
type PutOptionInternalServerError struct {
}

// NewPutOptionInternalServerError creates PutOptionInternalServerError with default headers values
func NewPutOptionInternalServerError() *PutOptionInternalServerError {

	return &PutOptionInternalServerError{}
}

// WriteResponse to the client
func (o *PutOptionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
