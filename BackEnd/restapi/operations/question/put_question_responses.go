// Code generated by go-swagger; DO NOT EDIT.

package question

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// PutQuestionOKCode is the HTTP code returned for type PutQuestionOK
const PutQuestionOKCode int = 200

/*PutQuestionOK Question updated

swagger:response putQuestionOK
*/
type PutQuestionOK struct {
}

// NewPutQuestionOK creates PutQuestionOK with default headers values
func NewPutQuestionOK() *PutQuestionOK {

	return &PutQuestionOK{}
}

// WriteResponse to the client
func (o *PutQuestionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// PutQuestionBadRequestCode is the HTTP code returned for type PutQuestionBadRequest
const PutQuestionBadRequestCode int = 400

/*PutQuestionBadRequest Incorrect Request, or invalida data

swagger:response putQuestionBadRequest
*/
type PutQuestionBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutQuestionBadRequest creates PutQuestionBadRequest with default headers values
func NewPutQuestionBadRequest() *PutQuestionBadRequest {

	return &PutQuestionBadRequest{}
}

// WithPayload adds the payload to the put question bad request response
func (o *PutQuestionBadRequest) WithPayload(payload *models.Error) *PutQuestionBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put question bad request response
func (o *PutQuestionBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutQuestionBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutQuestionForbiddenCode is the HTTP code returned for type PutQuestionForbidden
const PutQuestionForbiddenCode int = 403

/*PutQuestionForbidden Not authorized to this content

swagger:response putQuestionForbidden
*/
type PutQuestionForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutQuestionForbidden creates PutQuestionForbidden with default headers values
func NewPutQuestionForbidden() *PutQuestionForbidden {

	return &PutQuestionForbidden{}
}

// WithPayload adds the payload to the put question forbidden response
func (o *PutQuestionForbidden) WithPayload(payload *models.Error) *PutQuestionForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put question forbidden response
func (o *PutQuestionForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutQuestionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutQuestionInternalServerErrorCode is the HTTP code returned for type PutQuestionInternalServerError
const PutQuestionInternalServerErrorCode int = 500

/*PutQuestionInternalServerError Internal error

swagger:response putQuestionInternalServerError
*/
type PutQuestionInternalServerError struct {
}

// NewPutQuestionInternalServerError creates PutQuestionInternalServerError with default headers values
func NewPutQuestionInternalServerError() *PutQuestionInternalServerError {

	return &PutQuestionInternalServerError{}
}

// WriteResponse to the client
func (o *PutQuestionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
