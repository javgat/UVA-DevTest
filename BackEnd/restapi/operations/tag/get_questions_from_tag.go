// Code generated by go-swagger; DO NOT EDIT.

package tag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"uva-devtest/models"
)

// GetQuestionsFromTagHandlerFunc turns a function with the right signature into a get questions from tag handler
type GetQuestionsFromTagHandlerFunc func(GetQuestionsFromTagParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn GetQuestionsFromTagHandlerFunc) Handle(params GetQuestionsFromTagParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// GetQuestionsFromTagHandler interface for that can handle valid get questions from tag params
type GetQuestionsFromTagHandler interface {
	Handle(GetQuestionsFromTagParams, *models.User) middleware.Responder
}

// NewGetQuestionsFromTag creates a new http.Handler for the get questions from tag operation
func NewGetQuestionsFromTag(ctx *middleware.Context, handler GetQuestionsFromTagHandler) *GetQuestionsFromTag {
	return &GetQuestionsFromTag{Context: ctx, Handler: handler}
}

/* GetQuestionsFromTag swagger:route GET /tags/{tag}/questions tag getQuestionsFromTag

Returns all questions from a tag.

Returns all questions from a tag.

*/
type GetQuestionsFromTag struct {
	Context *middleware.Context
	Handler GetQuestionsFromTagHandler
}

func (o *GetQuestionsFromTag) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetQuestionsFromTagParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
