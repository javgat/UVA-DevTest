// Code generated by go-swagger; DO NOT EDIT.

package tag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// GetQuestionsFromTagOKCode is the HTTP code returned for type GetQuestionsFromTagOK
const GetQuestionsFromTagOKCode int = 200

/*GetQuestionsFromTagOK questions found

swagger:response getQuestionsFromTagOK
*/
type GetQuestionsFromTagOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Question `json:"body,omitempty"`
}

// NewGetQuestionsFromTagOK creates GetQuestionsFromTagOK with default headers values
func NewGetQuestionsFromTagOK() *GetQuestionsFromTagOK {

	return &GetQuestionsFromTagOK{}
}

// WithPayload adds the payload to the get questions from tag o k response
func (o *GetQuestionsFromTagOK) WithPayload(payload []*models.Question) *GetQuestionsFromTagOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get questions from tag o k response
func (o *GetQuestionsFromTagOK) SetPayload(payload []*models.Question) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuestionsFromTagOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Question, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetQuestionsFromTagBadRequestCode is the HTTP code returned for type GetQuestionsFromTagBadRequest
const GetQuestionsFromTagBadRequestCode int = 400

/*GetQuestionsFromTagBadRequest Incorrect Request, or invalida data

swagger:response getQuestionsFromTagBadRequest
*/
type GetQuestionsFromTagBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetQuestionsFromTagBadRequest creates GetQuestionsFromTagBadRequest with default headers values
func NewGetQuestionsFromTagBadRequest() *GetQuestionsFromTagBadRequest {

	return &GetQuestionsFromTagBadRequest{}
}

// WithPayload adds the payload to the get questions from tag bad request response
func (o *GetQuestionsFromTagBadRequest) WithPayload(payload *models.Error) *GetQuestionsFromTagBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get questions from tag bad request response
func (o *GetQuestionsFromTagBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuestionsFromTagBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetQuestionsFromTagForbiddenCode is the HTTP code returned for type GetQuestionsFromTagForbidden
const GetQuestionsFromTagForbiddenCode int = 403

/*GetQuestionsFromTagForbidden Not authorized to this content

swagger:response getQuestionsFromTagForbidden
*/
type GetQuestionsFromTagForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetQuestionsFromTagForbidden creates GetQuestionsFromTagForbidden with default headers values
func NewGetQuestionsFromTagForbidden() *GetQuestionsFromTagForbidden {

	return &GetQuestionsFromTagForbidden{}
}

// WithPayload adds the payload to the get questions from tag forbidden response
func (o *GetQuestionsFromTagForbidden) WithPayload(payload *models.Error) *GetQuestionsFromTagForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get questions from tag forbidden response
func (o *GetQuestionsFromTagForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuestionsFromTagForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetQuestionsFromTagGoneCode is the HTTP code returned for type GetQuestionsFromTagGone
const GetQuestionsFromTagGoneCode int = 410

/*GetQuestionsFromTagGone That user (password and name) does not exist

swagger:response getQuestionsFromTagGone
*/
type GetQuestionsFromTagGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetQuestionsFromTagGone creates GetQuestionsFromTagGone with default headers values
func NewGetQuestionsFromTagGone() *GetQuestionsFromTagGone {

	return &GetQuestionsFromTagGone{}
}

// WithPayload adds the payload to the get questions from tag gone response
func (o *GetQuestionsFromTagGone) WithPayload(payload *models.Error) *GetQuestionsFromTagGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get questions from tag gone response
func (o *GetQuestionsFromTagGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuestionsFromTagGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetQuestionsFromTagInternalServerErrorCode is the HTTP code returned for type GetQuestionsFromTagInternalServerError
const GetQuestionsFromTagInternalServerErrorCode int = 500

/*GetQuestionsFromTagInternalServerError Internal error

swagger:response getQuestionsFromTagInternalServerError
*/
type GetQuestionsFromTagInternalServerError struct {
}

// NewGetQuestionsFromTagInternalServerError creates GetQuestionsFromTagInternalServerError with default headers values
func NewGetQuestionsFromTagInternalServerError() *GetQuestionsFromTagInternalServerError {

	return &GetQuestionsFromTagInternalServerError{}
}

// WriteResponse to the client
func (o *GetQuestionsFromTagInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
