// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"uva-devtest/models"
)

// GetMembersHandlerFunc turns a function with the right signature into a get members handler
type GetMembersHandlerFunc func(GetMembersParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMembersHandlerFunc) Handle(params GetMembersParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// GetMembersHandler interface for that can handle valid get members params
type GetMembersHandler interface {
	Handle(GetMembersParams, *models.User) middleware.Responder
}

// NewGetMembers creates a new http.Handler for the get members operation
func NewGetMembers(ctx *middleware.Context, handler GetMembersHandler) *GetMembers {
	return &GetMembers{Context: ctx, Handler: handler}
}

/* GetMembers swagger:route GET /teams/{teamname}/members team getMembers

Returns all users that have the role members in a team

Returns all users that have the role members in a team

*/
type GetMembers struct {
	Context *middleware.Context
	Handler GetMembersHandler
}

func (o *GetMembers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetMembersParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
