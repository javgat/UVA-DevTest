// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// GetTestFromTeamOKCode is the HTTP code returned for type GetTestFromTeamOK
const GetTestFromTeamOKCode int = 200

/*GetTestFromTeamOK test found

swagger:response getTestFromTeamOK
*/
type GetTestFromTeamOK struct {

	/*
	  In: Body
	*/
	Payload *models.Test `json:"body,omitempty"`
}

// NewGetTestFromTeamOK creates GetTestFromTeamOK with default headers values
func NewGetTestFromTeamOK() *GetTestFromTeamOK {

	return &GetTestFromTeamOK{}
}

// WithPayload adds the payload to the get test from team o k response
func (o *GetTestFromTeamOK) WithPayload(payload *models.Test) *GetTestFromTeamOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get test from team o k response
func (o *GetTestFromTeamOK) SetPayload(payload *models.Test) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTestFromTeamOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTestFromTeamBadRequestCode is the HTTP code returned for type GetTestFromTeamBadRequest
const GetTestFromTeamBadRequestCode int = 400

/*GetTestFromTeamBadRequest Incorrect Request, or invalida data

swagger:response getTestFromTeamBadRequest
*/
type GetTestFromTeamBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTestFromTeamBadRequest creates GetTestFromTeamBadRequest with default headers values
func NewGetTestFromTeamBadRequest() *GetTestFromTeamBadRequest {

	return &GetTestFromTeamBadRequest{}
}

// WithPayload adds the payload to the get test from team bad request response
func (o *GetTestFromTeamBadRequest) WithPayload(payload *models.Error) *GetTestFromTeamBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get test from team bad request response
func (o *GetTestFromTeamBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTestFromTeamBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTestFromTeamForbiddenCode is the HTTP code returned for type GetTestFromTeamForbidden
const GetTestFromTeamForbiddenCode int = 403

/*GetTestFromTeamForbidden Not authorized to this content

swagger:response getTestFromTeamForbidden
*/
type GetTestFromTeamForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTestFromTeamForbidden creates GetTestFromTeamForbidden with default headers values
func NewGetTestFromTeamForbidden() *GetTestFromTeamForbidden {

	return &GetTestFromTeamForbidden{}
}

// WithPayload adds the payload to the get test from team forbidden response
func (o *GetTestFromTeamForbidden) WithPayload(payload *models.Error) *GetTestFromTeamForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get test from team forbidden response
func (o *GetTestFromTeamForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTestFromTeamForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTestFromTeamGoneCode is the HTTP code returned for type GetTestFromTeamGone
const GetTestFromTeamGoneCode int = 410

/*GetTestFromTeamGone That user (password and name) does not exist

swagger:response getTestFromTeamGone
*/
type GetTestFromTeamGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTestFromTeamGone creates GetTestFromTeamGone with default headers values
func NewGetTestFromTeamGone() *GetTestFromTeamGone {

	return &GetTestFromTeamGone{}
}

// WithPayload adds the payload to the get test from team gone response
func (o *GetTestFromTeamGone) WithPayload(payload *models.Error) *GetTestFromTeamGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get test from team gone response
func (o *GetTestFromTeamGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTestFromTeamGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTestFromTeamInternalServerErrorCode is the HTTP code returned for type GetTestFromTeamInternalServerError
const GetTestFromTeamInternalServerErrorCode int = 500

/*GetTestFromTeamInternalServerError Internal error

swagger:response getTestFromTeamInternalServerError
*/
type GetTestFromTeamInternalServerError struct {
}

// NewGetTestFromTeamInternalServerError creates GetTestFromTeamInternalServerError with default headers values
func NewGetTestFromTeamInternalServerError() *GetTestFromTeamInternalServerError {

	return &GetTestFromTeamInternalServerError{}
}

// WriteResponse to the client
func (o *GetTestFromTeamInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
