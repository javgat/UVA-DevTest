// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"uva-devtest/models"
)

// PutTeamHandlerFunc turns a function with the right signature into a put team handler
type PutTeamHandlerFunc func(PutTeamParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn PutTeamHandlerFunc) Handle(params PutTeamParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// PutTeamHandler interface for that can handle valid put team params
type PutTeamHandler interface {
	Handle(PutTeamParams, *models.User) middleware.Responder
}

// NewPutTeam creates a new http.Handler for the put team operation
func NewPutTeam(ctx *middleware.Context, handler PutTeamHandler) *PutTeam {
	return &PutTeam{Context: ctx, Handler: handler}
}

/* PutTeam swagger:route PUT /teams/{teamname} team putTeam

Modifies the team <teamname>

Modifies the team <teamname>

*/
type PutTeam struct {
	Context *middleware.Context
	Handler PutTeamHandler
}

func (o *PutTeam) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutTeamParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
