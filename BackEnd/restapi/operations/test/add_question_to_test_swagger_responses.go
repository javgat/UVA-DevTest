// Code generated by go-swagger; DO NOT EDIT.

package test

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// AddQuestionToTestOKCode is the HTTP code returned for type AddQuestionToTestOK
const AddQuestionToTestOKCode int = 200

/*AddQuestionToTestOK Question added

swagger:response addQuestionToTestOK
*/
type AddQuestionToTestOK struct {
}

// NewAddQuestionToTestOK creates AddQuestionToTestOK with default headers values
func NewAddQuestionToTestOK() *AddQuestionToTestOK {

	return &AddQuestionToTestOK{}
}

// WriteResponse to the client
func (o *AddQuestionToTestOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// AddQuestionToTestBadRequestCode is the HTTP code returned for type AddQuestionToTestBadRequest
const AddQuestionToTestBadRequestCode int = 400

/*AddQuestionToTestBadRequest Incorrect Request, or invalida data

swagger:response addQuestionToTestBadRequest
*/
type AddQuestionToTestBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddQuestionToTestBadRequest creates AddQuestionToTestBadRequest with default headers values
func NewAddQuestionToTestBadRequest() *AddQuestionToTestBadRequest {

	return &AddQuestionToTestBadRequest{}
}

// WithPayload adds the payload to the add question to test bad request response
func (o *AddQuestionToTestBadRequest) WithPayload(payload *models.Error) *AddQuestionToTestBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add question to test bad request response
func (o *AddQuestionToTestBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddQuestionToTestBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddQuestionToTestForbiddenCode is the HTTP code returned for type AddQuestionToTestForbidden
const AddQuestionToTestForbiddenCode int = 403

/*AddQuestionToTestForbidden Not authorized to this content

swagger:response addQuestionToTestForbidden
*/
type AddQuestionToTestForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddQuestionToTestForbidden creates AddQuestionToTestForbidden with default headers values
func NewAddQuestionToTestForbidden() *AddQuestionToTestForbidden {

	return &AddQuestionToTestForbidden{}
}

// WithPayload adds the payload to the add question to test forbidden response
func (o *AddQuestionToTestForbidden) WithPayload(payload *models.Error) *AddQuestionToTestForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add question to test forbidden response
func (o *AddQuestionToTestForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddQuestionToTestForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddQuestionToTestGoneCode is the HTTP code returned for type AddQuestionToTestGone
const AddQuestionToTestGoneCode int = 410

/*AddQuestionToTestGone That user (password and name) does not exist

swagger:response addQuestionToTestGone
*/
type AddQuestionToTestGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddQuestionToTestGone creates AddQuestionToTestGone with default headers values
func NewAddQuestionToTestGone() *AddQuestionToTestGone {

	return &AddQuestionToTestGone{}
}

// WithPayload adds the payload to the add question to test gone response
func (o *AddQuestionToTestGone) WithPayload(payload *models.Error) *AddQuestionToTestGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add question to test gone response
func (o *AddQuestionToTestGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddQuestionToTestGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddQuestionToTestInternalServerErrorCode is the HTTP code returned for type AddQuestionToTestInternalServerError
const AddQuestionToTestInternalServerErrorCode int = 500

/*AddQuestionToTestInternalServerError Internal error

swagger:response addQuestionToTestInternalServerError
*/
type AddQuestionToTestInternalServerError struct {
}

// NewAddQuestionToTestInternalServerError creates AddQuestionToTestInternalServerError with default headers values
func NewAddQuestionToTestInternalServerError() *AddQuestionToTestInternalServerError {

	return &AddQuestionToTestInternalServerError{}
}

// WriteResponse to the client
func (o *AddQuestionToTestInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
