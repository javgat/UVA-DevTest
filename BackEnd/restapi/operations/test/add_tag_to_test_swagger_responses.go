// Code generated by go-swagger; DO NOT EDIT.

package test

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// AddTagToTestOKCode is the HTTP code returned for type AddTagToTestOK
const AddTagToTestOKCode int = 200

/*AddTagToTestOK tag added

swagger:response addTagToTestOK
*/
type AddTagToTestOK struct {
}

// NewAddTagToTestOK creates AddTagToTestOK with default headers values
func NewAddTagToTestOK() *AddTagToTestOK {

	return &AddTagToTestOK{}
}

// WriteResponse to the client
func (o *AddTagToTestOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// AddTagToTestBadRequestCode is the HTTP code returned for type AddTagToTestBadRequest
const AddTagToTestBadRequestCode int = 400

/*AddTagToTestBadRequest Incorrect Request, or invalida data

swagger:response addTagToTestBadRequest
*/
type AddTagToTestBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddTagToTestBadRequest creates AddTagToTestBadRequest with default headers values
func NewAddTagToTestBadRequest() *AddTagToTestBadRequest {

	return &AddTagToTestBadRequest{}
}

// WithPayload adds the payload to the add tag to test bad request response
func (o *AddTagToTestBadRequest) WithPayload(payload *models.Error) *AddTagToTestBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add tag to test bad request response
func (o *AddTagToTestBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddTagToTestBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddTagToTestForbiddenCode is the HTTP code returned for type AddTagToTestForbidden
const AddTagToTestForbiddenCode int = 403

/*AddTagToTestForbidden Not authorized to this content

swagger:response addTagToTestForbidden
*/
type AddTagToTestForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddTagToTestForbidden creates AddTagToTestForbidden with default headers values
func NewAddTagToTestForbidden() *AddTagToTestForbidden {

	return &AddTagToTestForbidden{}
}

// WithPayload adds the payload to the add tag to test forbidden response
func (o *AddTagToTestForbidden) WithPayload(payload *models.Error) *AddTagToTestForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add tag to test forbidden response
func (o *AddTagToTestForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddTagToTestForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddTagToTestConflictCode is the HTTP code returned for type AddTagToTestConflict
const AddTagToTestConflictCode int = 409

/*AddTagToTestConflict A user with same username/email already exists

swagger:response addTagToTestConflict
*/
type AddTagToTestConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddTagToTestConflict creates AddTagToTestConflict with default headers values
func NewAddTagToTestConflict() *AddTagToTestConflict {

	return &AddTagToTestConflict{}
}

// WithPayload adds the payload to the add tag to test conflict response
func (o *AddTagToTestConflict) WithPayload(payload *models.Error) *AddTagToTestConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add tag to test conflict response
func (o *AddTagToTestConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddTagToTestConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddTagToTestGoneCode is the HTTP code returned for type AddTagToTestGone
const AddTagToTestGoneCode int = 410

/*AddTagToTestGone That resource does not exist

swagger:response addTagToTestGone
*/
type AddTagToTestGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddTagToTestGone creates AddTagToTestGone with default headers values
func NewAddTagToTestGone() *AddTagToTestGone {

	return &AddTagToTestGone{}
}

// WithPayload adds the payload to the add tag to test gone response
func (o *AddTagToTestGone) WithPayload(payload *models.Error) *AddTagToTestGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add tag to test gone response
func (o *AddTagToTestGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddTagToTestGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddTagToTestInternalServerErrorCode is the HTTP code returned for type AddTagToTestInternalServerError
const AddTagToTestInternalServerErrorCode int = 500

/*AddTagToTestInternalServerError Internal error

swagger:response addTagToTestInternalServerError
*/
type AddTagToTestInternalServerError struct {
}

// NewAddTagToTestInternalServerError creates AddTagToTestInternalServerError with default headers values
func NewAddTagToTestInternalServerError() *AddTagToTestInternalServerError {

	return &AddTagToTestInternalServerError{}
}

// WriteResponse to the client
func (o *AddTagToTestInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
