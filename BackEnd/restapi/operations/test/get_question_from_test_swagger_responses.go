// Code generated by go-swagger; DO NOT EDIT.

package test

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// GetQuestionFromTestOKCode is the HTTP code returned for type GetQuestionFromTestOK
const GetQuestionFromTestOKCode int = 200

/*GetQuestionFromTestOK Question found

swagger:response getQuestionFromTestOK
*/
type GetQuestionFromTestOK struct {

	/*
	  In: Body
	*/
	Payload *models.Question `json:"body,omitempty"`
}

// NewGetQuestionFromTestOK creates GetQuestionFromTestOK with default headers values
func NewGetQuestionFromTestOK() *GetQuestionFromTestOK {

	return &GetQuestionFromTestOK{}
}

// WithPayload adds the payload to the get question from test o k response
func (o *GetQuestionFromTestOK) WithPayload(payload *models.Question) *GetQuestionFromTestOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get question from test o k response
func (o *GetQuestionFromTestOK) SetPayload(payload *models.Question) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuestionFromTestOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetQuestionFromTestBadRequestCode is the HTTP code returned for type GetQuestionFromTestBadRequest
const GetQuestionFromTestBadRequestCode int = 400

/*GetQuestionFromTestBadRequest Incorrect Request, or invalida data

swagger:response getQuestionFromTestBadRequest
*/
type GetQuestionFromTestBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetQuestionFromTestBadRequest creates GetQuestionFromTestBadRequest with default headers values
func NewGetQuestionFromTestBadRequest() *GetQuestionFromTestBadRequest {

	return &GetQuestionFromTestBadRequest{}
}

// WithPayload adds the payload to the get question from test bad request response
func (o *GetQuestionFromTestBadRequest) WithPayload(payload *models.Error) *GetQuestionFromTestBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get question from test bad request response
func (o *GetQuestionFromTestBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuestionFromTestBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetQuestionFromTestForbiddenCode is the HTTP code returned for type GetQuestionFromTestForbidden
const GetQuestionFromTestForbiddenCode int = 403

/*GetQuestionFromTestForbidden Not authorized to this content

swagger:response getQuestionFromTestForbidden
*/
type GetQuestionFromTestForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetQuestionFromTestForbidden creates GetQuestionFromTestForbidden with default headers values
func NewGetQuestionFromTestForbidden() *GetQuestionFromTestForbidden {

	return &GetQuestionFromTestForbidden{}
}

// WithPayload adds the payload to the get question from test forbidden response
func (o *GetQuestionFromTestForbidden) WithPayload(payload *models.Error) *GetQuestionFromTestForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get question from test forbidden response
func (o *GetQuestionFromTestForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuestionFromTestForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetQuestionFromTestGoneCode is the HTTP code returned for type GetQuestionFromTestGone
const GetQuestionFromTestGoneCode int = 410

/*GetQuestionFromTestGone That user (password and name) does not exist

swagger:response getQuestionFromTestGone
*/
type GetQuestionFromTestGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetQuestionFromTestGone creates GetQuestionFromTestGone with default headers values
func NewGetQuestionFromTestGone() *GetQuestionFromTestGone {

	return &GetQuestionFromTestGone{}
}

// WithPayload adds the payload to the get question from test gone response
func (o *GetQuestionFromTestGone) WithPayload(payload *models.Error) *GetQuestionFromTestGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get question from test gone response
func (o *GetQuestionFromTestGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuestionFromTestGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetQuestionFromTestInternalServerErrorCode is the HTTP code returned for type GetQuestionFromTestInternalServerError
const GetQuestionFromTestInternalServerErrorCode int = 500

/*GetQuestionFromTestInternalServerError Internal error

swagger:response getQuestionFromTestInternalServerError
*/
type GetQuestionFromTestInternalServerError struct {
}

// NewGetQuestionFromTestInternalServerError creates GetQuestionFromTestInternalServerError with default headers values
func NewGetQuestionFromTestInternalServerError() *GetQuestionFromTestInternalServerError {

	return &GetQuestionFromTestInternalServerError{}
}

// WriteResponse to the client
func (o *GetQuestionFromTestInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
