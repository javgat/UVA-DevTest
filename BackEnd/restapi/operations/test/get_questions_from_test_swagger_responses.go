// Code generated by go-swagger; DO NOT EDIT.

package test

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// GetQuestionsFromTestOKCode is the HTTP code returned for type GetQuestionsFromTestOK
const GetQuestionsFromTestOKCode int = 200

/*GetQuestionsFromTestOK questions found

swagger:response getQuestionsFromTestOK
*/
type GetQuestionsFromTestOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Question `json:"body,omitempty"`
}

// NewGetQuestionsFromTestOK creates GetQuestionsFromTestOK with default headers values
func NewGetQuestionsFromTestOK() *GetQuestionsFromTestOK {

	return &GetQuestionsFromTestOK{}
}

// WithPayload adds the payload to the get questions from test o k response
func (o *GetQuestionsFromTestOK) WithPayload(payload []*models.Question) *GetQuestionsFromTestOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get questions from test o k response
func (o *GetQuestionsFromTestOK) SetPayload(payload []*models.Question) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuestionsFromTestOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Question, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetQuestionsFromTestBadRequestCode is the HTTP code returned for type GetQuestionsFromTestBadRequest
const GetQuestionsFromTestBadRequestCode int = 400

/*GetQuestionsFromTestBadRequest Incorrect Request, or invalida data

swagger:response getQuestionsFromTestBadRequest
*/
type GetQuestionsFromTestBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetQuestionsFromTestBadRequest creates GetQuestionsFromTestBadRequest with default headers values
func NewGetQuestionsFromTestBadRequest() *GetQuestionsFromTestBadRequest {

	return &GetQuestionsFromTestBadRequest{}
}

// WithPayload adds the payload to the get questions from test bad request response
func (o *GetQuestionsFromTestBadRequest) WithPayload(payload *models.Error) *GetQuestionsFromTestBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get questions from test bad request response
func (o *GetQuestionsFromTestBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuestionsFromTestBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetQuestionsFromTestForbiddenCode is the HTTP code returned for type GetQuestionsFromTestForbidden
const GetQuestionsFromTestForbiddenCode int = 403

/*GetQuestionsFromTestForbidden Not authorized to this content

swagger:response getQuestionsFromTestForbidden
*/
type GetQuestionsFromTestForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetQuestionsFromTestForbidden creates GetQuestionsFromTestForbidden with default headers values
func NewGetQuestionsFromTestForbidden() *GetQuestionsFromTestForbidden {

	return &GetQuestionsFromTestForbidden{}
}

// WithPayload adds the payload to the get questions from test forbidden response
func (o *GetQuestionsFromTestForbidden) WithPayload(payload *models.Error) *GetQuestionsFromTestForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get questions from test forbidden response
func (o *GetQuestionsFromTestForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuestionsFromTestForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetQuestionsFromTestGoneCode is the HTTP code returned for type GetQuestionsFromTestGone
const GetQuestionsFromTestGoneCode int = 410

/*GetQuestionsFromTestGone That user (password and name) does not exist

swagger:response getQuestionsFromTestGone
*/
type GetQuestionsFromTestGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetQuestionsFromTestGone creates GetQuestionsFromTestGone with default headers values
func NewGetQuestionsFromTestGone() *GetQuestionsFromTestGone {

	return &GetQuestionsFromTestGone{}
}

// WithPayload adds the payload to the get questions from test gone response
func (o *GetQuestionsFromTestGone) WithPayload(payload *models.Error) *GetQuestionsFromTestGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get questions from test gone response
func (o *GetQuestionsFromTestGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuestionsFromTestGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetQuestionsFromTestInternalServerErrorCode is the HTTP code returned for type GetQuestionsFromTestInternalServerError
const GetQuestionsFromTestInternalServerErrorCode int = 500

/*GetQuestionsFromTestInternalServerError Internal error

swagger:response getQuestionsFromTestInternalServerError
*/
type GetQuestionsFromTestInternalServerError struct {
}

// NewGetQuestionsFromTestInternalServerError creates GetQuestionsFromTestInternalServerError with default headers values
func NewGetQuestionsFromTestInternalServerError() *GetQuestionsFromTestInternalServerError {

	return &GetQuestionsFromTestInternalServerError{}
}

// WriteResponse to the client
func (o *GetQuestionsFromTestInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
