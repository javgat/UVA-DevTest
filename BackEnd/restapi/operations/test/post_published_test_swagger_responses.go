// Code generated by go-swagger; DO NOT EDIT.

package test

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// PostPublishedTestCreatedCode is the HTTP code returned for type PostPublishedTestCreated
const PostPublishedTestCreatedCode int = 201

/*PostPublishedTestCreated publishedTest created

swagger:response postPublishedTestCreated
*/
type PostPublishedTestCreated struct {

	/*
	  In: Body
	*/
	Payload *models.Test `json:"body,omitempty"`
}

// NewPostPublishedTestCreated creates PostPublishedTestCreated with default headers values
func NewPostPublishedTestCreated() *PostPublishedTestCreated {

	return &PostPublishedTestCreated{}
}

// WithPayload adds the payload to the post published test created response
func (o *PostPublishedTestCreated) WithPayload(payload *models.Test) *PostPublishedTestCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post published test created response
func (o *PostPublishedTestCreated) SetPayload(payload *models.Test) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostPublishedTestCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostPublishedTestBadRequestCode is the HTTP code returned for type PostPublishedTestBadRequest
const PostPublishedTestBadRequestCode int = 400

/*PostPublishedTestBadRequest Incorrect Request, or invalida data

swagger:response postPublishedTestBadRequest
*/
type PostPublishedTestBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostPublishedTestBadRequest creates PostPublishedTestBadRequest with default headers values
func NewPostPublishedTestBadRequest() *PostPublishedTestBadRequest {

	return &PostPublishedTestBadRequest{}
}

// WithPayload adds the payload to the post published test bad request response
func (o *PostPublishedTestBadRequest) WithPayload(payload *models.Error) *PostPublishedTestBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post published test bad request response
func (o *PostPublishedTestBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostPublishedTestBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostPublishedTestForbiddenCode is the HTTP code returned for type PostPublishedTestForbidden
const PostPublishedTestForbiddenCode int = 403

/*PostPublishedTestForbidden Not authorized to this content

swagger:response postPublishedTestForbidden
*/
type PostPublishedTestForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostPublishedTestForbidden creates PostPublishedTestForbidden with default headers values
func NewPostPublishedTestForbidden() *PostPublishedTestForbidden {

	return &PostPublishedTestForbidden{}
}

// WithPayload adds the payload to the post published test forbidden response
func (o *PostPublishedTestForbidden) WithPayload(payload *models.Error) *PostPublishedTestForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post published test forbidden response
func (o *PostPublishedTestForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostPublishedTestForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostPublishedTestGoneCode is the HTTP code returned for type PostPublishedTestGone
const PostPublishedTestGoneCode int = 410

/*PostPublishedTestGone That user (password and name) does not exist

swagger:response postPublishedTestGone
*/
type PostPublishedTestGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostPublishedTestGone creates PostPublishedTestGone with default headers values
func NewPostPublishedTestGone() *PostPublishedTestGone {

	return &PostPublishedTestGone{}
}

// WithPayload adds the payload to the post published test gone response
func (o *PostPublishedTestGone) WithPayload(payload *models.Error) *PostPublishedTestGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post published test gone response
func (o *PostPublishedTestGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostPublishedTestGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostPublishedTestInternalServerErrorCode is the HTTP code returned for type PostPublishedTestInternalServerError
const PostPublishedTestInternalServerErrorCode int = 500

/*PostPublishedTestInternalServerError Internal error

swagger:response postPublishedTestInternalServerError
*/
type PostPublishedTestInternalServerError struct {
}

// NewPostPublishedTestInternalServerError creates PostPublishedTestInternalServerError with default headers values
func NewPostPublishedTestInternalServerError() *PostPublishedTestInternalServerError {

	return &PostPublishedTestInternalServerError{}
}

// WriteResponse to the client
func (o *PostPublishedTestInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
