// Code generated by go-swagger; DO NOT EDIT.

package tiporol

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"uva-devtest/models"
)

// DeleteTipoRolHandlerFunc turns a function with the right signature into a delete tipo rol handler
type DeleteTipoRolHandlerFunc func(DeleteTipoRolParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteTipoRolHandlerFunc) Handle(params DeleteTipoRolParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// DeleteTipoRolHandler interface for that can handle valid delete tipo rol params
type DeleteTipoRolHandler interface {
	Handle(DeleteTipoRolParams, *models.User) middleware.Responder
}

// NewDeleteTipoRol creates a new http.Handler for the delete tipo rol operation
func NewDeleteTipoRol(ctx *middleware.Context, handler DeleteTipoRolHandler) *DeleteTipoRol {
	return &DeleteTipoRol{Context: ctx, Handler: handler}
}

/* DeleteTipoRol swagger:route DELETE /tipoRoles/{rolNombre} tiporol deleteTipoRol

Deletes a TipoRol.

Deletes a TipoRol. Every user with that TipoRol will now have the next less important TipoRol, or the next more important if there is none with less

*/
type DeleteTipoRol struct {
	Context *middleware.Context
	Handler DeleteTipoRolHandler
}

func (o *DeleteTipoRol) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteTipoRolParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
