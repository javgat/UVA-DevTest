// Code generated by go-swagger; DO NOT EDIT.

package tiporol

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"uva-devtest/models"
)

// PutTipoRolHandlerFunc turns a function with the right signature into a put tipo rol handler
type PutTipoRolHandlerFunc func(PutTipoRolParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn PutTipoRolHandlerFunc) Handle(params PutTipoRolParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// PutTipoRolHandler interface for that can handle valid put tipo rol params
type PutTipoRolHandler interface {
	Handle(PutTipoRolParams, *models.User) middleware.Responder
}

// NewPutTipoRol creates a new http.Handler for the put tipo rol operation
func NewPutTipoRol(ctx *middleware.Context, handler PutTipoRolHandler) *PutTipoRol {
	return &PutTipoRol{Context: ctx, Handler: handler}
}

/* PutTipoRol swagger:route PUT /tipoRoles/{rolNombre} tiporol putTipoRol

Modifies a TipoRol

Modifies a TipoRol

*/
type PutTipoRol struct {
	Context *middleware.Context
	Handler PutTipoRolHandler
}

func (o *PutTipoRol) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutTipoRolParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
