// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// AddTeamOfUserOKCode is the HTTP code returned for type AddTeamOfUserOK
const AddTeamOfUserOKCode int = 200

/*AddTeamOfUserOK User added to team

swagger:response addTeamOfUserOK
*/
type AddTeamOfUserOK struct {
}

// NewAddTeamOfUserOK creates AddTeamOfUserOK with default headers values
func NewAddTeamOfUserOK() *AddTeamOfUserOK {

	return &AddTeamOfUserOK{}
}

// WriteResponse to the client
func (o *AddTeamOfUserOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// AddTeamOfUserBadRequestCode is the HTTP code returned for type AddTeamOfUserBadRequest
const AddTeamOfUserBadRequestCode int = 400

/*AddTeamOfUserBadRequest Incorrect Request, or invalida data

swagger:response addTeamOfUserBadRequest
*/
type AddTeamOfUserBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddTeamOfUserBadRequest creates AddTeamOfUserBadRequest with default headers values
func NewAddTeamOfUserBadRequest() *AddTeamOfUserBadRequest {

	return &AddTeamOfUserBadRequest{}
}

// WithPayload adds the payload to the add team of user bad request response
func (o *AddTeamOfUserBadRequest) WithPayload(payload *models.Error) *AddTeamOfUserBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add team of user bad request response
func (o *AddTeamOfUserBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddTeamOfUserBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddTeamOfUserForbiddenCode is the HTTP code returned for type AddTeamOfUserForbidden
const AddTeamOfUserForbiddenCode int = 403

/*AddTeamOfUserForbidden Not authorized to this content

swagger:response addTeamOfUserForbidden
*/
type AddTeamOfUserForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddTeamOfUserForbidden creates AddTeamOfUserForbidden with default headers values
func NewAddTeamOfUserForbidden() *AddTeamOfUserForbidden {

	return &AddTeamOfUserForbidden{}
}

// WithPayload adds the payload to the add team of user forbidden response
func (o *AddTeamOfUserForbidden) WithPayload(payload *models.Error) *AddTeamOfUserForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add team of user forbidden response
func (o *AddTeamOfUserForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddTeamOfUserForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddTeamOfUserConflictCode is the HTTP code returned for type AddTeamOfUserConflict
const AddTeamOfUserConflictCode int = 409

/*AddTeamOfUserConflict A user with same username/email already exists

swagger:response addTeamOfUserConflict
*/
type AddTeamOfUserConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddTeamOfUserConflict creates AddTeamOfUserConflict with default headers values
func NewAddTeamOfUserConflict() *AddTeamOfUserConflict {

	return &AddTeamOfUserConflict{}
}

// WithPayload adds the payload to the add team of user conflict response
func (o *AddTeamOfUserConflict) WithPayload(payload *models.Error) *AddTeamOfUserConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add team of user conflict response
func (o *AddTeamOfUserConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddTeamOfUserConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddTeamOfUserGoneCode is the HTTP code returned for type AddTeamOfUserGone
const AddTeamOfUserGoneCode int = 410

/*AddTeamOfUserGone That user (password and name) does not exist

swagger:response addTeamOfUserGone
*/
type AddTeamOfUserGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddTeamOfUserGone creates AddTeamOfUserGone with default headers values
func NewAddTeamOfUserGone() *AddTeamOfUserGone {

	return &AddTeamOfUserGone{}
}

// WithPayload adds the payload to the add team of user gone response
func (o *AddTeamOfUserGone) WithPayload(payload *models.Error) *AddTeamOfUserGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add team of user gone response
func (o *AddTeamOfUserGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddTeamOfUserGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddTeamOfUserInternalServerErrorCode is the HTTP code returned for type AddTeamOfUserInternalServerError
const AddTeamOfUserInternalServerErrorCode int = 500

/*AddTeamOfUserInternalServerError Internal error

swagger:response addTeamOfUserInternalServerError
*/
type AddTeamOfUserInternalServerError struct {
}

// NewAddTeamOfUserInternalServerError creates AddTeamOfUserInternalServerError with default headers values
func NewAddTeamOfUserInternalServerError() *AddTeamOfUserInternalServerError {

	return &AddTeamOfUserInternalServerError{}
}

// WriteResponse to the client
func (o *AddTeamOfUserInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
