// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"uva-devtest/models"
)

// AddUserFromTeamHandlerFunc turns a function with the right signature into a add user from team handler
type AddUserFromTeamHandlerFunc func(AddUserFromTeamParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn AddUserFromTeamHandlerFunc) Handle(params AddUserFromTeamParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// AddUserFromTeamHandler interface for that can handle valid add user from team params
type AddUserFromTeamHandler interface {
	Handle(AddUserFromTeamParams, *models.User) middleware.Responder
}

// NewAddUserFromTeam creates a new http.Handler for the add user from team operation
func NewAddUserFromTeam(ctx *middleware.Context, handler AddUserFromTeamHandler) *AddUserFromTeam {
	return &AddUserFromTeam{Context: ctx, Handler: handler}
}

/* AddUserFromTeam swagger:route PUT /teams/{teamname}/users/{username} user team addUserFromTeam

Adds user {username} to team {teamname}

Adds user {username} to team {teamname}

*/
type AddUserFromTeam struct {
	Context *middleware.Context
	Handler AddUserFromTeamHandler
}

func (o *AddUserFromTeam) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddUserFromTeamParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
