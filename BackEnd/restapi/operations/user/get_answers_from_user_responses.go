// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// GetAnswersFromUserOKCode is the HTTP code returned for type GetAnswersFromUserOK
const GetAnswersFromUserOKCode int = 200

/*GetAnswersFromUserOK answers found

swagger:response getAnswersFromUserOK
*/
type GetAnswersFromUserOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Answer `json:"body,omitempty"`
}

// NewGetAnswersFromUserOK creates GetAnswersFromUserOK with default headers values
func NewGetAnswersFromUserOK() *GetAnswersFromUserOK {

	return &GetAnswersFromUserOK{}
}

// WithPayload adds the payload to the get answers from user o k response
func (o *GetAnswersFromUserOK) WithPayload(payload []*models.Answer) *GetAnswersFromUserOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get answers from user o k response
func (o *GetAnswersFromUserOK) SetPayload(payload []*models.Answer) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAnswersFromUserOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Answer, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetAnswersFromUserBadRequestCode is the HTTP code returned for type GetAnswersFromUserBadRequest
const GetAnswersFromUserBadRequestCode int = 400

/*GetAnswersFromUserBadRequest Incorrect Request, or invalida data

swagger:response getAnswersFromUserBadRequest
*/
type GetAnswersFromUserBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetAnswersFromUserBadRequest creates GetAnswersFromUserBadRequest with default headers values
func NewGetAnswersFromUserBadRequest() *GetAnswersFromUserBadRequest {

	return &GetAnswersFromUserBadRequest{}
}

// WithPayload adds the payload to the get answers from user bad request response
func (o *GetAnswersFromUserBadRequest) WithPayload(payload *models.Error) *GetAnswersFromUserBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get answers from user bad request response
func (o *GetAnswersFromUserBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAnswersFromUserBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAnswersFromUserForbiddenCode is the HTTP code returned for type GetAnswersFromUserForbidden
const GetAnswersFromUserForbiddenCode int = 403

/*GetAnswersFromUserForbidden Not authorized to this content

swagger:response getAnswersFromUserForbidden
*/
type GetAnswersFromUserForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetAnswersFromUserForbidden creates GetAnswersFromUserForbidden with default headers values
func NewGetAnswersFromUserForbidden() *GetAnswersFromUserForbidden {

	return &GetAnswersFromUserForbidden{}
}

// WithPayload adds the payload to the get answers from user forbidden response
func (o *GetAnswersFromUserForbidden) WithPayload(payload *models.Error) *GetAnswersFromUserForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get answers from user forbidden response
func (o *GetAnswersFromUserForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAnswersFromUserForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAnswersFromUserGoneCode is the HTTP code returned for type GetAnswersFromUserGone
const GetAnswersFromUserGoneCode int = 410

/*GetAnswersFromUserGone That user (password and name) does not exist

swagger:response getAnswersFromUserGone
*/
type GetAnswersFromUserGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetAnswersFromUserGone creates GetAnswersFromUserGone with default headers values
func NewGetAnswersFromUserGone() *GetAnswersFromUserGone {

	return &GetAnswersFromUserGone{}
}

// WithPayload adds the payload to the get answers from user gone response
func (o *GetAnswersFromUserGone) WithPayload(payload *models.Error) *GetAnswersFromUserGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get answers from user gone response
func (o *GetAnswersFromUserGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAnswersFromUserGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAnswersFromUserInternalServerErrorCode is the HTTP code returned for type GetAnswersFromUserInternalServerError
const GetAnswersFromUserInternalServerErrorCode int = 500

/*GetAnswersFromUserInternalServerError Internal error

swagger:response getAnswersFromUserInternalServerError
*/
type GetAnswersFromUserInternalServerError struct {
}

// NewGetAnswersFromUserInternalServerError creates GetAnswersFromUserInternalServerError with default headers values
func NewGetAnswersFromUserInternalServerError() *GetAnswersFromUserInternalServerError {

	return &GetAnswersFromUserInternalServerError{}
}

// WriteResponse to the client
func (o *GetAnswersFromUserInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
