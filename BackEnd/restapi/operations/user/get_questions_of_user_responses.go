// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"uva-devtest/models"
)

// GetQuestionsOfUserOKCode is the HTTP code returned for type GetQuestionsOfUserOK
const GetQuestionsOfUserOKCode int = 200

/*GetQuestionsOfUserOK questions found

swagger:response getQuestionsOfUserOK
*/
type GetQuestionsOfUserOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Question `json:"body,omitempty"`
}

// NewGetQuestionsOfUserOK creates GetQuestionsOfUserOK with default headers values
func NewGetQuestionsOfUserOK() *GetQuestionsOfUserOK {

	return &GetQuestionsOfUserOK{}
}

// WithPayload adds the payload to the get questions of user o k response
func (o *GetQuestionsOfUserOK) WithPayload(payload []*models.Question) *GetQuestionsOfUserOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get questions of user o k response
func (o *GetQuestionsOfUserOK) SetPayload(payload []*models.Question) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuestionsOfUserOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Question, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetQuestionsOfUserBadRequestCode is the HTTP code returned for type GetQuestionsOfUserBadRequest
const GetQuestionsOfUserBadRequestCode int = 400

/*GetQuestionsOfUserBadRequest Incorrect Request, or invalida data

swagger:response getQuestionsOfUserBadRequest
*/
type GetQuestionsOfUserBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetQuestionsOfUserBadRequest creates GetQuestionsOfUserBadRequest with default headers values
func NewGetQuestionsOfUserBadRequest() *GetQuestionsOfUserBadRequest {

	return &GetQuestionsOfUserBadRequest{}
}

// WithPayload adds the payload to the get questions of user bad request response
func (o *GetQuestionsOfUserBadRequest) WithPayload(payload *models.Error) *GetQuestionsOfUserBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get questions of user bad request response
func (o *GetQuestionsOfUserBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuestionsOfUserBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetQuestionsOfUserForbiddenCode is the HTTP code returned for type GetQuestionsOfUserForbidden
const GetQuestionsOfUserForbiddenCode int = 403

/*GetQuestionsOfUserForbidden Not authorized to this content

swagger:response getQuestionsOfUserForbidden
*/
type GetQuestionsOfUserForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetQuestionsOfUserForbidden creates GetQuestionsOfUserForbidden with default headers values
func NewGetQuestionsOfUserForbidden() *GetQuestionsOfUserForbidden {

	return &GetQuestionsOfUserForbidden{}
}

// WithPayload adds the payload to the get questions of user forbidden response
func (o *GetQuestionsOfUserForbidden) WithPayload(payload *models.Error) *GetQuestionsOfUserForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get questions of user forbidden response
func (o *GetQuestionsOfUserForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuestionsOfUserForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetQuestionsOfUserGoneCode is the HTTP code returned for type GetQuestionsOfUserGone
const GetQuestionsOfUserGoneCode int = 410

/*GetQuestionsOfUserGone That user (password and name) does not exist

swagger:response getQuestionsOfUserGone
*/
type GetQuestionsOfUserGone struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetQuestionsOfUserGone creates GetQuestionsOfUserGone with default headers values
func NewGetQuestionsOfUserGone() *GetQuestionsOfUserGone {

	return &GetQuestionsOfUserGone{}
}

// WithPayload adds the payload to the get questions of user gone response
func (o *GetQuestionsOfUserGone) WithPayload(payload *models.Error) *GetQuestionsOfUserGone {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get questions of user gone response
func (o *GetQuestionsOfUserGone) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetQuestionsOfUserGone) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(410)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetQuestionsOfUserInternalServerErrorCode is the HTTP code returned for type GetQuestionsOfUserInternalServerError
const GetQuestionsOfUserInternalServerErrorCode int = 500

/*GetQuestionsOfUserInternalServerError Internal error

swagger:response getQuestionsOfUserInternalServerError
*/
type GetQuestionsOfUserInternalServerError struct {
}

// NewGetQuestionsOfUserInternalServerError creates GetQuestionsOfUserInternalServerError with default headers values
func NewGetQuestionsOfUserInternalServerError() *GetQuestionsOfUserInternalServerError {

	return &GetQuestionsOfUserInternalServerError{}
}

// WriteResponse to the client
func (o *GetQuestionsOfUserInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(500)
}
