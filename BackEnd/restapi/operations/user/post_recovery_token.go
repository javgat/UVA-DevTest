// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostRecoveryTokenHandlerFunc turns a function with the right signature into a post recovery token handler
type PostRecoveryTokenHandlerFunc func(PostRecoveryTokenParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostRecoveryTokenHandlerFunc) Handle(params PostRecoveryTokenParams) middleware.Responder {
	return fn(params)
}

// PostRecoveryTokenHandler interface for that can handle valid post recovery token params
type PostRecoveryTokenHandler interface {
	Handle(PostRecoveryTokenParams) middleware.Responder
}

// NewPostRecoveryToken creates a new http.Handler for the post recovery token operation
func NewPostRecoveryToken(ctx *middleware.Context, handler PostRecoveryTokenHandler) *PostRecoveryToken {
	return &PostRecoveryToken{Context: ctx, Handler: handler}
}

/* PostRecoveryToken swagger:route POST /users/{username}/passRecoveryTokens user postRecoveryToken

Creates a new mailToken associated with the user <username>, for recovering the password

Creates a new mailToken associated with the user <username>, for recovering the password

*/
type PostRecoveryToken struct {
	Context *middleware.Context
	Handler PostRecoveryTokenHandler
}

func (o *PostRecoveryToken) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostRecoveryTokenParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
