// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RecoverPasswordHandlerFunc turns a function with the right signature into a recover password handler
type RecoverPasswordHandlerFunc func(RecoverPasswordParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RecoverPasswordHandlerFunc) Handle(params RecoverPasswordParams) middleware.Responder {
	return fn(params)
}

// RecoverPasswordHandler interface for that can handle valid recover password params
type RecoverPasswordHandler interface {
	Handle(RecoverPasswordParams) middleware.Responder
}

// NewRecoverPassword creates a new http.Handler for the recover password operation
func NewRecoverPassword(ctx *middleware.Context, handler RecoverPasswordHandler) *RecoverPassword {
	return &RecoverPassword{Context: ctx, Handler: handler}
}

/* RecoverPassword swagger:route PUT /users/{username}/recoverPassword user recoverPassword

Modifies the password of the user <username>, using a token

Modifies the role of the user <username>, using a token

*/
type RecoverPassword struct {
	Context *middleware.Context
	Handler RecoverPasswordHandler
}

func (o *RecoverPassword) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRecoverPasswordParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
