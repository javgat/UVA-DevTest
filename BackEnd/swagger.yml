swagger: '2.0'
info:
  description: DevTest
  version: 1.0.0
  title: DevTest
  # put the contact info for your development or API team
  contact:
    email: javigaton@gmail.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
- name: user
  description: Operations related to users
- name: auth
  description: Operations related to authentication
- name: team
  description: Operations related to teams
paths:
  /users:
    post:
      tags:
      - user
      - auth
      summary: adds an user
      operationId: RegisterUser
      description: Adds an user to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: signinUser
        description: User item to add
        required: true
        schema:
          $ref: '#/definitions/SigninUser'
      responses:
        201:
          description: user created
          schema:
            $ref: '#/definitions/User'
        400:
          $ref: '#/responses/BadRequestError'
        409:
          $ref: '#/responses/ConflictError'
        500:
          $ref: '#/responses/InternalServerError'
    get:
      security:
        - BearerHeader: []
      tags:
      - user
      summary: Returns all users. Only for admins
      operationId: GetUsers
      description: Returns all users. Only for admins
      produces:
      - application/json
      responses:
        200:
          description: users found
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        500:
          $ref: '#/responses/InternalServerError'
  /users/{username}:
    get:
      security:
        - BearerHeader: []
      tags:
      - user
      summary: Finds a user by its username
      operationId: getUserUsername
      description: Finds a user by its username
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user to find
        required: true
        type: string
      responses:
        200:
          description: user found
          schema:
            $ref: '#/definitions/User'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    put:
      security:
        - BearerHeader: []
      tags:
      - user
      summary: Modifies the user <username>
      operationId: putUserUsername
      description: Modifies the user <username>
      consumes:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user to modify its password
        required: true
        type: string
      - in: body
        name: user
        required: true
        description: User information updated
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: user updated
          schema:
            $ref: '#/definitions/User'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        409:
          $ref: '#/responses/ConflictError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /passwords/{username}:
    put:
      security:
        - BearerHeader: []
      tags:
      - user
      - auth
      summary: Modifies the password of the user <username>
      operationId: putPasswordUsername
      description: Modifies the password of the user <username>
      consumes:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user to modify its password
        required: true
        type: string
      - in: body
        name: passwordUpdate
        description: Password update information
        required: true
        schema:
          $ref: '#/definitions/PasswordUpdate'
      responses:
        200:
          description: Resource password modified correctly
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /accesstokens:
    post:
      tags:
      - auth
      summary: Registers a new authorized connection token
      operationId: Login
      description: Tries to login, and gets a JWT auth token if successful
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: loginUser
        description: User who is trying to generate a token
        required: true
        schema:
          $ref: '#/definitions/LoginUser'
      responses:
        200:
          description: Successful authentication
          schema:
            $ref: '#/definitions/JWTJson'
        400:
          $ref: '#/responses/BadRequestError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
responses:
  BadRequestError:
    description: Incorrect Request, or invalida data
    schema:
      $ref: '#/definitions/Error'
  ForbiddenError:
    description: Not authorized to this content
    schema:
      $ref: '#/definitions/Error'
  ConflictError:
    description: A user with same username/email already exists
    schema:
      $ref: '#/definitions/Error'
  GoneError:
    description: That user (password and name) does not exist
    schema:
      $ref: '#/definitions/Error'
  InternalServerError:
    description: Internal error
definitions:
  SigninUser:
    type: object
    required:
    - username
    - email
    - pass
    properties:
      username:
        type: string
        example: carlosg72
        pattern: '^[^@ \t\r\n]+$'
      email:
        type: string
        example: carlos@mail.com
        format: email
        pattern: '^[^@ \t\r\n]+@[^@ \t\r\n]+\.[^@ \t\r\n]+$'
      pass:
        type: string
        example: password
        format: password
        pattern: '^.{6,}$'
  LoginUser:
    type: object
    required:
    - loginid
    - pass
    properties:
      loginid:
        type: string
        example: carlosg72 || carlos@mail.com #??????
      pass:
        type: string
        example: password
        format: password
        pattern: '^.{6,}$'
  JWTJson:
    type: object
    required:
    - token
    properties:
      token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
  User:
    type: object
    required:
    - username
    - email
    properties:
      username:
        type: string
        example: carlosg72
        pattern: '^[^@ \t\r\n]+$'
      email:
        type: string
        example: carlos@mail.com
        format: email
        pattern: '^[^@ \t\r\n]+@[^@ \t\r\n]+\.[^@ \t\r\n]+$'
      fullname:
        type: string
        example: Javier Gat√≥n Herguedas
      type:
        type: string
        enum: [student, teacher, admin]
  PasswordUpdate:
    type: object
    required:
    - oldpass
    - newpass
    properties:
      oldpass:
        type: string
        example: password
        format: password
        pattern: '^.{6,}$'
      newpass:
        type: string
        example: password
        format: password
        pattern: '^.{6,}$'
  Error:
    type: object
    required:
    - message
    properties:
      message:
        type: string
        example: Object not found
securityDefinitions:
  # Bearer: abcdef12345
  BearerHeader:
    type: apiKey
    in: header
    name: Bearer
host: localhost
basePath: /DevTest
schemes:
 - https
