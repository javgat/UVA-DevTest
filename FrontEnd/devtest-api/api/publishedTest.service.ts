/**
 * DevTest
 * DevTest
 *
 * OpenAPI spec version: 1.0.0
 * Contact: javigaton@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Answer } from '../model/answer';
import { Message } from '../model/message';
import { Option } from '../model/option';
import { PTestUpdate } from '../model/pTestUpdate';
import { Prueba } from '../model/prueba';
import { PublishTestParams } from '../model/publishTestParams';
import { Question } from '../model/question';
import { QuestionAnswer } from '../model/questionAnswer';
import { Tag } from '../model/tag';
import { Team } from '../model/team';
import { Test } from '../model/test';
import { User } from '../model/user';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PublishedTestService {

    protected basePath = 'https://localhost/DevTest';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Returns all answers from a published test
     * Returns all answers from a published test
     * @param testid Id of the publishedTest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAnswersFromPublishedTests(testid: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Answer>>;
    public getAnswersFromPublishedTests(testid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Answer>>>;
    public getAnswersFromPublishedTests(testid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Answer>>>;
    public getAnswersFromPublishedTests(testid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getAnswersFromPublishedTests.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Answer>>(`${this.basePath}/publishedTests/${encodeURIComponent(String(testid))}/answers`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all answers from a published test that are corrected
     * Returns all answers from a published test that are corrected
     * @param testid Id of the publishedTest
     * @param orderByAnswer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCorrectedAnswersFromPublishedTests(testid: number, orderByAnswer?: 'newStartDate' | 'oldStartDate' | 'morePuntuacion' | 'lessPuntuacion' | 'moreDuracion' | 'lessDuracion', observe?: 'body', reportProgress?: boolean): Observable<Array<Answer>>;
    public getCorrectedAnswersFromPublishedTests(testid: number, orderByAnswer?: 'newStartDate' | 'oldStartDate' | 'morePuntuacion' | 'lessPuntuacion' | 'moreDuracion' | 'lessDuracion', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Answer>>>;
    public getCorrectedAnswersFromPublishedTests(testid: number, orderByAnswer?: 'newStartDate' | 'oldStartDate' | 'morePuntuacion' | 'lessPuntuacion' | 'moreDuracion' | 'lessDuracion', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Answer>>>;
    public getCorrectedAnswersFromPublishedTests(testid: number, orderByAnswer?: 'newStartDate' | 'oldStartDate' | 'morePuntuacion' | 'lessPuntuacion' | 'moreDuracion' | 'lessDuracion', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getCorrectedAnswersFromPublishedTests.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (orderByAnswer !== undefined && orderByAnswer !== null) {
            queryParameters = queryParameters.set('orderByAnswer', <any>orderByAnswer);
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Answer>>(`${this.basePath}/publishedTests/${encodeURIComponent(String(testid))}/correctedAnswers`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all options from a question.
     * Returns all options from a question.
     * @param testid Id of the publishedTest
     * @param questionid Id of the question to find its options
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOptionsFromPublishedQuestion(testid: number, questionid: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Option>>;
    public getOptionsFromPublishedQuestion(testid: number, questionid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Option>>>;
    public getOptionsFromPublishedQuestion(testid: number, questionid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Option>>>;
    public getOptionsFromPublishedQuestion(testid: number, questionid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getOptionsFromPublishedQuestion.');
        }

        if (questionid === null || questionid === undefined) {
            throw new Error('Required parameter questionid was null or undefined when calling getOptionsFromPublishedQuestion.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // authentication (NoRegistered) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["NotLoggedIn"]) {
            headers = headers.set('NotLoggedIn', this.configuration.apiKeys["NotLoggedIn"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Option>>(`${this.basePath}/publishedTests/${encodeURIComponent(String(testid))}/questions/${encodeURIComponent(String(questionid))}/options`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a public publishedTest
     * Returns a public publishedTest
     * @param testid Id of the publishedTest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPublicPublishedTest(testid: number, observe?: 'body', reportProgress?: boolean): Observable<Test>;
    public getPublicPublishedTest(testid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Test>>;
    public getPublicPublishedTest(testid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Test>>;
    public getPublicPublishedTest(testid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getPublicPublishedTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // authentication (NoRegistered) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["NotLoggedIn"]) {
            headers = headers.set('NotLoggedIn', this.configuration.apiKeys["NotLoggedIn"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Test>(`${this.basePath}/publicPublishedTests/${encodeURIComponent(String(testid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all public publishedTests
     * Returns all public publishedTests
     * @param tags 
     * @param likeTitle 
     * @param orderby Indicates which element is first returned. In case of tie it unties with newdate first
     * @param limit max number of elements to be returned
     * @param offset first elements to be skipped at being returned
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPublicPublishedTests(tags?: Array<Array<string>>, likeTitle?: string, orderby?: 'newDate' | 'oldDate' | 'moreFav' | 'lessFav' | 'moreTime' | 'lessTime', limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Test>>;
    public getPublicPublishedTests(tags?: Array<Array<string>>, likeTitle?: string, orderby?: 'newDate' | 'oldDate' | 'moreFav' | 'lessFav' | 'moreTime' | 'lessTime', limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Test>>>;
    public getPublicPublishedTests(tags?: Array<Array<string>>, likeTitle?: string, orderby?: 'newDate' | 'oldDate' | 'moreFav' | 'lessFav' | 'moreTime' | 'lessTime', limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Test>>>;
    public getPublicPublishedTests(tags?: Array<Array<string>>, likeTitle?: string, orderby?: 'newDate' | 'oldDate' | 'moreFav' | 'lessFav' | 'moreTime' | 'lessTime', limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tags) {
            queryParameters = queryParameters.set('tags', tags.join(COLLECTION_FORMATS['pipes']));
        }
        if (likeTitle !== undefined && likeTitle !== null) {
            queryParameters = queryParameters.set('likeTitle', <any>likeTitle);
        }
        if (orderby !== undefined && orderby !== null) {
            queryParameters = queryParameters.set('orderby', <any>orderby);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // authentication (NoRegistered) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["NotLoggedIn"]) {
            headers = headers.set('NotLoggedIn', this.configuration.apiKeys["NotLoggedIn"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Test>>(`${this.basePath}/publicPublishedTests`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a publishedTest
     * Returns a publishedTest
     * @param testid Id of the publishedTest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPublishedTest(testid: number, observe?: 'body', reportProgress?: boolean): Observable<Test>;
    public getPublishedTest(testid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Test>>;
    public getPublishedTest(testid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Test>>;
    public getPublishedTest(testid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getPublishedTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // authentication (NoRegistered) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["NotLoggedIn"]) {
            headers = headers.set('NotLoggedIn', this.configuration.apiKeys["NotLoggedIn"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Test>(`${this.basePath}/publishedTests/${encodeURIComponent(String(testid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all publishedTests
     * Returns all publishedTests
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPublishedTests(observe?: 'body', reportProgress?: boolean): Observable<Array<Test>>;
    public getPublishedTests(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Test>>>;
    public getPublishedTests(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Test>>>;
    public getPublishedTests(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Test>>(`${this.basePath}/publishedTests`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all publishedTest originated from the same test
     * Returns all publishedTest originated from the same test
     * @param testid Id of the original test
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPublishedTestsFromTest(testid: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Test>>;
    public getPublishedTestsFromTest(testid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Test>>>;
    public getPublishedTestsFromTest(testid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Test>>>;
    public getPublishedTestsFromTest(testid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getPublishedTestsFromTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // authentication (NoRegistered) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["NotLoggedIn"]) {
            headers = headers.set('NotLoggedIn', this.configuration.apiKeys["NotLoggedIn"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Test>>(`${this.basePath}/tests/${encodeURIComponent(String(testid))}/publishedTests`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all questions answers to a question of a published test
     * Returns all questions answers to a question of a published test
     * @param testid Id of the publishedTest
     * @param questionid Id of the question
     * @param likeUsername 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getQuestionAnswersFromPublishedTestQuestion(testid: number, questionid: number, likeUsername?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<QuestionAnswer>>;
    public getQuestionAnswersFromPublishedTestQuestion(testid: number, questionid: number, likeUsername?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<QuestionAnswer>>>;
    public getQuestionAnswersFromPublishedTestQuestion(testid: number, questionid: number, likeUsername?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<QuestionAnswer>>>;
    public getQuestionAnswersFromPublishedTestQuestion(testid: number, questionid: number, likeUsername?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getQuestionAnswersFromPublishedTestQuestion.');
        }

        if (questionid === null || questionid === undefined) {
            throw new Error('Required parameter questionid was null or undefined when calling getQuestionAnswersFromPublishedTestQuestion.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (likeUsername !== undefined && likeUsername !== null) {
            queryParameters = queryParameters.set('likeUsername', <any>likeUsername);
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<QuestionAnswer>>(`${this.basePath}/publishedTests/${encodeURIComponent(String(testid))}/questions/${encodeURIComponent(String(questionid))}/qanswers`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a question from a published test
     * Returns a question from a published test
     * @param testid Id of the publishedTest
     * @param questionid Id of the question to get
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getQuestionFromPublishedTests(testid: number, questionid: number, observe?: 'body', reportProgress?: boolean): Observable<Question>;
    public getQuestionFromPublishedTests(testid: number, questionid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Question>>;
    public getQuestionFromPublishedTests(testid: number, questionid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Question>>;
    public getQuestionFromPublishedTests(testid: number, questionid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getQuestionFromPublishedTests.');
        }

        if (questionid === null || questionid === undefined) {
            throw new Error('Required parameter questionid was null or undefined when calling getQuestionFromPublishedTests.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // authentication (NoRegistered) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["NotLoggedIn"]) {
            headers = headers.set('NotLoggedIn', this.configuration.apiKeys["NotLoggedIn"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Question>(`${this.basePath}/publishedTests/${encodeURIComponent(String(testid))}/questions/${encodeURIComponent(String(questionid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all questions from a published test
     * Returns all questions from a published test
     * @param testid Id of the publishedTest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getQuestionsFromPublishedTests(testid: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Question>>;
    public getQuestionsFromPublishedTests(testid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Question>>>;
    public getQuestionsFromPublishedTests(testid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Question>>>;
    public getQuestionsFromPublishedTests(testid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getQuestionsFromPublishedTests.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // authentication (NoRegistered) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["NotLoggedIn"]) {
            headers = headers.set('NotLoggedIn', this.configuration.apiKeys["NotLoggedIn"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Question>>(`${this.basePath}/publishedTests/${encodeURIComponent(String(testid))}/questions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a tag from a published test.
     * Returns a tag from a published test.
     * @param testid Id of the published test to find its tags
     * @param tag Tag to find
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTagFromPublishedTest(testid: number, tag: string, observe?: 'body', reportProgress?: boolean): Observable<Tag>;
    public getTagFromPublishedTest(testid: number, tag: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Tag>>;
    public getTagFromPublishedTest(testid: number, tag: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Tag>>;
    public getTagFromPublishedTest(testid: number, tag: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getTagFromPublishedTest.');
        }

        if (tag === null || tag === undefined) {
            throw new Error('Required parameter tag was null or undefined when calling getTagFromPublishedTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // authentication (NoRegistered) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["NotLoggedIn"]) {
            headers = headers.set('NotLoggedIn', this.configuration.apiKeys["NotLoggedIn"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Tag>(`${this.basePath}/publishedTests/${encodeURIComponent(String(testid))}/tags/${encodeURIComponent(String(tag))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all tags from a question.
     * Returns all tags from a question.
     * @param testid Id of the publishedTest
     * @param questionid Id of the question to find its tags
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTagsFromPublishedQuestion(testid: number, questionid: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Tag>>;
    public getTagsFromPublishedQuestion(testid: number, questionid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Tag>>>;
    public getTagsFromPublishedQuestion(testid: number, questionid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Tag>>>;
    public getTagsFromPublishedQuestion(testid: number, questionid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getTagsFromPublishedQuestion.');
        }

        if (questionid === null || questionid === undefined) {
            throw new Error('Required parameter questionid was null or undefined when calling getTagsFromPublishedQuestion.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // authentication (NoRegistered) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["NotLoggedIn"]) {
            headers = headers.set('NotLoggedIn', this.configuration.apiKeys["NotLoggedIn"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Tag>>(`${this.basePath}/publishedTests/${encodeURIComponent(String(testid))}/questions/${encodeURIComponent(String(questionid))}/tags`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all tags from a published test.
     * Returns all tags from a published test.
     * @param testid Id of the published test to find its tags
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTagsFromPublishedTest(testid: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Tag>>;
    public getTagsFromPublishedTest(testid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Tag>>>;
    public getTagsFromPublishedTest(testid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Tag>>>;
    public getTagsFromPublishedTest(testid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getTagsFromPublishedTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // authentication (NoRegistered) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["NotLoggedIn"]) {
            headers = headers.set('NotLoggedIn', this.configuration.apiKeys["NotLoggedIn"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Tag>>(`${this.basePath}/publishedTests/${encodeURIComponent(String(testid))}/tags`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all teams from a publishedTest.
     * Returns all teams from a publishedTest.
     * @param testid Id of the publishedTest to find its teams
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTeamsFromPublishedTest(testid: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Team>>;
    public getTeamsFromPublishedTest(testid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Team>>>;
    public getTeamsFromPublishedTest(testid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Team>>>;
    public getTeamsFromPublishedTest(testid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getTeamsFromPublishedTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Team>>(`${this.basePath}/publishedTests/${encodeURIComponent(String(testid))}/teams`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all answers from a published test that are uncorrected
     * Returns all answers from a published test that are uncorrected
     * @param testid Id of the publishedTest
     * @param orderByAnswer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUncorrectedAnswersFromPublishedTests(testid: number, orderByAnswer?: 'newStartDate' | 'oldStartDate' | 'morePuntuacion' | 'lessPuntuacion' | 'moreDuracion' | 'lessDuracion', observe?: 'body', reportProgress?: boolean): Observable<Array<Answer>>;
    public getUncorrectedAnswersFromPublishedTests(testid: number, orderByAnswer?: 'newStartDate' | 'oldStartDate' | 'morePuntuacion' | 'lessPuntuacion' | 'moreDuracion' | 'lessDuracion', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Answer>>>;
    public getUncorrectedAnswersFromPublishedTests(testid: number, orderByAnswer?: 'newStartDate' | 'oldStartDate' | 'morePuntuacion' | 'lessPuntuacion' | 'moreDuracion' | 'lessDuracion', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Answer>>>;
    public getUncorrectedAnswersFromPublishedTests(testid: number, orderByAnswer?: 'newStartDate' | 'oldStartDate' | 'morePuntuacion' | 'lessPuntuacion' | 'moreDuracion' | 'lessDuracion', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getUncorrectedAnswersFromPublishedTests.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (orderByAnswer !== undefined && orderByAnswer !== null) {
            queryParameters = queryParameters.set('orderByAnswer', <any>orderByAnswer);
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Answer>>(`${this.basePath}/publishedTests/${encodeURIComponent(String(testid))}/uncorrectedAnswers`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all users from a publishedTest.
     * Returns all users from a publishedTest.
     * @param testid Id of the publishedTest to find its users
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUsersFromPublishedTest(testid: number, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public getUsersFromPublishedTest(testid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public getUsersFromPublishedTest(testid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public getUsersFromPublishedTest(testid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getUsersFromPublishedTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<User>>(`${this.basePath}/publishedTests/${encodeURIComponent(String(testid))}/users`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all pruebas visibles from a question.
     * Returns all pruebas visibles from a question.
     * @param testid Id of the test
     * @param questionid Id of the question to find its pruebas visibles
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVisiblePruebasFromQuestionTest(testid: number, questionid: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Prueba>>;
    public getVisiblePruebasFromQuestionTest(testid: number, questionid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Prueba>>>;
    public getVisiblePruebasFromQuestionTest(testid: number, questionid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Prueba>>>;
    public getVisiblePruebasFromQuestionTest(testid: number, questionid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getVisiblePruebasFromQuestionTest.');
        }

        if (questionid === null || questionid === undefined) {
            throw new Error('Required parameter questionid was null or undefined when calling getVisiblePruebasFromQuestionTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Prueba>>(`${this.basePath}/publishedTests/${encodeURIComponent(String(testid))}/questions/${encodeURIComponent(String(questionid))}/pruebas`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Invites a team to do a test
     * Invites a team to do a test
     * @param teamname Teamname of the team to invite to test
     * @param testid Id of the test to find
     * @param message Message sent to the users as a notification
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public inviteTeamToPublishedTest(teamname: string, testid: number, message?: Message, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public inviteTeamToPublishedTest(teamname: string, testid: number, message?: Message, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public inviteTeamToPublishedTest(teamname: string, testid: number, message?: Message, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public inviteTeamToPublishedTest(teamname: string, testid: number, message?: Message, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling inviteTeamToPublishedTest.');
        }

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling inviteTeamToPublishedTest.');
        }


        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/publishedTests/${encodeURIComponent(String(testid))}/teams/${encodeURIComponent(String(teamname))}`,
            message,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Invites a user to do a test
     * Invites a user to do a test
     * @param username Username of the user who can answer the publishedTest
     * @param testid Id of the test
     * @param message Message sent to the user as a notification
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public inviteUserToPublishedTest(username: string, testid: number, message?: Message, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public inviteUserToPublishedTest(username: string, testid: number, message?: Message, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public inviteUserToPublishedTest(username: string, testid: number, message?: Message, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public inviteUserToPublishedTest(username: string, testid: number, message?: Message, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling inviteUserToPublishedTest.');
        }

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling inviteUserToPublishedTest.');
        }


        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/publishedTests/${encodeURIComponent(String(testid))}/users/${encodeURIComponent(String(username))}`,
            message,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new publishedTest. The user must be the owner of the test.
     * Creates a new publishedTest. The user must be the owner of the test.
     * @param publishTestParams Some attributes of the new test
     * @param testid Id of the test to publish
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postPublishedTest(publishTestParams: PublishTestParams, testid: number, observe?: 'body', reportProgress?: boolean): Observable<Test>;
    public postPublishedTest(publishTestParams: PublishTestParams, testid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Test>>;
    public postPublishedTest(publishTestParams: PublishTestParams, testid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Test>>;
    public postPublishedTest(publishTestParams: PublishTestParams, testid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (publishTestParams === null || publishTestParams === undefined) {
            throw new Error('Required parameter publishTestParams was null or undefined when calling postPublishedTest.');
        }

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling postPublishedTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Test>(`${this.basePath}/tests/${encodeURIComponent(String(testid))}/publishedTests`,
            publishTestParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a published test. Only a few parameters are affected
     * Updates a published test. Only a few parameters are affected
     * @param testid Id of the published test to update
     * @param pTestUpdate PTest new parameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putPublishedTest(testid: number, pTestUpdate: PTestUpdate, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public putPublishedTest(testid: number, pTestUpdate: PTestUpdate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public putPublishedTest(testid: number, pTestUpdate: PTestUpdate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public putPublishedTest(testid: number, pTestUpdate: PTestUpdate, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling putPublishedTest.');
        }

        if (pTestUpdate === null || pTestUpdate === undefined) {
            throw new Error('Required parameter pTestUpdate was null or undefined when calling putPublishedTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/publishedTests/${encodeURIComponent(String(testid))}`,
            pTestUpdate,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Removes a team to do a test
     * Removes a team to do a test
     * @param teamname Teamname of the team to Remove from test
     * @param testid Id of the test to find
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeTeamToPublishedTest(teamname: string, testid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeTeamToPublishedTest(teamname: string, testid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeTeamToPublishedTest(teamname: string, testid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeTeamToPublishedTest(teamname: string, testid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling removeTeamToPublishedTest.');
        }

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling removeTeamToPublishedTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/publishedTests/${encodeURIComponent(String(testid))}/teams/${encodeURIComponent(String(teamname))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Removes a user from a test
     * Removes a user to do a test
     * @param username Username of the user who cant answer the publishedTest
     * @param testid Id of the test
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeUserToPublishedTest(username: string, testid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeUserToPublishedTest(username: string, testid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeUserToPublishedTest(username: string, testid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeUserToPublishedTest(username: string, testid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling removeUserToPublishedTest.');
        }

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling removeUserToPublishedTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/publishedTests/${encodeURIComponent(String(testid))}/users/${encodeURIComponent(String(username))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
