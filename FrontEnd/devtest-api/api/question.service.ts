/**
 * DevTest
 * DevTest
 *
 * OpenAPI spec version: 1.0.0
 * Contact: javigaton@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Option } from '../model/option';
import { Question } from '../model/question';
import { Tag } from '../model/tag';
import { Team } from '../model/team';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class QuestionService {

    protected basePath = 'https://localhost/DevTest';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Adds a tag to a question
     * Adds a tag to a question
     * @param questionid Id of the question to add a tag
     * @param tag Tag to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addTagToQuestion(questionid: number, tag: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addTagToQuestion(questionid: number, tag: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addTagToQuestion(questionid: number, tag: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addTagToQuestion(questionid: number, tag: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (questionid === null || questionid === undefined) {
            throw new Error('Required parameter questionid was null or undefined when calling addTagToQuestion.');
        }

        if (tag === null || tag === undefined) {
            throw new Error('Required parameter tag was null or undefined when calling addTagToQuestion.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/questions/${encodeURIComponent(String(questionid))}/tags/${encodeURIComponent(String(tag))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adds a team to administer a question
     * Adds a team to administer a question
     * @param teamname Teamname of the team to let administrate
     * @param questionid Id of the question to find
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addTeamToQuestion(teamname: string, questionid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addTeamToQuestion(teamname: string, questionid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addTeamToQuestion(teamname: string, questionid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addTeamToQuestion(teamname: string, questionid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling addTeamToQuestion.');
        }

        if (questionid === null || questionid === undefined) {
            throw new Error('Required parameter questionid was null or undefined when calling addTeamToQuestion.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/questions/${encodeURIComponent(String(questionid))}/teams/${encodeURIComponent(String(teamname))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes an option to a question.
     * Deletes an option to a question.
     * @param questionid Id of the question to find its option
     * @param optionindex Index of the option to delete
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteOption(questionid: number, optionindex: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteOption(questionid: number, optionindex: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteOption(questionid: number, optionindex: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteOption(questionid: number, optionindex: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (questionid === null || questionid === undefined) {
            throw new Error('Required parameter questionid was null or undefined when calling deleteOption.');
        }

        if (optionindex === null || optionindex === undefined) {
            throw new Error('Required parameter optionindex was null or undefined when calling deleteOption.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/questions/${encodeURIComponent(String(questionid))}/options/${encodeURIComponent(String(optionindex))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a question
     * Deletes a question
     * @param questionid Id of the question to delete
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteQuestion(questionid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteQuestion(questionid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteQuestion(questionid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteQuestion(questionid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (questionid === null || questionid === undefined) {
            throw new Error('Required parameter questionid was null or undefined when calling deleteQuestion.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/questions/${encodeURIComponent(String(questionid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all non-published questions
     * Returns all non-published questions
     * @param tags 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllEditQuestions(tags?: Array<Array<string>>, observe?: 'body', reportProgress?: boolean): Observable<Array<Question>>;
    public getAllEditQuestions(tags?: Array<Array<string>>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Question>>>;
    public getAllEditQuestions(tags?: Array<Array<string>>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Question>>>;
    public getAllEditQuestions(tags?: Array<Array<string>>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tags) {
            queryParameters = queryParameters.set('tags', tags.join(COLLECTION_FORMATS['pipes']));
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Question>>(`${this.basePath}/allEditQuestions`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all questions
     * Returns all questions
     * @param tags 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllQuestions(tags?: Array<Array<string>>, observe?: 'body', reportProgress?: boolean): Observable<Array<Question>>;
    public getAllQuestions(tags?: Array<Array<string>>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Question>>>;
    public getAllQuestions(tags?: Array<Array<string>>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Question>>>;
    public getAllQuestions(tags?: Array<Array<string>>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tags) {
            queryParameters = queryParameters.set('tags', tags.join(COLLECTION_FORMATS['pipes']));
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Question>>(`${this.basePath}/allQuestions`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all public non-published questions
     * Returns all public non-published questions
     * @param tags 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEditQuestions(tags?: Array<Array<string>>, observe?: 'body', reportProgress?: boolean): Observable<Array<Question>>;
    public getEditQuestions(tags?: Array<Array<string>>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Question>>>;
    public getEditQuestions(tags?: Array<Array<string>>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Question>>>;
    public getEditQuestions(tags?: Array<Array<string>>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tags) {
            queryParameters = queryParameters.set('tags', tags.join(COLLECTION_FORMATS['pipes']));
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Question>>(`${this.basePath}/editQuestions`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns an options from a question.
     * Returns an option from a question.
     * @param questionid Id of the question to find its option
     * @param optionindex Index of the option to find
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOptionFromQuestion(questionid: number, optionindex: number, observe?: 'body', reportProgress?: boolean): Observable<Option>;
    public getOptionFromQuestion(questionid: number, optionindex: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Option>>;
    public getOptionFromQuestion(questionid: number, optionindex: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Option>>;
    public getOptionFromQuestion(questionid: number, optionindex: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (questionid === null || questionid === undefined) {
            throw new Error('Required parameter questionid was null or undefined when calling getOptionFromQuestion.');
        }

        if (optionindex === null || optionindex === undefined) {
            throw new Error('Required parameter optionindex was null or undefined when calling getOptionFromQuestion.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Option>(`${this.basePath}/questions/${encodeURIComponent(String(questionid))}/options/${encodeURIComponent(String(optionindex))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all options from a question.
     * Returns all options from a question.
     * @param questionid Id of the question to find its options
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOptionsFromQuestion(questionid: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Option>>;
    public getOptionsFromQuestion(questionid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Option>>>;
    public getOptionsFromQuestion(questionid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Option>>>;
    public getOptionsFromQuestion(questionid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (questionid === null || questionid === undefined) {
            throw new Error('Required parameter questionid was null or undefined when calling getOptionsFromQuestion.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Option>>(`${this.basePath}/questions/${encodeURIComponent(String(questionid))}/options`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a question
     * Returns a question
     * @param questionid Id of the question to find
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getQuestion(questionid: number, observe?: 'body', reportProgress?: boolean): Observable<Question>;
    public getQuestion(questionid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Question>>;
    public getQuestion(questionid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Question>>;
    public getQuestion(questionid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (questionid === null || questionid === undefined) {
            throw new Error('Required parameter questionid was null or undefined when calling getQuestion.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Question>(`${this.basePath}/questions/${encodeURIComponent(String(questionid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all public questions
     * Returns all public questions
     * @param tags 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getQuestions(tags?: Array<Array<string>>, observe?: 'body', reportProgress?: boolean): Observable<Array<Question>>;
    public getQuestions(tags?: Array<Array<string>>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Question>>>;
    public getQuestions(tags?: Array<Array<string>>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Question>>>;
    public getQuestions(tags?: Array<Array<string>>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tags) {
            queryParameters = queryParameters.set('tags', tags.join(COLLECTION_FORMATS['pipes']));
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Question>>(`${this.basePath}/questions`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a tag from a question.
     * Returns a tag from a question.
     * @param questionid Id of the question to find its tags
     * @param tag Tag to find
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTagFromQuestion(questionid: number, tag: string, observe?: 'body', reportProgress?: boolean): Observable<Tag>;
    public getTagFromQuestion(questionid: number, tag: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Tag>>;
    public getTagFromQuestion(questionid: number, tag: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Tag>>;
    public getTagFromQuestion(questionid: number, tag: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (questionid === null || questionid === undefined) {
            throw new Error('Required parameter questionid was null or undefined when calling getTagFromQuestion.');
        }

        if (tag === null || tag === undefined) {
            throw new Error('Required parameter tag was null or undefined when calling getTagFromQuestion.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Tag>(`${this.basePath}/questions/${encodeURIComponent(String(questionid))}/tags/${encodeURIComponent(String(tag))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all tags from a question.
     * Returns all tags from a question.
     * @param questionid Id of the question to find its tags
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTagsFromQuestion(questionid: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Tag>>;
    public getTagsFromQuestion(questionid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Tag>>>;
    public getTagsFromQuestion(questionid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Tag>>>;
    public getTagsFromQuestion(questionid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (questionid === null || questionid === undefined) {
            throw new Error('Required parameter questionid was null or undefined when calling getTagsFromQuestion.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Tag>>(`${this.basePath}/questions/${encodeURIComponent(String(questionid))}/tags`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all teams from a question.
     * Returns all teams from a question.
     * @param questionid Id of the question to find its teams
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTeamsFromQuestion(questionid: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Team>>;
    public getTeamsFromQuestion(questionid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Team>>>;
    public getTeamsFromQuestion(questionid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Team>>>;
    public getTeamsFromQuestion(questionid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (questionid === null || questionid === undefined) {
            throw new Error('Required parameter questionid was null or undefined when calling getTeamsFromQuestion.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Team>>(`${this.basePath}/questions/${encodeURIComponent(String(questionid))}/teams`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates new option to a question.
     * Creates new option to a question.
     * @param questionid Id of the question to find its options
     * @param option Option to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postOption(questionid: number, option: Option, observe?: 'body', reportProgress?: boolean): Observable<Option>;
    public postOption(questionid: number, option: Option, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Option>>;
    public postOption(questionid: number, option: Option, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Option>>;
    public postOption(questionid: number, option: Option, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (questionid === null || questionid === undefined) {
            throw new Error('Required parameter questionid was null or undefined when calling postOption.');
        }

        if (option === null || option === undefined) {
            throw new Error('Required parameter option was null or undefined when calling postOption.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Option>(`${this.basePath}/questions/${encodeURIComponent(String(questionid))}/options`,
            option,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a question
     * Creates a question
     * @param username Username of the user who owns the question
     * @param question Question to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postQuestion(username: string, question: Question, observe?: 'body', reportProgress?: boolean): Observable<Question>;
    public postQuestion(username: string, question: Question, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Question>>;
    public postQuestion(username: string, question: Question, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Question>>;
    public postQuestion(username: string, question: Question, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling postQuestion.');
        }

        if (question === null || question === undefined) {
            throw new Error('Required parameter question was null or undefined when calling postQuestion.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Question>(`${this.basePath}/users/${encodeURIComponent(String(username))}/questions`,
            question,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates an option to a question.
     * Updates an option to a question.
     * @param questionid Id of the question to find its option
     * @param optionindex Index of the option to update
     * @param option Option updated
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putOption(questionid: number, optionindex: number, option: Option, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public putOption(questionid: number, optionindex: number, option: Option, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public putOption(questionid: number, optionindex: number, option: Option, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public putOption(questionid: number, optionindex: number, option: Option, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (questionid === null || questionid === undefined) {
            throw new Error('Required parameter questionid was null or undefined when calling putOption.');
        }

        if (optionindex === null || optionindex === undefined) {
            throw new Error('Required parameter optionindex was null or undefined when calling putOption.');
        }

        if (option === null || option === undefined) {
            throw new Error('Required parameter option was null or undefined when calling putOption.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/questions/${encodeURIComponent(String(questionid))}/options/${encodeURIComponent(String(optionindex))}`,
            option,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a question
     * Updates a question
     * @param questionid Id of the question to update
     * @param question Question modified
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putQuestion(questionid: number, question: Question, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public putQuestion(questionid: number, question: Question, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public putQuestion(questionid: number, question: Question, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public putQuestion(questionid: number, question: Question, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (questionid === null || questionid === undefined) {
            throw new Error('Required parameter questionid was null or undefined when calling putQuestion.');
        }

        if (question === null || question === undefined) {
            throw new Error('Required parameter question was null or undefined when calling putQuestion.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/questions/${encodeURIComponent(String(questionid))}`,
            question,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Removes a tag from a question
     * Removes a tag from a question
     * @param questionid Id of the question to remove a tag
     * @param tag Tag to remove
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeTagFromQuestion(questionid: number, tag: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeTagFromQuestion(questionid: number, tag: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeTagFromQuestion(questionid: number, tag: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeTagFromQuestion(questionid: number, tag: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (questionid === null || questionid === undefined) {
            throw new Error('Required parameter questionid was null or undefined when calling removeTagFromQuestion.');
        }

        if (tag === null || tag === undefined) {
            throw new Error('Required parameter tag was null or undefined when calling removeTagFromQuestion.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/questions/${encodeURIComponent(String(questionid))}/tags/${encodeURIComponent(String(tag))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Removes a team to administer a question
     * Removes a team to administer a question
     * @param teamname Teamname of the team to remove from question
     * @param questionid Id of the question to find
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeTeamToQuestion(teamname: string, questionid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeTeamToQuestion(teamname: string, questionid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeTeamToQuestion(teamname: string, questionid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeTeamToQuestion(teamname: string, questionid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling removeTeamToQuestion.');
        }

        if (questionid === null || questionid === undefined) {
            throw new Error('Required parameter questionid was null or undefined when calling removeTeamToQuestion.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/questions/${encodeURIComponent(String(questionid))}/teams/${encodeURIComponent(String(teamname))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
