/**
 * DevTest
 * DevTest
 *
 * OpenAPI spec version: 1.0.0
 * Contact: javigaton@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Question } from '../model/question';
import { Team } from '../model/team';
import { Test } from '../model/test';
import { User } from '../model/user';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TeamService {

    protected basePath = 'https://localhost/DevTest';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Adds user {username} to team {teamname} as an Admin
     * Adds user {username} to team {teamname} as an Admin.
     * @param teamname Teamname of the team to modify
     * @param username Username of the user to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addAdmin(teamname: string, username: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addAdmin(teamname: string, username: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addAdmin(teamname: string, username: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addAdmin(teamname: string, username: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling addAdmin.');
        }

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling addAdmin.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/teams/${encodeURIComponent(String(teamname))}/admins/${encodeURIComponent(String(username))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adds user {username} to team {teamname} as a Member
     * Adds user {username} to team {teamname} as a Member.
     * @param teamname Teamname of the team to modify
     * @param username Username of the user to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addMember(teamname: string, username: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addMember(teamname: string, username: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addMember(teamname: string, username: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addMember(teamname: string, username: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling addMember.');
        }

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling addMember.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/teams/${encodeURIComponent(String(teamname))}/members/${encodeURIComponent(String(username))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a team by its teamname
     * Deletes a team by its teamname
     * @param teamname Teamname of the team to delete
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTeam(teamname: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteTeam(teamname: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteTeam(teamname: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteTeam(teamname: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling deleteTeam.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/teams/${encodeURIComponent(String(teamname))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes user {username} from team {teamname}
     * Deletes user {username} from team {teamname}
     * @param teamname Teamname of the team to modify
     * @param username Username of the user to delete from team
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteUserFromTeam(teamname: string, username: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteUserFromTeam(teamname: string, username: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteUserFromTeam(teamname: string, username: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteUserFromTeam(teamname: string, username: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling deleteUserFromTeam.');
        }

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling deleteUserFromTeam.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/teams/${encodeURIComponent(String(teamname))}/users/${encodeURIComponent(String(username))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a user that have the role admin in a team
     * Returns a user that have the role admin in a team
     * @param teamname Teamname of the team to get its admin
     * @param username Username of the user to check if it is an admin
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAdmin(teamname: string, username: string, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public getAdmin(teamname: string, username: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public getAdmin(teamname: string, username: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public getAdmin(teamname: string, username: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling getAdmin.');
        }

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getAdmin.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<User>(`${this.basePath}/teams/${encodeURIComponent(String(teamname))}/admins/${encodeURIComponent(String(username))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all users that are admins of a team
     * Returns all users that are admins of a team
     * @param teamname Teamname of the team to get its admins
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAdmins(teamname: string, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public getAdmins(teamname: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public getAdmins(teamname: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public getAdmins(teamname: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling getAdmins.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<User>>(`${this.basePath}/teams/${encodeURIComponent(String(teamname))}/admins`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a publishedTest that the team is invited to
     * Returns a publishedTest that the team is invited to
     * @param teamname Teamname of the team to get its publishedTest is invited to
     * @param testid Id of the publishedTest to find
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getInvitedTestFromTeam(teamname: string, testid: number, observe?: 'body', reportProgress?: boolean): Observable<Test>;
    public getInvitedTestFromTeam(teamname: string, testid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Test>>;
    public getInvitedTestFromTeam(teamname: string, testid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Test>>;
    public getInvitedTestFromTeam(teamname: string, testid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling getInvitedTestFromTeam.');
        }

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getInvitedTestFromTeam.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Test>(`${this.basePath}/teams/${encodeURIComponent(String(teamname))}/invitedTests/${encodeURIComponent(String(testid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all publishedTests that the team is invited to
     * Returns all publishedTests that the team is invited to
     * @param teamname Teamname of the team to get its publishedTests is invited to
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getInvitedTestsFromTeam(teamname: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Test>>;
    public getInvitedTestsFromTeam(teamname: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Test>>>;
    public getInvitedTestsFromTeam(teamname: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Test>>>;
    public getInvitedTestsFromTeam(teamname: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling getInvitedTestsFromTeam.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Test>>(`${this.basePath}/teams/${encodeURIComponent(String(teamname))}/invitedTests`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a user that have the role member in a team
     * Returns a user that have the role member in a team
     * @param teamname Teamname of the team to get its member
     * @param username Username of the user to check if it is a member
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMember(teamname: string, username: string, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public getMember(teamname: string, username: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public getMember(teamname: string, username: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public getMember(teamname: string, username: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling getMember.');
        }

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getMember.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<User>(`${this.basePath}/teams/${encodeURIComponent(String(teamname))}/members/${encodeURIComponent(String(username))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all users that have the role members in a team
     * Returns all users that have the role members in a team
     * @param teamname Teamname of the team to get its members
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMembers(teamname: string, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public getMembers(teamname: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public getMembers(teamname: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public getMembers(teamname: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling getMembers.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<User>>(`${this.basePath}/teams/${encodeURIComponent(String(teamname))}/members`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a publishedTest that the team administers
     * Returns a publishedTest that the team administers
     * @param teamname Teamname of the team to get its publishedTest
     * @param testid Id of the publishedTest to find
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPublishedTestFromTeam(teamname: string, testid: number, observe?: 'body', reportProgress?: boolean): Observable<Test>;
    public getPublishedTestFromTeam(teamname: string, testid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Test>>;
    public getPublishedTestFromTeam(teamname: string, testid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Test>>;
    public getPublishedTestFromTeam(teamname: string, testid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling getPublishedTestFromTeam.');
        }

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getPublishedTestFromTeam.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Test>(`${this.basePath}/teams/${encodeURIComponent(String(teamname))}/publishedTests/${encodeURIComponent(String(testid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all publishedTests that the team administers
     * Returns all publishedTests that the team administers
     * @param teamname Teamname of the team to get its publishedTests
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPublishedTestsFromTeam(teamname: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Test>>;
    public getPublishedTestsFromTeam(teamname: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Test>>>;
    public getPublishedTestsFromTeam(teamname: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Test>>>;
    public getPublishedTestsFromTeam(teamname: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling getPublishedTestsFromTeam.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Test>>(`${this.basePath}/teams/${encodeURIComponent(String(teamname))}/publishedTests`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a question that the team administers
     * Returns a question that the team administers
     * @param teamname Teamname of the team to get its question
     * @param questionid Id of the question to find
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getQuestionFromTeam(teamname: string, questionid: number, observe?: 'body', reportProgress?: boolean): Observable<Question>;
    public getQuestionFromTeam(teamname: string, questionid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Question>>;
    public getQuestionFromTeam(teamname: string, questionid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Question>>;
    public getQuestionFromTeam(teamname: string, questionid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling getQuestionFromTeam.');
        }

        if (questionid === null || questionid === undefined) {
            throw new Error('Required parameter questionid was null or undefined when calling getQuestionFromTeam.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Question>(`${this.basePath}/teams/${encodeURIComponent(String(teamname))}/questions/${encodeURIComponent(String(questionid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all questions that the team administers
     * Returns all questions that the team administers
     * @param teamname Teamname of the team to get its questions
     * @param tags 
     * @param likeTitle 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getQuestionsFromTeam(teamname: string, tags?: Array<Array<string>>, likeTitle?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Question>>;
    public getQuestionsFromTeam(teamname: string, tags?: Array<Array<string>>, likeTitle?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Question>>>;
    public getQuestionsFromTeam(teamname: string, tags?: Array<Array<string>>, likeTitle?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Question>>>;
    public getQuestionsFromTeam(teamname: string, tags?: Array<Array<string>>, likeTitle?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling getQuestionsFromTeam.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tags) {
            queryParameters = queryParameters.set('tags', tags.join(COLLECTION_FORMATS['pipes']));
        }
        if (likeTitle !== undefined && likeTitle !== null) {
            queryParameters = queryParameters.set('likeTitle', <any>likeTitle);
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Question>>(`${this.basePath}/teams/${encodeURIComponent(String(teamname))}/questions`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Finds a team by its teamname
     * Finds a team by its teamname
     * @param teamname Teamname of the team to find
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTeam(teamname: string, observe?: 'body', reportProgress?: boolean): Observable<Team>;
    public getTeam(teamname: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Team>>;
    public getTeam(teamname: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Team>>;
    public getTeam(teamname: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling getTeam.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Team>(`${this.basePath}/teams/${encodeURIComponent(String(teamname))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all teams.
     * Returns all teams.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTeams(observe?: 'body', reportProgress?: boolean): Observable<Array<Team>>;
    public getTeams(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Team>>>;
    public getTeams(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Team>>>;
    public getTeams(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Team>>(`${this.basePath}/teams`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a test that the team administers
     * Returns a test that the team administers
     * @param teamname Teamname of the team to get its question
     * @param testid Id of the test to find
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTestFromTeam(teamname: string, testid: number, observe?: 'body', reportProgress?: boolean): Observable<Test>;
    public getTestFromTeam(teamname: string, testid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Test>>;
    public getTestFromTeam(teamname: string, testid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Test>>;
    public getTestFromTeam(teamname: string, testid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling getTestFromTeam.');
        }

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getTestFromTeam.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Test>(`${this.basePath}/teams/${encodeURIComponent(String(teamname))}/tests/${encodeURIComponent(String(testid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all tests that the team administers
     * Returns all tests that the team administers
     * @param teamname Teamname of the team to get its tests
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTestsFromTeam(teamname: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Test>>;
    public getTestsFromTeam(teamname: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Test>>>;
    public getTestsFromTeam(teamname: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Test>>>;
    public getTestsFromTeam(teamname: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling getTestsFromTeam.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Test>>(`${this.basePath}/teams/${encodeURIComponent(String(teamname))}/tests`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a user that is in a team
     * Returns a user that is in a team
     * @param teamname Teamname of the team to get its user
     * @param username Username of the user to check if it is in the team
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserFromTeam(teamname: string, username: string, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public getUserFromTeam(teamname: string, username: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public getUserFromTeam(teamname: string, username: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public getUserFromTeam(teamname: string, username: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling getUserFromTeam.');
        }

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling getUserFromTeam.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<User>(`${this.basePath}/teams/${encodeURIComponent(String(teamname))}/users/${encodeURIComponent(String(username))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all users that are in a team
     * Returns all users that are in a team
     * @param teamname Teamname of the team to get its users
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUsersFromTeam(teamname: string, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public getUsersFromTeam(teamname: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public getUsersFromTeam(teamname: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public getUsersFromTeam(teamname: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling getUsersFromTeam.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<User>>(`${this.basePath}/teams/${encodeURIComponent(String(teamname))}/users`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * adds a team
     * Adds a team to the system
     * @param username Username of the user to get their teams
     * @param team Team item to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postTeam(username: string, team: Team, observe?: 'body', reportProgress?: boolean): Observable<Team>;
    public postTeam(username: string, team: Team, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Team>>;
    public postTeam(username: string, team: Team, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Team>>;
    public postTeam(username: string, team: Team, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling postTeam.');
        }

        if (team === null || team === undefined) {
            throw new Error('Required parameter team was null or undefined when calling postTeam.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Team>(`${this.basePath}/users/${encodeURIComponent(String(username))}/teams`,
            team,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Modifies the team &lt;teamname&gt;
     * Modifies the team &lt;teamname&gt;
     * @param teamname Teamname of the team to modify its information
     * @param team Team information updated
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putTeam(teamname: string, team: Team, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public putTeam(teamname: string, team: Team, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public putTeam(teamname: string, team: Team, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public putTeam(teamname: string, team: Team, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling putTeam.');
        }

        if (team === null || team === undefined) {
            throw new Error('Required parameter team was null or undefined when calling putTeam.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/teams/${encodeURIComponent(String(teamname))}`,
            team,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
