/**
 * DevTest
 * DevTest
 *
 * OpenAPI spec version: 1.0.0
 * Contact: javigaton@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { PublishTestParams } from '../model/publishTestParams';
import { Question } from '../model/question';
import { Tag } from '../model/tag';
import { Team } from '../model/team';
import { Test } from '../model/test';
import { TestPregunta } from '../model/testPregunta';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TestService {

    protected basePath = 'https://localhost/DevTest';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Adds a team to administer a test
     * Adds a team to administer a test
     * @param teamname Teamname of the team to let administrate
     * @param testid Id of the test to find
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addAdminTeamToTest(teamname: string, testid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addAdminTeamToTest(teamname: string, testid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addAdminTeamToTest(teamname: string, testid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addAdminTeamToTest(teamname: string, testid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling addAdminTeamToTest.');
        }

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling addAdminTeamToTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/tests/${encodeURIComponent(String(testid))}/adminTeams/${encodeURIComponent(String(teamname))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adds an existing question to a test
     * Adds an existing question to a test
     * @param testid Id of the test to add a question to
     * @param questionid Id of the question to add to the test
     * @param testPregunta Valor que tendra la pregunta en el test, y posicion
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addQuestionToTest(testid: number, questionid: number, testPregunta: TestPregunta, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addQuestionToTest(testid: number, questionid: number, testPregunta: TestPregunta, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addQuestionToTest(testid: number, questionid: number, testPregunta: TestPregunta, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addQuestionToTest(testid: number, questionid: number, testPregunta: TestPregunta, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling addQuestionToTest.');
        }

        if (questionid === null || questionid === undefined) {
            throw new Error('Required parameter questionid was null or undefined when calling addQuestionToTest.');
        }

        if (testPregunta === null || testPregunta === undefined) {
            throw new Error('Required parameter testPregunta was null or undefined when calling addQuestionToTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/tests/${encodeURIComponent(String(testid))}/questions/${encodeURIComponent(String(questionid))}`,
            testPregunta,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adds a tag to a test
     * Adds a tag to a test
     * @param testid Id of the test to add a tag
     * @param tag Tag to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addTagToTest(testid: number, tag: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addTagToTest(testid: number, tag: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addTagToTest(testid: number, tag: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addTagToTest(testid: number, tag: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling addTagToTest.');
        }

        if (tag === null || tag === undefined) {
            throw new Error('Required parameter tag was null or undefined when calling addTagToTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/tests/${encodeURIComponent(String(testid))}/tags/${encodeURIComponent(String(tag))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new test, copying from another test
     * Creates a new test, copying from another test
     * @param username Username of the teacher who will own the test
     * @param testid Id of the test
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public copyTest(username: string, testid: number, observe?: 'body', reportProgress?: boolean): Observable<Test>;
    public copyTest(username: string, testid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Test>>;
    public copyTest(username: string, testid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Test>>;
    public copyTest(username: string, testid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling copyTest.');
        }

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling copyTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<Test>(`${this.basePath}/users/${encodeURIComponent(String(username))}/tests/${encodeURIComponent(String(testid))}/copiedTests`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a test
     * Deletes a test
     * @param testid Id of the test to delete
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTest(testid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteTest(testid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteTest(testid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteTest(testid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling deleteTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/tests/${encodeURIComponent(String(testid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all teams from a test.
     * Returns all teams from a test.
     * @param testid Id of the test to find its teams
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAdminTeamsFromTest(testid: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Team>>;
    public getAdminTeamsFromTest(testid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Team>>>;
    public getAdminTeamsFromTest(testid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Team>>>;
    public getAdminTeamsFromTest(testid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getAdminTeamsFromTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Team>>(`${this.basePath}/tests/${encodeURIComponent(String(testid))}/adminTeams`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all non-published tests
     * Returns all non-published tests
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllEditTests(observe?: 'body', reportProgress?: boolean): Observable<Array<Test>>;
    public getAllEditTests(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Test>>>;
    public getAllEditTests(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Test>>>;
    public getAllEditTests(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Test>>(`${this.basePath}/editTests`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all tests
     * Returns all tests
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllTests(observe?: 'body', reportProgress?: boolean): Observable<Array<Test>>;
    public getAllTests(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Test>>>;
    public getAllTests(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Test>>>;
    public getAllTests(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Test>>(`${this.basePath}/tests`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all public non-published tests
     * Returns all public non-published tests
     * @param tags 
     * @param likeTitle 
     * @param orderby Indicates which element is first returned. In case of tie it unties with newdate first
     * @param limit max number of elements to be returned
     * @param offset first elements to be skipped at being returned
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPublicEditTests(tags?: Array<Array<string>>, likeTitle?: string, orderby?: 'newDate' | 'oldDate' | 'moreFav' | 'lessFav' | 'moreTime' | 'lessTime', limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Test>>;
    public getPublicEditTests(tags?: Array<Array<string>>, likeTitle?: string, orderby?: 'newDate' | 'oldDate' | 'moreFav' | 'lessFav' | 'moreTime' | 'lessTime', limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Test>>>;
    public getPublicEditTests(tags?: Array<Array<string>>, likeTitle?: string, orderby?: 'newDate' | 'oldDate' | 'moreFav' | 'lessFav' | 'moreTime' | 'lessTime', limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Test>>>;
    public getPublicEditTests(tags?: Array<Array<string>>, likeTitle?: string, orderby?: 'newDate' | 'oldDate' | 'moreFav' | 'lessFav' | 'moreTime' | 'lessTime', limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tags) {
            queryParameters = queryParameters.set('tags', tags.join(COLLECTION_FORMATS['pipes']));
        }
        if (likeTitle !== undefined && likeTitle !== null) {
            queryParameters = queryParameters.set('likeTitle', <any>likeTitle);
        }
        if (orderby !== undefined && orderby !== null) {
            queryParameters = queryParameters.set('orderby', <any>orderby);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // authentication (NoRegistered) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["NotLoggedIn"]) {
            headers = headers.set('NotLoggedIn', this.configuration.apiKeys["NotLoggedIn"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Test>>(`${this.basePath}/publicEditTests`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all public tests
     * Returns all tests
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPublicTests(observe?: 'body', reportProgress?: boolean): Observable<Array<Test>>;
    public getPublicTests(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Test>>>;
    public getPublicTests(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Test>>>;
    public getPublicTests(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // authentication (NoRegistered) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["NotLoggedIn"]) {
            headers = headers.set('NotLoggedIn', this.configuration.apiKeys["NotLoggedIn"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Test>>(`${this.basePath}/publicTests`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all publishedTest originated from the same test
     * Returns all publishedTest originated from the same test
     * @param testid Id of the original test
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPublishedTestsFromTest(testid: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Test>>;
    public getPublishedTestsFromTest(testid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Test>>>;
    public getPublishedTestsFromTest(testid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Test>>>;
    public getPublishedTestsFromTest(testid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getPublishedTestsFromTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // authentication (NoRegistered) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["NotLoggedIn"]) {
            headers = headers.set('NotLoggedIn', this.configuration.apiKeys["NotLoggedIn"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Test>>(`${this.basePath}/tests/${encodeURIComponent(String(testid))}/publishedTests`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a question from a test
     * Returns a question from a test
     * @param testid Id of the test to find a question from
     * @param questionid Id of the question to find in the test
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getQuestionFromTest(testid: number, questionid: number, observe?: 'body', reportProgress?: boolean): Observable<Question>;
    public getQuestionFromTest(testid: number, questionid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Question>>;
    public getQuestionFromTest(testid: number, questionid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Question>>;
    public getQuestionFromTest(testid: number, questionid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getQuestionFromTest.');
        }

        if (questionid === null || questionid === undefined) {
            throw new Error('Required parameter questionid was null or undefined when calling getQuestionFromTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // authentication (NoRegistered) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["NotLoggedIn"]) {
            headers = headers.set('NotLoggedIn', this.configuration.apiKeys["NotLoggedIn"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Question>(`${this.basePath}/tests/${encodeURIComponent(String(testid))}/questions/${encodeURIComponent(String(questionid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all questions of the test
     * Returns all questions of the test
     * @param testid Id of the test
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getQuestionsFromTest(testid: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Question>>;
    public getQuestionsFromTest(testid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Question>>>;
    public getQuestionsFromTest(testid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Question>>>;
    public getQuestionsFromTest(testid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getQuestionsFromTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // authentication (NoRegistered) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["NotLoggedIn"]) {
            headers = headers.set('NotLoggedIn', this.configuration.apiKeys["NotLoggedIn"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Question>>(`${this.basePath}/tests/${encodeURIComponent(String(testid))}/questions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a tag from a test.
     * Returns a tag from a test.
     * @param testid Id of the test to find its tags
     * @param tag Tag to find
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTagFromTest(testid: number, tag: string, observe?: 'body', reportProgress?: boolean): Observable<Tag>;
    public getTagFromTest(testid: number, tag: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Tag>>;
    public getTagFromTest(testid: number, tag: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Tag>>;
    public getTagFromTest(testid: number, tag: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getTagFromTest.');
        }

        if (tag === null || tag === undefined) {
            throw new Error('Required parameter tag was null or undefined when calling getTagFromTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // authentication (NoRegistered) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["NotLoggedIn"]) {
            headers = headers.set('NotLoggedIn', this.configuration.apiKeys["NotLoggedIn"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Tag>(`${this.basePath}/tests/${encodeURIComponent(String(testid))}/tags/${encodeURIComponent(String(tag))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all tags from a test.
     * Returns all tags from a test.
     * @param testid Id of the tset to find its tags
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTagsFromTest(testid: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Tag>>;
    public getTagsFromTest(testid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Tag>>>;
    public getTagsFromTest(testid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Tag>>>;
    public getTagsFromTest(testid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getTagsFromTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // authentication (NoRegistered) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["NotLoggedIn"]) {
            headers = headers.set('NotLoggedIn', this.configuration.apiKeys["NotLoggedIn"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Tag>>(`${this.basePath}/tests/${encodeURIComponent(String(testid))}/tags`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a test
     * Returns a test
     * @param testid Id of the test to find
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTest(testid: number, observe?: 'body', reportProgress?: boolean): Observable<Test>;
    public getTest(testid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Test>>;
    public getTest(testid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Test>>;
    public getTest(testid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling getTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // authentication (NoRegistered) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["NotLoggedIn"]) {
            headers = headers.set('NotLoggedIn', this.configuration.apiKeys["NotLoggedIn"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Test>(`${this.basePath}/tests/${encodeURIComponent(String(testid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new publishedTest. The user must be the owner of the test.
     * Creates a new publishedTest. The user must be the owner of the test.
     * @param publishTestParams Some attributes of the new test
     * @param testid Id of the test to publish
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postPublishedTest(publishTestParams: PublishTestParams, testid: number, observe?: 'body', reportProgress?: boolean): Observable<Test>;
    public postPublishedTest(publishTestParams: PublishTestParams, testid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Test>>;
    public postPublishedTest(publishTestParams: PublishTestParams, testid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Test>>;
    public postPublishedTest(publishTestParams: PublishTestParams, testid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (publishTestParams === null || publishTestParams === undefined) {
            throw new Error('Required parameter publishTestParams was null or undefined when calling postPublishedTest.');
        }

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling postPublishedTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Test>(`${this.basePath}/tests/${encodeURIComponent(String(testid))}/publishedTests`,
            publishTestParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new test. The user must be a teacher.
     * Creates a new test. The user must be a teacher.
     * @param username Username of the teacher who owns the test
     * @param test New Test to create
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postTest(username: string, test: Test, observe?: 'body', reportProgress?: boolean): Observable<Test>;
    public postTest(username: string, test: Test, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Test>>;
    public postTest(username: string, test: Test, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Test>>;
    public postTest(username: string, test: Test, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling postTest.');
        }

        if (test === null || test === undefined) {
            throw new Error('Required parameter test was null or undefined when calling postTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Test>(`${this.basePath}/users/${encodeURIComponent(String(username))}/tests`,
            test,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a test
     * Updates a test
     * @param testid Id of the test to update
     * @param test Test modified
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putTest(testid: number, test: Test, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public putTest(testid: number, test: Test, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public putTest(testid: number, test: Test, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public putTest(testid: number, test: Test, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling putTest.');
        }

        if (test === null || test === undefined) {
            throw new Error('Required parameter test was null or undefined when calling putTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/tests/${encodeURIComponent(String(testid))}`,
            test,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Removes a team to administer a test
     * Removes a team to administer a test
     * @param teamname Teamname of the team to remove
     * @param testid Id of the test to find
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeAdminTeamToTest(teamname: string, testid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeAdminTeamToTest(teamname: string, testid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeAdminTeamToTest(teamname: string, testid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeAdminTeamToTest(teamname: string, testid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamname === null || teamname === undefined) {
            throw new Error('Required parameter teamname was null or undefined when calling removeAdminTeamToTest.');
        }

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling removeAdminTeamToTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/tests/${encodeURIComponent(String(testid))}/adminTeams/${encodeURIComponent(String(teamname))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Removes an existing question from a test
     * Removes an existing question from a test
     * @param testid Id of the test to remove a question from
     * @param questionid Id of the question to remove from the test
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeQuestionFromTest(testid: number, questionid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeQuestionFromTest(testid: number, questionid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeQuestionFromTest(testid: number, questionid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeQuestionFromTest(testid: number, questionid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling removeQuestionFromTest.');
        }

        if (questionid === null || questionid === undefined) {
            throw new Error('Required parameter questionid was null or undefined when calling removeQuestionFromTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/tests/${encodeURIComponent(String(testid))}/questions/${encodeURIComponent(String(questionid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Removes a tag from a test
     * Removes a tag from a test
     * @param testid Id of the test to remove a tag
     * @param tag Tag to remove
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeTagFromTest(testid: number, tag: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeTagFromTest(testid: number, tag: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeTagFromTest(testid: number, tag: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeTagFromTest(testid: number, tag: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (testid === null || testid === undefined) {
            throw new Error('Required parameter testid was null or undefined when calling removeTagFromTest.');
        }

        if (tag === null || tag === undefined) {
            throw new Error('Required parameter tag was null or undefined when calling removeTagFromTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (BearerCookie) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Cookie"]) {
            headers = headers.set('Cookie', this.configuration.apiKeys["Cookie"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/tests/${encodeURIComponent(String(testid))}/tags/${encodeURIComponent(String(tag))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
