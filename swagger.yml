swagger: '2.0'
info:
  description: DevTest
  version: 1.0.0
  title: DevTest
  # put the contact info for your development or API team
  contact:
    email: javigaton@gmail.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
- name: auth
  description: Operations related to authentication
- name: user
  description: Operations that start with users
- name: team
  description: Operations that start with teams
- name: question
  description: Operations that start with questions
- name: test
  description: Operations that start with tests
- name: publishedTest
  description: Operations that start with publishedTests
- name: answer
  description: Operations that start with answers
- name: configuration
  description: Operations related to general settings of the application
paths:
  /emailConfiguration:
    get:
      security:
        - BearerCookie: []
      tags:
      - configuration
      summary: Returns the information about the current configuration related to email service
      operationId: GetEmailConfiguration
      description: Returns the information about the current configuration related to email service
      produces:
      - application/json
      responses:
        200:
          description: Email configuration found successfully
          schema:
            $ref: '#/definitions/EmailConfiguration'
        403:
          $ref: '#/responses/ForbiddenError'
        500:
          $ref: '#/responses/InternalServerError'
    put:
      security:
        - BearerCookie: []
      tags:
      - configuration
      summary: Modifies the information related to the configuration of the email service
      operationId: PutEmailConfiguration
      description: Modifies the information related to the configuration of the email service
      consumes:
      - application/json
      parameters:
      - in: body
        name: emailConfiguration
        description: New email configuration
        required: true
        schema:
          $ref: '#/definitions/EmailConfiguration'
      responses:
        200:
          description: Email configuration updated
        403:
          $ref: '#/responses/ForbiddenError'
        500:
          $ref: '#/responses/InternalServerError'
  /accesstokens:
    post:
      tags:
      - auth
      summary: Registers a new authorized connection token
      operationId: Login
      description: Tries to login, and gets a JWT auth token if successful
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: loginUser
        description: User who is trying to generate a token
        required: true
        schema:
          $ref: '#/definitions/LoginUser'
      responses:
        201:
          description: Successful authentication. Session JWT returned in Cookie "Bearer-Cookie". You need to include this cookie in subsequent requests.
          headers:
            Set-Cookie:
              type: string
              #example: Bearer-Cookie=eyJhbGciOiJIUzI1NiIsInR5; Path=/; Max-Age=86400; Secure; SameSite=Strict; HttpOnly;
        400:
          $ref: '#/responses/BadRequestError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /relogin:
    post:
      security:
        - ReAuthCookie: []
      tags:
      - auth
      summary: Modifies the current JWT Cookie related to the current session, extending it.
      operationId: relogin
      description: Modifies the current JWT Cookie related to the current session, extending.
      produces:
      - application/json
      responses:
        200:
          description: Successful cookie modification. Session JWT returned in Cookie "Bearer-Cookie".
          headers:
            Set-Cookie:
              type: string
              #example: Bearer-Cookie=eyJhbGciOiJIUzI1NiIsInR5; Path=/; Max-Age=86400; Secure; SameSite=Strict; HttpOnly;
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /accesstokens/{username}:
    delete:
      security:
        - BearerCookie: []
      tags:
      - auth
      summary: Deletes all sessions of the user. Makes every current JWT related to him useless.
      operationId: closeSessions
      description: Deletes all sessions of the user. Makes every current JWT related to him useless.
      consumes:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user with the token
        required: true
        type: string
      - in: body
        name: password
        description: Current password of the user
        required: true
        schema:
          $ref: '#/definitions/Password'
      responses:
        200:
          description: Sessions deleted successfully
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /logout:
    get:
      tags:
      - auth
      summary: Returns a useless cookie that will expire soon
      operationId: Logout
      description: Returns a useless cookie that will expire soon
      produces:
      - application/json
      responses:
        200:
          description: Logout cookie returned successfully
          headers:
            Set-Cookie:
              type: string
              #example: Bearer-Cookie=eyJhbGciOiJIUzI1NiIsInR5; Path=/; Max-Age=1; Secure; SameSite=Strict; HttpOnly;
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /tipoRoles:
    get:
      tags:
      - tiporol
      summary: Returns all tipoRoles
      operationId: GetTipoRoles
      description: Returns all tipoRoles
      produces:
      - application/json
      responses:
        200:
          description: TipoRoles Found
          schema:
            type: array
            items:
              $ref: '#/definitions/TipoRol'
        500:
          $ref: '#/responses/InternalServerError'
    post:
      tags:
      - tiporol
      security:
        - BearerCookie: []
      summary: Creates a TipoRol
      operationId: PostTipoRol
      description: Creates a TipoRol
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: newTipoRol
        description: New data for the TipoRol
        required: true
        schema:
          $ref: '#/definitions/TipoRol'
      responses:
        201:
          description: TipoRol Created
          schema:
            $ref: '#/definitions/TipoRol'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        409:
          $ref: '#/responses/ConflictError'
        500:
          $ref: '#/responses/InternalServerError'
  /tipoRoles/{rolNombre}:
    get:
      tags:
      - tiporol
      summary: Returns a TipoRol
      operationId: GetTipoRol
      description: Returns a TipoRol
      produces:
      - application/json
      parameters:
      - in: path
        name: rolNombre
        description: Nombre of the TipoRol to find
        required: true
        type: string
      responses:
        200:
          description: TipoRol Found
          schema:
            $ref: '#/definitions/TipoRol'
        400:
          $ref: '#/responses/BadRequestError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    put:
      tags:
      - tiporol
      security:
        - BearerCookie: []
      summary: Modifies a TipoRol
      operationId: PutTipoRol
      description: Modifies a TipoRol
      produces:
      - application/json
      parameters:
      - in: path
        name: rolNombre
        description: Nombre of the TipoRol to modify
        required: true
        type: string
      - in: body
        name: newTipoRol
        description: New data for the TipoRol
        required: true
        schema:
          $ref: '#/definitions/TipoRol'
      responses:
        200:
          description: TipoRol modified
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        409:
          $ref: '#/responses/ConflictError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    delete:
      tags:
      - tiporol
      security:
        - BearerCookie: []
      summary: Deletes a TipoRol.
      operationId: DeleteTipoRol
      description: Deletes a TipoRol. Every user with that TipoRol will now have the next less important TipoRol, or the next more important if there is none with less
      produces:
      - application/json
      parameters:
      - in: path
        name: rolNombre
        description: Nombre of the TipoRol to delete
        required: true
        type: string
      responses:
        200:
          description: TipoRol deleted
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /customizedViews:
    get:
      tags:
      - configuration
      security:
        - BearerCookie: []
        - NoRegistered: []
      summary: Returns all CustomizedViews
      operationId: GetCViews
      description: Returns all CustomizedViews
      produces:
      - application/json
      responses:
        200:
          description: CustomizedViews Found
          schema:
            type: array
            items:
              $ref: '#/definitions/CustomizedView'
        403:
          $ref: '#/responses/ForbiddenError'
        500:
          $ref: '#/responses/InternalServerError'
  /customizedViews/{rolBase}:
    get:
      tags:
      - configuration
      security:
        - BearerCookie: []
        - NoRegistered: []
      summary: Returns a CustomizedView
      operationId: GetCView
      description: Returns a CustomizedView
      produces:
      - application/json
      parameters:
      - in: path
        name: rolBase
        description: Name of the rolBase to find its customized view
        required: true
        type: string
        enum: [administrador, profesor, estudiante, noRegistrado]
      responses:
        200:
          description: CustomizedView Found
          schema:
            $ref: '#/definitions/CustomizedView'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    put:
      tags:
      - configuration
      security:
        - BearerCookie: []
        - NoRegistered: []
      summary: Modifies a CustomizedView
      operationId: PutCView
      description: Modifies a CustomizedView
      consumes:
      - application/json
      parameters:
      - in: path
        name: rolBase
        description: Name of the rolBase to modify its customized view
        required: true
        type: string
        enum: [administrador, profesor, estudiante, noRegistrado]
      - in: body
        name: newView
        required: true
        description: Customized View information updated
        schema:
          $ref: '#/definitions/CustomizedView'
      responses:
        200:
          description: CustomizedView Found
          schema:
            $ref: '#/definitions/CustomizedView'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /users:
    post:
      tags:
      - user
      - auth
      summary: adds a user
      operationId: RegisterUser
      description: Adds a user to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: signinUser
        description: User item to add
        required: true
        schema:
          $ref: '#/definitions/SigninUser'
      responses:
        201:
          description: user created
          schema:
            $ref: '#/definitions/User'
        400:
          $ref: '#/responses/BadRequestError'
        409:
          $ref: '#/responses/ConflictError'
        500:
          $ref: '#/responses/InternalServerError'
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all users.
      operationId: GetUsers
      description: Returns all users.
      produces:
      - application/json
      parameters:
      - in: query
        name: likeUsername
        type: string
      - in: query
        name: likeStartUsername
        type: string
      - in: query
        name: likeEmail
        type: string
      - in: query
        name: likeStartEmail
        type: string
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: users found
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        500:
          $ref: '#/responses/InternalServerError'
  /emailUsers:
    post:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Adds a user without specifying username or password
      operationId: PostEmailUser
      description: Adds a user without specifying username or password
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: emailUser
        description: User item to add
        required: true
        schema:
          $ref: '#/definitions/EmailUser'
      responses:
        201:
          description: user created
          schema:
            $ref: '#/definitions/User'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        409:
          $ref: '#/responses/ConflictError'
        500:
          $ref: '#/responses/InternalServerError'
  /users/{username}:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Finds a user by its username
      operationId: getUser
      description: Finds a user by its username
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user to find
        required: true
        type: string
      responses:
        200:
          description: user found
          schema:
            $ref: '#/definitions/User'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    put:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Modifies the user <username>
      operationId: putUser
      description: Modifies the user <username>
      consumes:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user to modify its information
        required: true
        type: string
      - in: body
        name: userUpdate
        required: true
        description: User information updated
        schema:
          $ref: '#/definitions/UserUpdate'
      responses:
        200:
          description: user updated
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        409:
          $ref: '#/responses/ConflictError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    delete:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Deletes a user by its username
      operationId: deleteUser
      description: Deletes a user by its username
      parameters:
      - in: path
        name: username
        description: Username of the user to delete
        required: true
        type: string
      responses:
        200:
          description: user found and deleted
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /users/{username}/password:
    put:
      security:
        - BearerCookie: []
      tags:
      - user
      - auth
      summary: Modifies the password of the user <username>
      operationId: putPassword
      description: Modifies the password of the user <username>
      consumes:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user to modify its password
        required: true
        type: string
      - in: body
        name: passwordUpdate
        description: Password update information
        required: true
        schema:
          $ref: '#/definitions/PasswordUpdate'
      responses:
        200:
          description: Resource password modified correctly
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /users/{username}/role:
    put:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Modifies the role of the user <username>
      operationId: putRole
      description: Modifies the role of the user <username>
      consumes:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user to modify its role
        required: true
        type: string
      - in: body
        name: role
        description: Role update information
        required: true
        schema:
          $ref: '#/definitions/Role'
      responses:
        200:
          description: Resource role modified correctly
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /users/{username}/recoverPassword:
    put:
      tags:
      - user
      summary: Modifies the password of the user <username>, using a token
      operationId: recoverPassword
      description: Modifies the role of the user <username>, using a token
      consumes:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user to modify its password
        required: true
        type: string
      - in: body
        name: passwordRecovery
        description: Passwor Recovery information
        required: true
        schema:
          $ref: '#/definitions/PasswordRecovery'
      responses:
        200:
          description: Resource password modified correctly
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /users/{username}/passRecoveryTokens:
    post:
      tags:
      - user
      summary: Creates a new mailToken associated with the user <username>, for recovering the password
      operationId: postRecoveryToken
      description: Creates a new mailToken associated with the user <username>, for recovering the password
      consumes:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user to modify its role
        required: true
        type: string
      responses:
        201:
          description: Password Recovery Token Created
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /users/{username}/teams:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all teams of a user.
      operationId: GetTeamsOfUser
      description: Returns all teams of a user.
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user to get their teams
        required: true
        type: string
      - in: query
        name: likeStartTeamname
        type: string
      - in: query
        name: likeTeamname
        type: string
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: teams found
          schema:
            type: array
            items:
              $ref: '#/definitions/Team'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        500:
          $ref: '#/responses/InternalServerError'
    post:
      security:
        - BearerCookie: []
      tags:
      - team
      - user
      summary: adds a team
      operationId: PostTeam
      description: Adds a team to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user to get their teams
        required: true
        type: string
      - in: body
        name: team
        description: Team item to add
        required: true
        schema:
          $ref: '#/definitions/Team'
      responses:
        201:
          description: team created
          schema:
            $ref: '#/definitions/Team'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        409:
          $ref: '#/responses/ConflictError'
        500:
          $ref: '#/responses/InternalServerError'
  /users/{username}/teams/{teamname}:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Finds a team by its teamname, only if the user is in it
      operationId: getTeamFromUser
      description: Finds a team by its teamname, only if the user is in it
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user to check
        required: true
        type: string
      - in: path
        name: teamname
        description: Teamname of the team to find
        required: true
        type: string
      responses:
        200:
          description: team found
          schema:
            $ref: '#/definitions/Team'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /users/{username}/favoriteEditQuestions:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all non-published questions available for the user marked as its favorites
      operationId: GetFavoriteEditQuestions
      description: Returns all non-published questions available for the user marked as its favorites
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who favorited the questions
        required: true
        type: string
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: questions found
          schema:
            type: array
            items:
              $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /users/{username}/favoriteQuestions:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all questions available for the user marked as its favorites
      operationId: GetFavoriteQuestions
      description: Returns all questions available for the user marked as its favorites
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who favorited the questions
        required: true
        type: string
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: questions found
          schema:
            type: array
            items:
              $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /users/{username}/favoriteQuestions/{questionid}:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns a questions available for the user marked as its favorite
      operationId: GetFavoriteQuestion
      description: Returns a questions available for the user marked as its favorite
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who is favorited the question
        required: true
        type: string
      - in: path
        name: questionid
        description: id of the question to find
        required: true
        type: integer
      responses:
        200:
          description: question found
          schema:
            $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    put:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Marks question as favorite for the user
      operationId: AddQuestionFavorite
      description: Marks question as favorite for the user
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who has marked as favorite the question
        required: true
        type: string
      - in: path
        name: questionid
        description: id of the question to mark
        required: true
        type: integer
      responses:
        200:
          description: question marked
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    delete:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Marks question as non-favorite for the user
      operationId: RemoveQuestionFavorite
      description: Marks question as non-favorite for the user
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who has unmarked as favorite the question
        required: true
        type: string
      - in: path
        name: questionid
        description: id of the question to unmark
        required: true
        type: integer
      responses:
        200:
          description: question unmarked
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    

  /users/{username}/publicEditQuestions:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all public non-published questions owned by the user
      operationId: GetPublicEditQuestionsOfUser
      description: Returns all public non-published questions owned by the user
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who owns the questions
        required: true
        type: string
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: questions found
          schema:
            type: array
            items:
              $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /users/{username}/editQuestions:
   get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all non-published questions owned by the user
      operationId: GetEditQuestionsOfUser
      description: Returns all non-published questions owned by the user
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who owns the questions
        required: true
        type: string
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: questions found
          schema:
            type: array
            items:
              $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /users/{username}/availableEditQuestions:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all non-published questions that a teacher can add to a test
      operationId: GetAvailableEditQuestionsOfUser
      description: Returns all non-published questions that a teacher can add to a test
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who is allowed to use the questions
        required: true
        type: string
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: questions found
          schema:
            type: array
            items:
              $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /users/{username}/availableQuestions:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all questions that a teacher can add to a test
      operationId: GetAvailableQuestionsOfUser
      description: Returns all questions that a teacher can add to a test
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who is allowed to use the questions
        required: true
        type: string
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: questions found
          schema:
            type: array
            items:
              $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /users/{username}/sharedQuestions:
   get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all questions is shared to the user
      operationId: GetSharedQuestionsOfUser
      description: Returns all questions is shared to the user
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who is shared the questions
        required: true
        type: string
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: questions found
          schema:
            type: array
            items:
              $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /users/{username}/sharedQuestions/{questionid}:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns a question shared to a user
      operationId: GetSharedQuestionFromUser
      description: Returns a question shared to a user
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who is shared the question
        required: true
        type: string
      - in: path
        name: questionid
        description: id of the question to find
        required: true
        type: integer
      responses:
        200:
          description: question found
          schema:
            $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /users/{username}/questions:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all questions owned by the user
      operationId: GetQuestionsOfUser
      description: Returns all questions owned by the user
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who owns the questions
        required: true
        type: string
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: questions found
          schema:
            type: array
            items:
              $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    post:
      security:
        - BearerCookie: []
      tags:
      - user
      - question
      summary: Creates a question
      operationId: PostQuestion
      description: Creates a question
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who owns the question
        required: true
        type: string
      - in: body
        name: question
        description: Question to add
        required: true
        schema:
          $ref: '#/definitions/Question'
      responses:
        201:
          description: question created
          schema:
            $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /users/{username}/questions/{questionid}:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns a question of a user
      operationId: GetQuestionFromUser
      description: Returns a question of a user
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who owns the question
        required: true
        type: string
      - in: path
        name: questionid
        description: id of the question to find
        required: true
        type: integer
      responses:
        200:
          description: question found
          schema:
            $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /users/{username}/questions/{questionid}/copiedQuestions:
    post:
      security:
        - BearerCookie: []
      tags:
      - user
      - question
      summary: Creates a question copied from another
      operationId: CopyQuestion
      description: Creates a question copied from another
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who will own the question
        required: true
        type: string
      - in: path
        name: questionid
        description: id of the question to copy
        required: true
        type: integer
      responses:
        201:
          description: question created
          schema:
            $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'


  /users/{username}/favoriteEditTests:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all non-published tests available for the user marked as its favorites
      operationId: GetFavoriteEditTests
      description: Returns all non-published tests available for the user marked as its favorites
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who favorited the tests
        required: true
        type: string
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: tests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /users/{username}/favoriteTests:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all tsets available for the user marked as its favorites
      operationId: GetFavoriteTests
      description: Returns all tests available for the user marked as its favorites
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who favorited the tests
        required: true
        type: string
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: tests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /users/{username}/favoriteTests/{testid}:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns a test available for the user marked as its favorite
      operationId: GetFavoriteTest
      description: Returns a test available for the user marked as its favorite
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who is favorited the test
        required: true
        type: string
      - in: path
        name: testid
        description: id of the test to find
        required: true
        type: integer
      responses:
        200:
          description: test found
          schema:
            $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    put:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Marks test as favorite for the user
      operationId: AddTestFavorite
      description: Marks test as favorite for the user
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who is favorited the test
        required: true
        type: string
      - in: path
        name: testid
        description: id of the test to find
        required: true
        type: integer
      responses:
        200:
          description: test marked
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    delete:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Marks test as non-favorite for the user
      operationId: RemoveTestFavorite
      description: Marks test as non-favorite for the user
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who is favorited the test
        required: true
        type: string
      - in: path
        name: testid
        description: id of the test to find
        required: true
        type: integer
      responses:
        200:
          description: test unmarked
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /users/{username}/sharedEditTests:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all non-published tests shared to a user (teacher).
      operationId: GetSharedEditTestsFromUser
      description: Returns all non-published tests shared to a user (teacher).
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the teacher who is shared the non-published  tests
        required: true
        type: string
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: tests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /users/{username}/sharedPublishedTests:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all published tests shared to a user (teacher).
      operationId: GetSharedPublishedTestsFromUser
      description: Returns all published tests shared to a user (teacher).
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the teacher who is shared the published tests
        required: true
        type: string
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: tests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /users/{username}/sharedTests:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all tests shared to a user (teacher).
      operationId: GetSharedTestsFromUser
      description: Returns all tests shared to a user (teacher).
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the teacher who is shared the tests
        required: true
        type: string
      responses:
        200:
          description: tests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /users/{username}/sharedTests/{testid}:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns a test from a user that is shared the test
      operationId: GetSharedTestFromUser
      description: Returns a test from a user that is shared the test
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the teacher who is shared the test
        required: true
        type: string
      - in: path
        name: testid
        description: Id of the test
        required: true
        type: integer
      responses:
        200:
          description: test found
          schema:
            $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /users/{username}/publicEditTests:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all public non-published tests owned by a user (teacher).
      operationId: GetPublicEditTestsFromUser
      description: Returns all public non-published tests owned by a user (teacher).
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the teacher who owns the tests
        required: true
        type: string
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: tests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /users/{username}/editTests:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all non-published tests owned by a user (teacher).
      operationId: GetEditTestsFromUser
      description: Returns all non-published tests owned by a user (teacher).
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the teacher who owns the tests
        required: true
        type: string
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: tests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /users/{username}/tests:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all tests owned by a user (teacher).
      operationId: GetTestsFromUser
      description: Returns all tests owned by a user (teacher).
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the teacher who owns the tests
        required: true
        type: string
      responses:
        200:
          description: tests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    post:
      security:
        - BearerCookie: []
      tags:
      - user
      - test
      summary: Creates a new test. The user must be a teacher.
      operationId: PostTest
      description: Creates a new test. The user must be a teacher.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the teacher who owns the test
        required: true
        type: string
      - in: body
        name: test
        description: New Test to create
        required: true
        schema:
          $ref: '#/definitions/Test'
      responses:
        201:
          description: test created
          schema:
            $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /users/{username}/tests/{testid}:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns a test from its user owner
      operationId: GetTestFromUser
      description: Returns a test from its user owner
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the teacher who owns the test
        required: true
        type: string
      - in: path
        name: testid
        description: Id of the test
        required: true
        type: integer
      responses:
        200:
          description: test found
          schema:
            $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /users/{username}/tests/{testid}/copiedTests:
    post:
      security:
        - BearerCookie: []
      tags:
      - user
      - test
      summary: Creates a new test, copying from another test
      operationId: CopyTest
      description: Creates a new test, copying from another test
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the teacher who will own the test
        required: true
        type: string
      - in: path
        name: testid
        description: Id of the test
        required: true
        type: integer
      responses:
        201:
          description: test created
          schema:
            $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /users/{username}/invitedTestsByTeamsAndUser:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all publishedTests where the user is invited as user or as team member
      operationId: GetInvitedTestsByTeamsAndUser
      description: Returns all publishedTests where the user is invited as as user or as team member
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who is invited
        required: true
        type: string
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: publishedTests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /users/{username}/invitedTests:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all publishedTests where the user is invited directly
      operationId: GetInvitedTestsFromUser
      description: Returns all publishedTests where the user is invited directly
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who is invited
        required: true
        type: string
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: publishedTests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /users/{username}/invitedTests/{testid}:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns a publishedTest where the user is invited as a user
      operationId: GetInvitedTestFromUser
      description: Returns a publishedTest where the user is invited as a user
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who is invited
        required: true
        type: string
      - in: path
        name: testid
        description: Id of the test
        required: true
        type: integer
      responses:
        200:
          description: publishedTest found
          schema:
            $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /users/{username}/publishedTests:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all publishedTests that the user owns.
      operationId: GetPublishedTestsFromUser
      description: Returns all publishedTests that the user owns
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who owns the publishedTests
        required: true
        type: string
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: publishedTests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /users/{username}/publicPublishedPTests:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all public publishedTests that the user owns.
      operationId: GetPublicPublishedTestsFromUser
      description: Returns all public publishedTests that the user owns
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who owns the publishedTests
        required: true
        type: string
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: publishedTests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /users/{username}/solvableTests:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all publishedTests that the user can answer, including public ones and team ones.
      operationId: GetSolvableTestsFromUser
      description: Returns all publishedTests that the user can answer, including public ones and team ones.
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who can answer the publishedTests
        required: true
        type: string
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: publishedTests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /users/{username}/solvableTests/{testid}:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns a publishedTest that the user can answer, including public ones and team ones. The Test DTO will contain the number of answers the user has for the test
      operationId: GetSolvableTestFromUser
      description: Returns a publishedTest that the user can answer, including public ones and team ones.  The Test DTO will contain the number of answers the user has for the test
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who can answer the publishedTest
        required: true
        type: string
      - in: path
        name: testid
        description: Id of the test
        required: true
        type: integer
      responses:
        200:
          description: publishedTest found
          schema:
            $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /users/{username}/solvableTests/{testid}/answers:
    post:
      security:
        - BearerCookie: []
      tags:
      - user
      - answer
      summary: Starts a new answer
      operationId: StartAnswer
      description: Starts a new answer
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who can answer the publishedTest
        required: true
        type: string
      - in: path
        name: testid
        description: Id of the test
        required: true
        type: integer
      responses:
        201:
          description: Answer started
          schema:
            $ref: '#/definitions/Answer'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /users/{username}/solvableTests/{testid}/openAnswers:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all open answers that the user is answering to a test. It should be only one or zero
      operationId: GetOpenAnswersFromUserTest
      description: Returns all open answers that the user is answering to a test. It should be only one or zero
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who may has had answered the test
        required: true
        type: string
      - in: path
        name: testid
        description: Id of the test
        required: true
        type: integer
      responses:
        200:
          description: answers found  
          schema:
            type: array
            items:
              $ref: '#/definitions/Answer'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /users/{username}/pendingTests:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all publishedTests that the user is invited to and hasn't answered yet
      operationId: GetPendingTestsFromUser
      description: Returns all publishedTests that the user is invited to and hasn't answered yet
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who is invited to the publishedTests
        required: true
        type: string
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: publishedTests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /users/{username}/answeredTests:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all publishedTests that the user has answered
      operationId: GetAnsweredTestsFromUser
      description: Returns all publishedTests that the user has answered
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who has answered the publishedTests
        required: true
        type: string
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: publishedTests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /users/{username}/answeredTests/{testid}:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns a publishedTest that the user has answered
      operationId: GetAnsweredTestFromUser
      description: Returns a publishedTest that the user has answered
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who has answered the publishedTest
        required: true
        type: string
      - in: path
        name: testid
        description: Id of the test
        required: true
        type: integer
      responses:
        200:
          description: publishedTest found
          schema:
            $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /users/{username}/answeredTests/{testid}/answers:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all answers that the user has answered to a test
      operationId: GetAnswersFromUserAnsweredTest
      description: Returns all answers that the user has answered to a test
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who has answered the test
        required: true
        type: string
      - in: path
        name: testid
        description: Id of the test
        required: true
        type: integer
      - in: query
        name: orderByAnswer
        type: string
        enum: [newStartDate, oldStartDate, morePuntuacion, lessPuntuacion, moreDuracion, lessDuracion]
      responses:
        200:
          description: answers found  
          schema:
            type: array
            items:
              $ref: '#/definitions/Answer'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /users/{username}/answeredTests/{testid}/uncorrectedAnswers:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all answers that the user has answered to a test and are uncorrected
      operationId: GetUncorrectedAnswersFromUserAnsweredTest
      description: Returns all answers that the user has answered to a test and are uncorrected
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who has answered the test
        required: true
        type: string
      - in: path
        name: testid
        description: Id of the test
        required: true
        type: integer
      responses:
        200:
          description: answers found  
          schema:
            type: array
            items:
              $ref: '#/definitions/Answer'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /users/{username}/answeredTests/{testid}/finishedAnswers:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all answers that the user has answered to a test and are corrected
      operationId: GetCorrectedAnswersFromUserAnsweredTest
      description: Returns all answers that the user has answered to a test and are corrected
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who has answered the test
        required: true
        type: string
      - in: path
        name: testid
        description: Id of the test
        required: true
        type: integer
      responses:
        200:
          description: answers found  
          schema:
            type: array
            items:
              $ref: '#/definitions/Answer'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /users/{username}/correctedAnswers:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all answers that the user has answered and are corrected
      operationId: GetCorrectedAnswersFromUser
      description: Returns all answers that the user has answered and are corrected
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who is the author of the answers
        required: true
        type: string
      responses:
        200:
          description: answers found
          schema:
            type: array
            items:
              $ref: '#/definitions/Answer'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /users/{username}/UncorrectedAnswers:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all answers that the user has answered and are not corrected
      operationId: GetUncorrectedAnswersFromUser
      description: Returns all answers that the user has answered and are not corrected
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who is the author of the answers
        required: true
        type: string
      responses:
        200:
          description: answers found
          schema:
            type: array
            items:
              $ref: '#/definitions/Answer'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /users/{username}/answers:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns all answers that the user has answered
      operationId: GetAnswersFromUser
      description: Returns all answers that the user has answered
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who is the author of the answers
        required: true
        type: string
      responses:
        200:
          description: answers found
          schema:
            type: array
            items:
              $ref: '#/definitions/Answer'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /users/{username}/answers/{answerid}:
    get:
      security:
        - BearerCookie: []
      tags:
      - user
      summary: Returns an answers that the user has answered
      operationId: GetAnswerFromUser
      description: Returns an answer that the user has answered
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who is the author of the answer
        required: true
        type: string
      - in: path
        name: answerid
        description: Id of the answer
        required: true
        type: integer
      responses:
        200:
          description: answer found
          schema:
            $ref: '#/definitions/Answer'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /teams:
    get:
      security:
        - BearerCookie: []
      tags:
      - team
      summary: Returns all teams.
      operationId: GetTeams
      description: Returns all teams.
      produces:
      - application/json
      parameters:
      - in: query
        name: likeStartTeamname
        type: string
      - in: query
        name: likeTeamname
        type: string
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: teams found
          schema:
            type: array
            items:
              $ref: '#/definitions/Team'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        500:
          $ref: '#/responses/InternalServerError'
  /teams/{teamname}:
    get:
      security:
        - BearerCookie: []
      tags:
      - team
      summary: Finds a team by its teamname
      operationId: getTeam
      description: Finds a team by its teamname
      produces:
      - application/json
      parameters:
      - in: path
        name: teamname
        description: Teamname of the team to find
        required: true
        type: string
      responses:
        200:
          description: team found
          schema:
            $ref: '#/definitions/Team'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    put:
      security:
        - BearerCookie: []
      tags:
      - team
      summary: Modifies the team <teamname>
      operationId: putTeam
      description: Modifies the team <teamname>
      consumes:
      - application/json
      parameters:
      - in: path
        name: teamname
        description: Teamname of the team to modify its information
        required: true
        type: string
      - in: body
        name: team
        required: true
        description: Team information updated
        schema:
          $ref: '#/definitions/Team'
      responses:
        200:
          description: team updated
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        409:
          $ref: '#/responses/ConflictError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    delete:
      security:
        - BearerCookie: []
      tags:
      - team
      summary: Deletes a team by its teamname
      operationId: deleteTeam
      description: Deletes a team by its teamname
      parameters:
      - in: path
        name: teamname
        description: Teamname of the team to delete
        required: true
        type: string
      responses:
        200:
          description: team found and deleted
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /teams/{teamname}/members:
    get:
      security:
        - BearerCookie: []
      tags:
      - team
      summary: Returns all users that have the role members in a team
      operationId: GetMembers
      description: Returns all users that have the role members in a team
      produces:
      - application/json
      parameters:
      - in: path
        name: teamname
        description: Teamname of the team to get its members
        required: true
        type: string
      responses:
        200:
          description: users found
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /teams/{teamname}/members/{username}:
    get:
      security:
        - BearerCookie: []
      tags:
      - team
      summary: Returns a user that have the role member in a team
      operationId: GetMember
      description: Returns a user that have the role member in a team
      produces:
      - application/json
      parameters:
      - in: path
        name: teamname
        description: Teamname of the team to get its member
        required: true
        type: string
      - in: path
        name: username
        description: Username of the user to check if it is a member
        required: true
        type: string
      responses:
        200:
          description: user found
          schema:
            $ref: '#/definitions/User'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    put:
      security:
        - BearerCookie: []
      tags:
      - team
      summary: Adds user {username} to team {teamname} as a Member
      operationId: AddMember
      description: Adds user {username} to team {teamname} as a Member.
      produces:
      - application/json
      parameters:
      - in: body
        name: message
        description: Message sent to the user as a notification
        required: false
        schema:
          $ref: '#/definitions/Message'
      - in: path
        name: teamname
        description: Teamname of the team to modify
        required: true
        type: string
      - in: path
        name: username
        description: Username of the user to add
        required: true
        type: string
      responses:
        200:
          description: User added to team
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        409:
          $ref: '#/responses/ConflictError' #? lo quito? si ya esta añadido deberia devolver error?
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /teams/{teamname}/admins:
    get:
      security:
        - BearerCookie: []
      tags:
      - team
      summary: Returns all users that are admins of a team
      operationId: GetAdmins
      description: Returns all users that are admins of a team
      produces:
      - application/json
      parameters:
      - in: path
        name: teamname
        description: Teamname of the team to get its admins
        required: true
        type: string
      responses:
        200:
          description: admins found
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /teams/{teamname}/admins/{username}:
    get:
      security:
        - BearerCookie: []
      tags:
      - team
      summary: Returns a user that have the role admin in a team
      operationId: GetAdmin
      description: Returns a user that have the role admin in a team
      produces:
      - application/json
      parameters:
      - in: path
        name: teamname
        description: Teamname of the team to get its admin
        required: true
        type: string
      - in: path
        name: username
        description: Username of the user to check if it is an admin
        required: true
        type: string
      responses:
        200:
          description: user found
          schema:
            $ref: '#/definitions/User'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    put:
      security:
        - BearerCookie: []
      tags:
      - team
      summary: Adds user {username} to team {teamname} as an Admin
      operationId: AddAdmin
      description: Adds user {username} to team {teamname} as an Admin.
      produces:
      - application/json
      parameters:
      - in: body
        name: message
        description: Message sent to the user as a notification
        required: false
        schema:
          $ref: '#/definitions/Message'
      - in: path
        name: teamname
        description: Teamname of the team to modify
        required: true
        type: string
      - in: path
        name: username
        description: Username of the user to add
        required: true
        type: string
      responses:
        200:
          description: User added to team
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        409:
          $ref: '#/responses/ConflictError' #? lo quito? si ya esta añadido deberia devolver error?
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /teams/{teamname}/users:
    get:
      security:
        - BearerCookie: []
      tags:
      - team
      summary: Returns all users that are in a team
      operationId: GetUsersFromTeam
      description: Returns all users that are in a team
      produces:
      - application/json
      parameters:
      - in: path
        name: teamname
        description: Teamname of the team to get its users
        required: true
        type: string
      responses:
        200:
          description: users found
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'   
  /teams/{teamname}/users/{username}:
    get:
      security:
        - BearerCookie: []
      tags:
      - team
      summary: Returns a user that is in a team
      operationId: GetUserFromTeam
      description: Returns a user that is in a team
      produces:
      - application/json
      parameters:
      - in: path
        name: teamname
        description: Teamname of the team to get its user
        required: true
        type: string
      - in: path
        name: username
        description: Username of the user to check if it is in the team
        required: true
        type: string
      responses:
        200:
          description: user found
          schema:
            $ref: '#/definitions/User'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    delete:
      security:
        - BearerCookie: []
      tags:
      - team
      summary: Deletes user {username} from team {teamname}
      operationId: DeleteUserFromTeam
      description: Deletes user {username} from team {teamname}
      produces:
      - application/json
      parameters:
      - in: path
        name: teamname
        description: Teamname of the team to modify
        required: true
        type: string
      - in: path
        name: username
        description: Username of the user to delete from team
        required: true
        type: string
      responses:
        200:
          description: User deleted from team
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /teams/{teamname}/questions:
    get:
      security:
        - BearerCookie: []
      tags:
      - team
      summary: Returns all questions that the team administers
      operationId: GetQuestionsFromTeam
      description: Returns all questions that the team administers
      produces:
      - application/json
      parameters:
      - in: path
        name: teamname
        description: Teamname of the team to get its questions
        required: true
        type: string
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: questions found
          schema:
            type: array
            items:
              $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /teams/{teamname}/questions/{questionid}:
    get:
      security:
        - BearerCookie: []
      tags:
      - team
      summary: Returns a question that the team administers
      operationId: GetQuestionFromTeam
      description: Returns a question that the team administers
      produces:
      - application/json
      parameters:
      - in: path
        name: teamname
        description: Teamname of the team to get its question
        required: true
        type: string
      - in: path
        name: questionid
        description: Id of the question to find
        required: true
        type: integer
      responses:
        200:
          description: question found
          schema:
            $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  
  /teams/{teamname}/tests:
    get:
      security:
        - BearerCookie: []
      tags:
      - team
      summary: Returns all tests that the team administers
      operationId: GetTestsFromTeam
      description: Returns all tests that the team administers
      produces:
      - application/json
      parameters:
      - in: path
        name: teamname
        description: Teamname of the team to get its tests
        required: true
        type: string
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: tests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /teams/{teamname}/tests/{testid}:
    get:
      security:
        - BearerCookie: []
      tags:
      - team
      summary: Returns a test that the team administers
      operationId: GetTestFromTeam
      description: Returns a test that the team administers
      produces:
      - application/json
      parameters:
      - in: path
        name: teamname
        description: Teamname of the team to get its question
        required: true
        type: string
      - in: path
        name: testid
        description: Id of the test to find
        required: true
        type: integer
      responses:
        200:
          description: test found
          schema:
            $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /teams/{teamname}/publishedTests:
    get:
      security:
        - BearerCookie: []
      tags:
      - team
      summary: Returns all publishedTests that the team administers
      operationId: GetPublishedTestsFromTeam
      description: Returns all publishedTests that the team administers
      produces:
      - application/json
      parameters:
      - in: path
        name: teamname
        description: Teamname of the team to get its publishedTests
        required: true
        type: string
      responses:
        200:
          description: publishedTests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /teams/{teamname}/publishedTests/{testid}:
    get:
      security:
        - BearerCookie: []
      tags:
      - team
      summary: Returns a publishedTest that the team administers
      operationId: GetPublishedTestFromTeam
      description: Returns a publishedTest that the team administers
      produces:
      - application/json
      parameters:
      - in: path
        name: teamname
        description: Teamname of the team to get its publishedTest
        required: true
        type: string
      - in: path
        name: testid
        description: Id of the publishedTest to find
        required: true
        type: integer
      responses:
        200:
          description: publishedTest found
          schema:
            $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /teams/{teamname}/invitedTests:
    get:
      security:
        - BearerCookie: []
      tags:
      - team
      summary: Returns all publishedTests that the team is invited to
      operationId: GetInvitedTestsFromTeam
      description: Returns all publishedTests that the team is invited to
      produces:
      - application/json
      parameters:
      - in: path
        name: teamname
        description: Teamname of the team to get its publishedTests is invited to
        required: true
        type: string
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: publishedTests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /teams/{teamname}/invitedTests/{testid}:
    get:
      security:
        - BearerCookie: []
      tags:
      - team
      summary: Returns a publishedTest that the team is invited to
      operationId: GetInvitedTestFromTeam
      description: Returns a publishedTest that the team is invited to
      produces:
      - application/json
      parameters:
      - in: path
        name: teamname
        description: Teamname of the team to get its publishedTest is invited to
        required: true
        type: string
      - in: path
        name: testid
        description: Id of the publishedTest to find
        required: true
        type: integer
      responses:
        200:
          description: publishedTest found
          schema:
            $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'


  /tags:
    get:
      tags:
      - tag
      summary: Returns all tags.
      operationId: GetTags
      description: Returns all tags.
      produces:
      - application/json
      parameters:
      - in: query
        name: likeTag
        type: string
        description: Partial name of the tag to find autocompletion of
      - in: query
        name: orderby
        type: string
        enum: [firstAlpha, lastAlpha, moreQuestion, lessQuestion, moreTest, lessTest]
        description: Indicates which element is first returned. In case of tie it unties with firstAlpha
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: tags found
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        500:
          $ref: '#/responses/InternalServerError'
 
  /tags/{tag}:
    get:
      tags:
      - tag
      summary: Returns a tag.
      operationId: GetTag
      description: Returns a tag.
      produces:
      - application/json
      parameters:
      - in: path
        name: tag
        description: Tag to find
        required: true
        type: string
      responses:
        200:
          description: tag found
          schema:
            $ref: '#/definitions/Tag'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /tags/{tag}/editQuestions:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - tag
      summary: Returns all non-published questions from a tag.
      operationId: GetEditQuestionsFromTag
      description: Returns all non-published questions from a tag.
      produces:
      - application/json
      parameters:
      - in: path
        name: tag
        description: Tag to find its questions
        required: true
        type: string
      responses:
        200:
          description: questions found
          schema:
            type: array
            items:
              $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /tags/{tag}/questions:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - tag
      summary: Returns all questions from a tag.
      operationId: GetQuestionsFromTag
      description: Returns all questions from a tag.
      produces:
      - application/json
      parameters:
      - in: path
        name: tag
        description: Tag to find its questions
        required: true
        type: string
      responses:
        200:
          description: questions found
          schema:
            type: array
            items:
              $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /tags/{tag}/tests:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - tag
      summary: Returns all tests from a tag.
      operationId: GetTestsFromTag
      description: Returns all tests from a tag.
      produces:
      - application/json
      parameters:
      - in: path
        name: tag
        description: Tag to find its tests
        required: true
        type: string
      responses:
        200:
          description: tests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /tags/{tag}/editTests:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - tag
      summary: Returns all non published tests from a tag.
      operationId: GetEditTestsFromTag
      description: Returns all non published tests from a tag.
      produces:
      - application/json
      parameters:
      - in: path
        name: tag
        description: Tag to find its non published tests
        required: true
        type: string
      responses:
        200:
          description: tests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'


  /allQuestions:
    get:
      security:
        - BearerCookie: []
      tags:
      - question
      summary: Returns all questions. Admin operation.
      operationId: GetAllQuestions
      description: Returns all questions. Admin operation.
      produces:
      - application/json
      parameters:
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: questions found
          schema:
            type: array
            items:
              $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        500:
          $ref: '#/responses/InternalServerError'

  /allEditQuestions:
    get:
      security:
        - BearerCookie: []
      tags:
      - question
      summary: Returns all non-published questions
      operationId: GetAllEditQuestions
      description: Returns all non-published questions
      produces:
      - application/json
      parameters:
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: questions found
          schema:
            type: array
            items:
              $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        500:
          $ref: '#/responses/InternalServerError'

  /editQuestions:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - question
      summary: Returns all public non-published questions
      operationId: GetEditQuestions
      description: Returns all public non-published questions
      produces:
      - application/json
      parameters:
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: questions found
          schema:
            type: array
            items:
              $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        500:
          $ref: '#/responses/InternalServerError'
  /questions:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - question
      summary: Returns all public questions
      operationId: GetQuestions
      description: Returns all public questions
      produces:
      - application/json
      parameters:
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: questions found
          schema:
            type: array
            items:
              $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        500:
          $ref: '#/responses/InternalServerError'
  /questions/{questionid}:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - question
      summary: Returns a question
      operationId: GetQuestion
      description: Returns a question
      produces:
      - application/json
      parameters:
      - in: path
        name: questionid
        description: Id of the question to find
        required: true
        type: integer
      responses:
        200:
          description: Question found
          schema:
            $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    put:
      security:
        - BearerCookie: []
      tags:
      - question
      summary: Updates a question
      operationId: PutQuestion
      description: Updates a question
      consumes:
      - application/json
      parameters:
      - in: path
        name: questionid
        description: Id of the question to update
        required: true
        type: integer
      - in: body
        name: question
        description: Question modified
        required: true
        schema:
          $ref: '#/definitions/Question'
      responses:
        200:
          description: Question updated
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        500:
          $ref: '#/responses/InternalServerError'
    delete:
      security:
        - BearerCookie: []
      tags:
      - question
      summary: Deletes a question
      operationId: DeleteQuestion
      description: Deletes a question
      parameters:
      - in: path
        name: questionid
        description: Id of the question to delete
        required: true
        type: integer
      responses:
        200:
          description: Question deleted
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        500:
          $ref: '#/responses/InternalServerError'
  /questions/{questionid}/options:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - question
      summary: Returns all options from a question.
      operationId: GetOptionsFromQuestion
      description: Returns all options from a question.
      produces:
      - application/json
      parameters:
      - in: path
        name: questionid
        description: Id of the question to find its options
        required: true
        type: integer
      responses:
        200:
          description: options found
          schema:
            type: array
            items:
              $ref: '#/definitions/Option'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    post:
      security:
        - BearerCookie: []
      tags:
      - question
      summary: Creates new option to a question.
      operationId: PostOption
      description: Creates new option to a question.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: questionid
        description: Id of the question to find its options
        required: true
        type: integer
      - in: body
        name: option
        description: Option to add
        required: true
        schema:
          $ref: '#/definitions/Option'
      responses:
        201:
          description: option created
          schema:
            $ref: '#/definitions/Option'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /questions/{questionid}/options/{optionindex}:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - question
      summary: Returns an options from a question.
      operationId: GetOptionFromQuestion
      description: Returns an option from a question.
      produces:
      - application/json
      parameters:
      - in: path
        name: questionid
        description: Id of the question to find its option
        required: true
        type: integer
      - in: path
        name: optionindex
        description: Index of the option to find
        required: true
        type: integer
      responses:
        200:
          description: option found
          schema:
            $ref: '#/definitions/Option'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    put:
      security:
        - BearerCookie: []
      tags:
      - question
      summary: Updates an option to a question.
      operationId: PutOption
      description: Updates an option to a question.
      consumes:
      - application/json
      parameters:
      - in: path
        name: questionid
        description: Id of the question to find its option
        required: true
        type: integer
      - in: path
        name: optionindex
        description: Index of the option to update
        required: true
        type: integer
      - in: body
        name: option
        description: Option updated
        required: true
        schema:
          $ref: '#/definitions/Option'
      responses:
        200:
          description: option updated
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    delete:
      security:
        - BearerCookie: []
      tags:
      - question
      summary: Deletes an option to a question.
      operationId: DeleteOption
      description: Deletes an option to a question.
      consumes:
      - application/json
      parameters:
      - in: path
        name: questionid
        description: Id of the question to find its option
        required: true
        type: integer
      - in: path
        name: optionindex
        description: Index of the option to delete
        required: true
        type: integer
      responses:
        200:
          description: option deleted
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /questions/{questionid}/tags:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - question
      summary: Returns all tags from a question.
      operationId: GetTagsFromQuestion
      description: Returns all tags from a question.
      produces:
      - application/json
      parameters:
      - in: path
        name: questionid
        description: Id of the question to find its tags
        required: true
        type: integer
      responses:
        200:
          description: tags found
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /questions/{questionid}/tags/{tag}:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - question
      summary: Returns a tag from a question.
      operationId: GetTagFromQuestion
      description: Returns a tag from a question.
      produces:
      - application/json
      parameters:
      - in: path
        name: questionid
        description: Id of the question to find its tags
        required: true
        type: integer
      - in: path
        name: tag
        description: Tag to find
        required: true
        type: string
      responses:
        200:
          description: tag found
          schema:
            $ref: '#/definitions/Tag'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    put:
      security:
        - BearerCookie: []
      tags:
      - question
      summary: Adds a tag to a question
      operationId: AddTagToQuestion
      description: Adds a tag to a question
      parameters:
      - in: path
        name: questionid
        description: Id of the question to add a tag
        required: true
        type: integer
      - in: path
        name: tag
        description: Tag to add
        required: true
        type: string
      responses:
        200:
          description: tag added
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        409:
          $ref: '#/responses/ConflictError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    delete:
      security:
        - BearerCookie: []
      tags:
      - question
      summary: Removes a tag from a question
      operationId: RemoveTagFromQuestion
      description: Removes a tag from a question
      parameters:
      - in: path
        name: questionid
        description: Id of the question to remove a tag
        required: true
        type: integer
      - in: path
        name: tag
        description: Tag to remove
        required: true
        type: string
      responses:
        200:
          description: tag removed
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /questions/{questionid}/teams:
    get:
      security:
        - BearerCookie: []
      tags:
      - question
      summary: Returns all teams from a question.
      operationId: GetTeamsFromQuestion
      description: Returns all teams from a question.
      produces:
      - application/json
      parameters:
      - in: path
        name: questionid
        description: Id of the question to find its teams
        required: true
        type: integer
      responses:
        200:
          description: teams found
          schema:
            type: array
            items:
              $ref: '#/definitions/Team'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /questions/{questionid}/teams/{teamname}:
    put:
      security:
        - BearerCookie: []
      tags:
      - question
      summary: Adds a team to administer a question
      operationId: AddTeamToQuestion
      description: Adds a team to administer a question
      produces:
      - application/json
      parameters:
      - in: path
        name: teamname
        description: Teamname of the team to let administrate
        required: true
        type: string
      - in: path
        name: questionid
        description: Id of the question to find
        required: true
        type: integer
      responses:
        200:
          description: team added
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    delete:
      security:
        - BearerCookie: []
      tags:
      - question
      summary: Removes a team to administer a question
      operationId: RemoveTeamToQuestion
      description: Removes a team to administer a question
      produces:
      - application/json
      parameters:
      - in: path
        name: teamname
        description: Teamname of the team to remove from question
        required: true
        type: string
      - in: path
        name: questionid
        description: Id of the question to find
        required: true
        type: integer
      responses:
        200:
          description: team removed
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  
  /questions/{questionid}/pruebas:
    get:
      security:
        - BearerCookie: []
      tags:
      - question
      summary: Returns all pruebas from a question.
      operationId: GetPruebasFromQuestion
      description: Returns all pruebas from a question.
      produces:
      - application/json
      parameters:
      - in: path
        name: questionid
        description: Id of the question to find its pruebas
        required: true
        type: integer
      responses:
        200:
          description: pruebas found
          schema:
            type: array
            items:
              $ref: '#/definitions/Prueba'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    post:
      security:
        - BearerCookie: []
      tags:
      - question
      summary: Creates new prueba to a question.
      operationId: PostPrueba
      description: Creates new prueba to a question.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: questionid
        description: Id of the question to create a prueba
        required: true
        type: integer
      - in: body
        name: prueba
        description: Prueba to add
        required: true
        schema:
          $ref: '#/definitions/Prueba'
      responses:
        201:
          description: prueba created
          schema:
            $ref: '#/definitions/Prueba'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /questions/{questionid}/pruebas/{pruebaid}:
    get:
      security:
        - BearerCookie: []
      tags:
      - question
      summary: Returns a prueba from a question.
      operationId: GetPruebaFromQuestion
      description: Returns a prueba from a question.
      produces:
      - application/json
      parameters:
      - in: path
        name: questionid
        description: Id of the question to find its prueba
        required: true
        type: integer
      - in: path
        name: pruebaid
        description: id of the prueba to find
        required: true
        type: integer
      responses:
        200:
          description: prueba found
          schema:
            $ref: '#/definitions/Prueba'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    put:
      security:
        - BearerCookie: []
      tags:
      - question
      summary: Modifies a prueba from a question.
      operationId: PutPrueba
      description: Modifies a prueba from a question.
      consumes:
      - application/json
      parameters:
      - in: path
        name: questionid
        description: Id of the question to modify its prueba
        required: true
        type: integer
      - in: path
        name: pruebaid
        description: id of the prueba to modify
        required: true
        type: integer
      - in: body
        name: prueba
        description: Prueba updated
        required: true
        schema:
          $ref: '#/definitions/Prueba'
      responses:
        200:
          description: prueba modified
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    delete:
      security:
        - BearerCookie: []
      tags:
      - question
      summary: Deletes a prueba from a question.
      operationId: DeletePrueba
      description: Deletes a prueba from a question.
      parameters:
      - in: path
        name: questionid
        description: Id of the question to delete its prueba
        required: true
        type: integer
      - in: path
        name: pruebaid
        description: id of the prueba to delete
        required: true
        type: integer
      responses:
        200:
          description: prueba deleted
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /publicEditTests:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - test
      summary: Returns all public non-published tests
      operationId: GetPublicEditTests
      description: Returns all public non-published tests
      produces:
      - application/json
      parameters:
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: tests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        500:
          $ref: '#/responses/InternalServerError'

  /tests:
    get:
      security:
        - BearerCookie: []
      tags:
      - test
      summary: Returns all tests
      operationId: GetAllTests
      description: Returns all tests
      produces:
      - application/json
      responses:
        200:
          description: tests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        500:
          $ref: '#/responses/InternalServerError'
  /editTests:
    get:
      security:
        - BearerCookie: []
      tags:
      - test
      summary: Returns all non-published tests
      operationId: GetAllEditTests
      description: Returns all non-published tests
      produces:
      - application/json
      responses:
        200:
          description: tests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        500:
          $ref: '#/responses/InternalServerError'
  /publicTests:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - test
      summary: Returns all public tests
      operationId: GetPublicTests
      description: Returns all tests
      produces:
      - application/json
      responses:
        200:
          description: tests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        500:
          $ref: '#/responses/InternalServerError'
  /tests/{testid}:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - test
      summary: Returns a test
      operationId: GetTest
      description: Returns a test
      produces:
      - application/json
      parameters:
      - in: path
        name: testid
        description: Id of the test to find
        required: true
        type: integer
      responses:
        200:
          description: Test found
          schema:
            $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    put:
      security:
        - BearerCookie: []
      tags:
      - test
      summary: Updates a test
      operationId: PutTest
      description: Updates a test
      consumes:
      - application/json
      parameters:
      - in: path
        name: testid
        description: Id of the test to update
        required: true
        type: integer
      - in: body
        name: test
        description: Test modified
        required: true
        schema:
          $ref: '#/definitions/Test'
      responses:
        200:
          description: Test updated
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        500:
          $ref: '#/responses/InternalServerError'
    delete:
      security:
        - BearerCookie: []
      tags:
      - test
      summary: Deletes a test
      operationId: DeleteTest
      description: Deletes a test
      parameters:
      - in: path
        name: testid
        description: Id of the test to delete
        required: true
        type: integer
      responses:
        200:
          description: Test deleted
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /tests/{testid}/tags:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - test
      summary: Returns all tags from a test.
      operationId: GetTagsFromTest
      description: Returns all tags from a test.
      produces:
      - application/json
      parameters:
      - in: path
        name: testid
        description: Id of the tset to find its tags
        required: true
        type: integer
      responses:
        200:
          description: tags found
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /tests/{testid}/tags/{tag}:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - test
      summary: Returns a tag from a test.
      operationId: GetTagFromTest
      description: Returns a tag from a test.
      produces:
      - application/json
      parameters:
      - in: path
        name: testid
        description: Id of the test to find its tags
        required: true
        type: integer
      - in: path
        name: tag
        description: Tag to find
        required: true
        type: string
      responses:
        200:
          description: tag found
          schema:
            $ref: '#/definitions/Tag'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    put:
      security:
        - BearerCookie: []
      tags:
      - test
      summary: Adds a tag to a test
      operationId: AddTagToTest
      description: Adds a tag to a test
      parameters:
      - in: path
        name: testid
        description: Id of the test to add a tag
        required: true
        type: integer
      - in: path
        name: tag
        description: Tag to add
        required: true
        type: string
      responses:
        200:
          description: tag added
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        409:
          $ref: '#/responses/ConflictError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    delete:
      security:
        - BearerCookie: []
      tags:
      - test
      summary: Removes a tag from a test
      operationId: RemoveTagFromTest
      description: Removes a tag from a test
      parameters:
      - in: path
        name: testid
        description: Id of the test to remove a tag
        required: true
        type: integer
      - in: path
        name: tag
        description: Tag to remove
        required: true
        type: string
      responses:
        200:
          description: tag removed
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /tests/{testid}/adminTeams:
    get:
      security:
        - BearerCookie: []
      tags:
      - test
      summary: Returns all teams from a test.
      operationId: GetAdminTeamsFromTest
      description: Returns all teams from a test.
      produces:
      - application/json
      parameters:
      - in: path
        name: testid
        description: Id of the test to find its teams
        required: true
        type: integer
      responses:
        200:
          description: teams found
          schema:
            type: array
            items:
              $ref: '#/definitions/Team'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /tests/{testid}/adminTeams/{teamname}:
    put:
      security:
        - BearerCookie: []
      tags:
      - test
      summary: Adds a team to administer a test
      operationId: AddAdminTeamToTest
      description: Adds a team to administer a test
      produces:
      - application/json
      parameters:
      - in: path
        name: teamname
        description: Teamname of the team to let administrate
        required: true
        type: string
      - in: path
        name: testid
        description: Id of the test to find
        required: true
        type: integer
      responses:
        200:
          description: team added
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    delete:
      security:
        - BearerCookie: []
      tags:
      - test
      summary: Removes a team to administer a test
      operationId: RemoveAdminTeamToTest
      description: Removes a team to administer a test
      produces:
      - application/json
      parameters:
      - in: path
        name: teamname
        description: Teamname of the team to remove
        required: true
        type: string
      - in: path
        name: testid
        description: Id of the test to find
        required: true
        type: integer
      responses:
        200:
          description: team removed
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /tests/{testid}/publishedTests:
    post:
      security:
        - BearerCookie: []
      tags:
      - test
      - publishedTest
      summary: Creates a new publishedTest. The user must be the owner of the test.
      operationId: PostPublishedTest
      description: Creates a new publishedTest. The user must be the owner of the test.
      produces:
      - application/json
      parameters:
      - in: body
        name: publishTestParams
        description: Some attributes of the new test
        required: true
        schema:
          $ref: '#/definitions/PublishTestParams'
      - in: path
        name: testid
        description: Id of the test to publish
        required: true
        type: integer
      responses:
        201:
          description: publishedTest created
          schema:
            $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - test
      - publishedTest
      summary: Returns all publishedTest originated from the same test
      operationId: GetPublishedTestsFromTest
      description: Returns all publishedTest originated from the same test
      produces:
      - application/json
      parameters:
      - in: path
        name: testid
        description: Id of the original test
        required: true
        type: integer
      responses:
        200:
          description: Tests Found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /tests/{testid}/questions:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - test
      summary: Returns all questions of the test
      operationId: GetQuestionsFromTest
      description: Returns all questions of the test
      produces:
      - application/json
      parameters:
      - in: path
        name: testid
        description: Id of the test
        required: true
        type: integer
      responses:
        200:
          description: questions found
          schema:
            type: array
            items:
              $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /tests/{testid}/questions/{questionid}:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - test
      summary: Returns a question from a test
      operationId: GetQuestionFromTest
      description: Returns a question from a test
      produces:
      - application/json
      parameters:
      - in: path
        name: testid
        description: Id of the test to find a question from
        required: true
        type: integer
      - in: path
        name: questionid
        description: Id of the question to find in the test
        required: true
        type: integer
      responses:
        200:
          description: Question found
          schema:
            $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    put:
      security:
        - BearerCookie: []
      tags:
      - test
      summary: Adds an existing question to a test
      operationId: AddQuestionToTest
      description: Adds an existing question to a test
      parameters:
      - in: path
        name: testid
        description: Id of the test to add a question to
        required: true
        type: integer
      - in: path
        name: questionid
        description: Id of the question to add to the test
        required: true
        type: integer
      - in: body
        name: testPregunta
        description: Valor que tendra la pregunta en el test, y posicion
        required: true
        schema:
          $ref: '#/definitions/TestPregunta'
      responses:
        200:
          description: Question added
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    delete:
      security:
        - BearerCookie: []
      tags:
      - test
      summary: Removes an existing question from a test
      operationId: RemoveQuestionFromTest
      description: Removes an existing question from a test
      parameters:
      - in: path
        name: testid
        description: Id of the test to remove a question from
        required: true
        type: integer
      - in: path
        name: questionid
        description: Id of the question to remove from the test
        required: true
        type: integer
      responses:
        200:
          description: Question removed
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /publicPublishedTests:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - publishedTest
      summary: Returns all public publishedTests
      operationId: GetPublicPublishedTests
      description: Returns all public publishedTests
      produces:
      - application/json
      parameters:
      - in: query
        name: tags
        type: array
        collectionFormat: pipes
        items:
          type: array
          collectionFormat: csv
          items:
            type: string
      - in: query
        name: likeTitle
        type: string
      - in: query
        name: orderby
        type: string
        enum: [newDate, oldDate, moreFav, lessFav, moreTime, lessTime]
        description: Indicates which element is first returned. In case of tie it unties with newdate first
      - in: query
        name: limit
        type: integer
        description: max number of elements to be returned
        minimum: 0
      - in: query
        name: offset
        type: integer
        description: first elements to be skipped at being returned
        minimum: 0
      responses:
        200:
          description: PublishedTests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        500:
          $ref: '#/responses/InternalServerError'
  /publicPublishedTests/{testid}:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - publishedTest
      summary: Returns a public publishedTest
      operationId: GetPublicPublishedTest
      description: Returns a public publishedTest
      produces:
      - application/json
      parameters:
      - in: path
        name: testid
        description: Id of the publishedTest
        required: true
        type: integer
      responses:
        200:
          description: PublishedTest found
          schema:
            $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
          
  /publishedTests:
    get:
      security:
        - BearerCookie: []
      tags:
      - publishedTest
      summary: Returns all publishedTests
      operationId: GetPublishedTests
      description: Returns all publishedTests
      produces:
      - application/json
      responses:
        200:
          description: PublishedTests found
          schema:
            type: array
            items:
              $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        500:
          $ref: '#/responses/InternalServerError'
  /publishedTests/{testid}:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - publishedTest
      summary: Returns a publishedTest
      operationId: GetPublishedTest
      description: Returns a publishedTest
      produces:
      - application/json
      parameters:
      - in: path
        name: testid
        description: Id of the publishedTest
        required: true
        type: integer
      responses:
        200:
          description: PublishedTest found
          schema:
            $ref: '#/definitions/Test'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    put:
      security:
        - BearerCookie: []
      tags:
      - publishedTest
      summary: Updates a published test. Only a few parameters are affected
      operationId: PutPublishedTest
      description: Updates a published test. Only a few parameters are affected
      consumes:
      - application/json
      parameters:
      - in: path
        name: testid
        description: Id of the published test to update
        required: true
        type: integer
      - in: body
        name: pTestUpdate
        description: PTest new parameters
        required: true
        schema:
          $ref: '#/definitions/PTestUpdate'
      responses:
        200:
          description: Test updated
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        500:
          $ref: '#/responses/InternalServerError'

  /publishedTests/{testid}/users:
    get:
      security:
        - BearerCookie: []
      tags:
      - publishedTest
      summary: Returns all users from a publishedTest.
      operationId: GetUsersFromPublishedTest
      description: Returns all users from a publishedTest.
      produces:
      - application/json
      parameters:
      - in: path
        name: testid
        description: Id of the publishedTest to find its users
        required: true
        type: integer
      responses:
        200:
          description: users found
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'  
  /publishedTests/{testid}/users/{username}:
    put:
      security:
        - BearerCookie: []
      tags:
      - publishedTest
      summary: Invites a user to do a test
      operationId: InviteUserToPublishedTest
      description: Invites a user to do a test
      produces:
      - application/json
      parameters:
      - in: body
        name: message
        description: Message sent to the user as a notification
        required: false
        schema:
          $ref: '#/definitions/Message'
      - in: path
        name: username
        description: Username of the user who can answer the publishedTest
        required: true
        type: string
      - in: path
        name: testid
        description: Id of the test
        required: true
        type: integer
      responses:
        200:
          description: user invited
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    delete:
      security:
        - BearerCookie: []
      tags:
      - publishedTest
      summary: Removes a user from a test
      operationId: RemoveUserToPublishedTest
      description: Removes a user to do a test
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: Username of the user who cant answer the publishedTest
        required: true
        type: string
      - in: path
        name: testid
        description: Id of the test
        required: true
        type: integer
      responses:
        200:
          description: user removed
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /publishedTests/{testid}/teams:
    get:
      security:
        - BearerCookie: []
      tags:
      - publishedTest
      summary: Returns all teams from a publishedTest.
      operationId: GetTeamsFromPublishedTest
      description: Returns all teams from a publishedTest.
      produces:
      - application/json
      parameters:
      - in: path
        name: testid
        description: Id of the publishedTest to find its teams
        required: true
        type: integer
      responses:
        200:
          description: teams found
          schema:
            type: array
            items:
              $ref: '#/definitions/Team'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'  
  /publishedTests/{testid}/teams/{teamname}:
    put:
      security:
        - BearerCookie: []
      tags:
      - publishedTest
      summary: Invites a team to do a test
      operationId: InviteTeamToPublishedTest
      description: Invites a team to do a test
      produces:
      - application/json
      parameters:
      - in: body
        name: message
        description: Message sent to the users as a notification
        required: false
        schema:
          $ref: '#/definitions/Message'
      - in: path
        name: teamname
        description: Teamname of the team to invite to test
        required: true
        type: string
      - in: path
        name: testid
        description: Id of the test to find
        required: true
        type: integer
      responses:
        200:
          description: team invited
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    delete:
      security:
        - BearerCookie: []
      tags:
      - publishedTest
      summary: Removes a team to do a test
      operationId: RemoveTeamToPublishedTest
      description: Removes a team to do a test
      produces:
      - application/json
      parameters:
      - in: path
        name: teamname
        description: Teamname of the team to Remove from test
        required: true
        type: string
      - in: path
        name: testid
        description: Id of the test to find
        required: true
        type: integer
      responses:
        200:
          description: team removed
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /publishedTests/{testid}/tags:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - publishedTest
      summary: Returns all tags from a published test.
      operationId: GetTagsFromPublishedTest
      description: Returns all tags from a published test.
      produces:
      - application/json
      parameters:
      - in: path
        name: testid
        description: Id of the published test to find its tags
        required: true
        type: integer
      responses:
        200:
          description: tags found
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /publishedTests/{testid}/tags/{tag}:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - publishedTest
      summary: Returns a tag from a published test.
      operationId: GetTagFromPublishedTest
      description: Returns a tag from a published test.
      produces:
      - application/json
      parameters:
      - in: path
        name: testid
        description: Id of the published test to find its tags
        required: true
        type: integer
      - in: path
        name: tag
        description: Tag to find
        required: true
        type: string
      responses:
        200:
          description: tag found
          schema:
            $ref: '#/definitions/Tag'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /publishedTests/{testid}/questions:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - publishedTest
      summary: Returns all questions from a published test
      operationId: GetQuestionsFromPublishedTests
      description: Returns all questions from a published test
      produces:
      - application/json
      parameters:
      - in: path
        name: testid
        description: Id of the publishedTest
        required: true
        type: integer
      responses:
        200:
          description: Questions found
          schema:
            type: array
            items:
              $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /publishedTests/{testid}/questions/{questionid}:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - publishedTest
      summary: Returns a question from a published test
      operationId: GetQuestionFromPublishedTests
      description: Returns a question from a published test
      produces:
      - application/json
      parameters:
      - in: path
        name: testid
        description: Id of the publishedTest
        required: true
        type: integer
      - in: path
        name: questionid
        description: Id of the question to get
        required: true
        type: integer
      responses:
        200:
          description: Question found
          schema:
            $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /publishedTests/{testid}/questions/{questionid}/options:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - publishedTest
      summary: Returns all options from a question.
      operationId: GetOptionsFromPublishedQuestion
      description: Returns all options from a question.
      produces:
      - application/json
      parameters:
      - in: path
        name: testid
        description: Id of the publishedTest
        required: true
        type: integer
      - in: path
        name: questionid
        description: Id of the question to find its options
        required: true
        type: integer
      responses:
        200:
          description: options found
          schema:
            type: array
            items:
              $ref: '#/definitions/Option'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /publishedTests/{testid}/questions/{questionid}/tags:
    get:
      security:
        - BearerCookie: []
        - NoRegistered: []
      tags:
      - publishedTest
      summary: Returns all tags from a question.
      operationId: GetTagsFromPublishedQuestion
      description: Returns all tags from a question.
      produces:
      - application/json
      parameters:
      - in: path
        name: testid
        description: Id of the publishedTest
        required: true
        type: integer
      - in: path
        name: questionid
        description: Id of the question to find its tags
        required: true
        type: integer
      responses:
        200:
          description: tags found
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /publishedTests/{testid}/answers:
    get:
      security:
        - BearerCookie: []
      tags:
      - publishedTest
      summary: Returns all answers from a published test
      operationId: GetAnswersFromPublishedTests
      description: Returns all answers from a published test
      produces:
      - application/json
      parameters:
      - in: path
        name: testid
        description: Id of the publishedTest
        required: true
        type: integer
      responses:
        200:
          description: Answers found
          schema:
            type: array
            items:
              $ref: '#/definitions/Answer'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /publishedTests/{testid}/correctedAnswers:
    get:
      security:
        - BearerCookie: []
      tags:
      - publishedTest
      summary: Returns all answers from a published test that are corrected
      operationId: GetCorrectedAnswersFromPublishedTests
      description: Returns all answers from a published test that are corrected
      produces:
      - application/json
      parameters:
      - in: path
        name: testid
        description: Id of the publishedTest
        required: true
        type: integer
      - in: query
        name: orderByAnswer
        type: string
        enum: [newStartDate, oldStartDate, morePuntuacion, lessPuntuacion, moreDuracion, lessDuracion]
      responses:
        200:
          description: Answers found
          schema:
            type: array
            items:
              $ref: '#/definitions/Answer'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /publishedTests/{testid}/uncorrectedAnswers:
    get:
      security:
        - BearerCookie: []
      tags:
      - publishedTest
      summary: Returns all answers from a published test that are uncorrected
      operationId: GetUncorrectedAnswersFromPublishedTests
      description: Returns all answers from a published test that are uncorrected
      produces:
      - application/json
      parameters:
      - in: path
        name: testid
        description: Id of the publishedTest
        required: true
        type: integer
      - in: query
        name: orderByAnswer
        type: string
        enum: [newStartDate, oldStartDate, morePuntuacion, lessPuntuacion, moreDuracion, lessDuracion]
      responses:
        200:
          description: Answers found
          schema:
            type: array
            items:
              $ref: '#/definitions/Answer'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /publishedTests/{testid}/questions/{questionid}/qanswers:
    get:
      security:
        - BearerCookie: []
      tags:
      - publishedTest
      summary: Returns all questions answers to a question of a published test
      operationId: GetQuestionAnswersFromPublishedTestQuestion
      description: Returns all questions answers to a question of a published test
      produces:
      - application/json
      parameters:
      - in: path
        name: testid
        description: Id of the publishedTest
        required: true
        type: integer
      - in: path
        name: questionid
        description: Id of the question
        required: true
        type: integer
      - in: query
        name: likeUsername
        type: string
      responses:
        200:
          description: QuestionAnswers found
          schema:
            type: array
            items:
              $ref: '#/definitions/QuestionAnswer'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /publishedTests/{testid}/questions/{questionid}/pruebas:
    get:
      security:
        - BearerCookie: []
      tags:
      - publishedTest
      summary: Returns all pruebas visibles from a question.
      operationId: GetVisiblePruebasFromQuestionTest
      description: Returns all pruebas visibles from a question.
      produces:
      - application/json
      parameters:
      - in: path
        name: testid
        description: Id of the test
        required: true
        type: integer
      - in: path
        name: questionid
        description: Id of the question to find its pruebas visibles
        required: true
        type: integer
      responses:
        200:
          description: pruebas visibles found
          schema:
            type: array
            items:
              $ref: '#/definitions/Prueba'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /answers:
    get:
      security:
        - BearerCookie: []
      tags:
      - answer
      summary: Returns all answers
      operationId: GetAnswers
      description: Returns all answers
      produces:
      - application/json
      responses:
        200:
          description: Answers found
          schema:
            type: array
            items:
              $ref: '#/definitions/Answer'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        500:
          $ref: '#/responses/InternalServerError'
  /answers/{answerid}:
    get:
      security:
        - BearerCookie: []
      tags:
      - answer
      summary: Returns an answers
      operationId: GetAnswer
      description: Returns an answers
      produces:
      - application/json
      parameters:
      - in: path
        name: answerid
        description: Id of the answer
        required: true
        type: integer
      responses:
        200:
          description: Answers found
          schema:
            $ref: '#/definitions/Answer'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    put:
      security:
        - BearerCookie: []
      tags:
      - answer
      summary: Finishes an answer
      operationId: FinishAnswer
      description: Finishes an answers
      parameters:
      - in: path
        name: answerid
        description: Id of the answer
        required: true
        type: integer
      responses:
        200:
          description: Answers finished
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        409:
          $ref: '#/responses/ConflictError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /answers/{answerid}/corrected:
    put:
      security:
        - BearerCookie: []
      tags:
      - answer
      summary: Marks answer as corrected. Only for TestAdmins
      operationId: SetAnswerCorrected
      description: Marks answer as corrected
      parameters:
      - in: path
        name: answerid
        description: Id of the answer
        required: true
        type: integer
      responses:
        200:
          description: Answer updated
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    delete:
      security:
        - BearerCookie: []
      tags:
      - answer
      summary: Marks answer as not corrected. Only for TestAdmins
      operationId: SetAnswerNotCorrected
      description: Marks answer as not corrected
      parameters:
      - in: path
        name: answerid
        description: Id of the answer
        required: true
        type: integer
      responses:
        200:
          description: Answer updated
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /answers/{answerid}/visible:
    put:
      security:
        - BearerCookie: []
      tags:
      - answer
      summary: Marks answer as visible. Only for TestAdmins
      operationId: SetAnswerVisible
      description: Marks answer as visible
      parameters:
      - in: path
        name: answerid
        description: Id of the answer
        required: true
        type: integer
      responses:
        200:
          description: Answer updated
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    delete:
      security:
        - BearerCookie: []
      tags:
      - answer
      summary: Marks answer as not visible. Only for TestAdmins
      operationId: SetAnswerNotVisible
      description: Marks answer as not visible
      parameters:
      - in: path
        name: answerid
        description: Id of the answer
        required: true
        type: integer
      responses:
        200:
          description: Answer updated
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /answers/{answerid}/qanswers:
    get:
      security:
        - BearerCookie: []
      tags:
      - answer
      summary: Returns an answer's questionAnswers
      operationId: GetQuestionAnswersFromAnswer
      description: Returns an answers's questionAnswers
      produces:
      - application/json
      parameters:
      - in: path
        name: answerid
        description: Id of the answer
        required: true
        type: integer
      responses:
        200:
          description: QuestionAnswers found
          schema:
            type: array
            items:
              $ref: '#/definitions/QuestionAnswer'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    post:
      security:
        - BearerCookie: []
      tags:
      - answer
      summary: Answers a question
      operationId: PostQuestionAnswer
      description: Answers a question
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: answerid
        description: Id of the answer
        required: true
        type: integer
      - in: body
        name: questionAnswer
        description: QuestionAnswer to post
        required: true
        schema:
          $ref: '#/definitions/QuestionAnswer'
      responses:
        201:
          description: QuestionAnswer created
          schema:
            $ref: '#/definitions/QuestionAnswer'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /answers/{answerid}/qanswers/{questionid}:
    get:
      security:
        - BearerCookie: []
      tags:
      - answer
      summary: Returns an answer's questionAnswer
      operationId: GetQuestionAnswerFromAnswer
      description: Returns an answers's questionAnswer
      produces:
      - application/json
      parameters:
      - in: path
        name: answerid
        description: Id of the answer
        required: true
        type: integer
      - in: path
        name: questionid
        description: Id of the question it is answering
        required: true
        type: integer
      responses:
        200:
          description: QuestionAnswer found
          schema:
            $ref: '#/definitions/QuestionAnswer'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    put:
      security:
        - BearerCookie: []
      tags:
      - answer
      summary: Updates a QuestionAnswer
      operationId: PutQuestionAnswerFromAnswer
      description: Updates a QuestionAnswer
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: answerid
        description: Id of the answer
        required: true
        type: integer
      - in: path
        name: questionid
        description: Id of the question it is answering
        required: true
        type: integer
      - in: body
        name: questionAnswer
        description: QuestionAnswer Updated
        required: true
        schema:
          $ref: '#/definitions/QuestionAnswer'
      responses:
        200:
          description: QuestionAnswer updated
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    delete:
      security:
        - BearerCookie: []
      tags:
      - answer
      summary: Deletes an answer's questionAnswer. Only if answer is open
      operationId: DeleteQuestionAnswerFromAnswer
      description: Deletes an answers's questionAnswer. Only if answer is open
      produces:
      - application/json
      parameters:
      - in: path
        name: answerid
        description: Id of the answer
        required: true
        type: integer
      - in: path
        name: questionid
        description: Id of the question it is answering
        required: true
        type: integer
      responses:
        200:
          description: QuestionAnswer deleted
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

  /answers/{answerid}/qanswers/{questionid}/review:
    put:
      security:
        - BearerCookie: []
      tags:
      - answer
      summary: Updates an answer review
      operationId: PutReview
      description: Updates an answer review
      consumes:
      - application/json
      parameters:
      - in: path
        name: answerid
        description: Id of the answer
        required: true
        type: integer
      - in: path
        name: questionid
        description: Id of the question it is answering
        required: true
        type: integer
      - in: body
        name: review
        description: Review Updated
        required: true
        schema:
          $ref: '#/definitions/Review'
      responses:
        200:
          description: Review updated
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
    delete:
      security:
        - BearerCookie: []
      tags:
      - answer
      summary: Deletes an answer review
      operationId: DeleteReview
      description: Deletes an answer review
      parameters:
      - in: path
        name: answerid
        description: Id of the answer
        required: true
        type: integer
      - in: path
        name: questionid
        description: Id of the question it is answering
        required: true
        type: integer
      responses:
        200:
          description: Review deleted
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /answers/{answerid}/questions:
    get:
      security:
        - BearerCookie: []
      tags:
      - answer
      summary: Returns all published questions in the test related to the answer. The DTOs will contain isRespondida
      operationId: GetQuestionsFromAnswer
      description: Returns all published questions in the test related to the answer. The DTOs will contain isRespondida
      produces:
      - application/json
      parameters:
      - in: path
        name: answerid
        description: Id of the answer
        required: true
        type: integer
      responses:
        200:
          description: questions found
          schema:
            type: array
            items:
              $ref: '#/definitions/Question'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'
  /answers/{answerid}/questions/{questionid}/qanswers:
    get:
      security:
        - BearerCookie: []
      tags:
      - answer
      summary: Returns an answer question's questionAnswers. It must be only one
      operationId: GetQuestionAnswersFromAnswerAndQuestion
      description: Returns an answer question's questionAnswers. It must be only one
      produces:
      - application/json
      parameters:
      - in: path
        name: answerid
        description: Id of the answer
        required: true
        type: integer
      - in: path
        name: questionid
        description: Id of the question
        required: true
        type: integer
      responses:
        200:
          description: QuestionAnswers found
          schema:
            type: array
            items:
              $ref: '#/definitions/QuestionAnswer'
        400:
          $ref: '#/responses/BadRequestError'
        403:
          $ref: '#/responses/ForbiddenError'
        410:
          $ref: '#/responses/GoneError'
        500:
          $ref: '#/responses/InternalServerError'

responses:
  BadRequestError:
    description: Incorrect Request, or invalida data
    schema:
      $ref: '#/definitions/Error'
  ForbiddenError:
    description: Not authorized to this content
    schema:
      $ref: '#/definitions/Error'
  ConflictError:
    description: A user with same username/email already exists
    schema:
      $ref: '#/definitions/Error'
  GoneError:
    description: That resource does not exist
    schema:
      $ref: '#/definitions/Error'
  InternalServerError:
    description: Internal error
definitions:
  SigninUser:
    type: object
    required:
    - username
    - email
    - pass
    properties:
      username:
        type: string
        example: carlosg72
        pattern: '^[^@ \t\r\n]+$'
        maxLength: 40
      email:
        type: string
        example: carlos@mail.com
        format: email
        pattern: '^[^@ \t\r\n]+@[^@ \t\r\n]+\.[^@ \t\r\n]+$'
        maxLength: 100
      pass:
        type: string
        example: password
        format: password
        pattern: '^.{6,}$'
  EmailUser:
    type: object
    required:
    - email
    properties:
      email:
        type: string
        example: carlos@mail.com
        format: email
        pattern: '^[^@ \t\r\n]+@[^@ \t\r\n]+\.[^@ \t\r\n]+$'
        maxLength: 100
  LoginUser:
    type: object
    required:
    - loginid
    - pass
    properties:
      loginid:
        type: string
        example: carlosg72 || carlos@mail.com #??????
        maxLength: 100
      pass:
        type: string
        example: password
        format: password
        pattern: '^.{6,}$'
  User:
    type: object
    required:
    - username
    - email
    - fullname
    - rol
    properties:
      username:
        type: string
        example: carlosg72
        pattern: '^[^@ \t\r\n]+$'
        maxLength: 40
      email:
        type: string
        example: carlos@mail.com
        format: email
        pattern: '^[^@ \t\r\n]+@[^@ \t\r\n]+\.[^@ \t\r\n]+$'
        maxLength: 100
      fullname:
        type: string
        example: Javier Gatón Herguedas
      rol:
        type: string
        enum: [estudiante, profesor, administrador]
      tiporol:
        type: string
        example: estudiante
  UserUpdate:
    type: object
    required:
    - username
    - email
    - fullname
    - password
    properties:
      username:
        type: string
        example: carlosg72
        pattern: '^[^@ \t\r\n]+$'
        maxLength: 40
      email:
        type: string
        example: carlos@mail.com
        format: email
        pattern: '^[^@ \t\r\n]+@[^@ \t\r\n]+\.[^@ \t\r\n]+$'
        maxLength: 100
      fullname:
        type: string
        example: Javier Gatón Herguedas
      password:
        type: string
        example: password
        format: password
        pattern: '^.{6,}$'
  CustomizedView:
    type: object
    required:
    - rolBase
    - mensajeInicio
    properties:
      rolBase:
        type: string
        enum: [administrador, profesor, estudiante, noRegistrado]
      mensajeInicio:
        type: string
  TipoRol:
    type: object
    required:
    - id
    - rolBase
    - nombre
    - prioridad
    - verPTests
    - verETests
    - verEQuestions
    - verPQuestions
    - verAnswers
    - changeRoles
    - tenerTeams
    - tenerEQuestions
    - tenerETests
    - tenerPTests
    - adminPTests
    - adminETests
    - adminEQuestions
    - adminAnswers
    - adminUsers
    - adminTeams
    - adminConfiguration
    - adminPermissions
    - tipoInicial
    properties:
      id:
        type: integer
      rolBase:
        type: string
        enum: [administrador, profesor, estudiante, noRegistrado]
      nombre:
        type: string
        example: Moderador
      prioridad:
        type: integer
        minimum: 0
        description: Maximum priority is 0, any greater value represents less priority
      verPTests:
        type: boolean
        description: true if the users can see PublishedTests
      verETests:
        type: boolean
        description: true if the users can see Non Published Tests
      verEQuestions:
        type: boolean
        description: true if the users can see Non Published Questions
      verPQuestions:
        type: boolean
        description: true if the users can see Published Questions
      verAnswers:
        type: boolean
        description: true if the users can see Answers
      changeRoles:
        type: boolean
        description: true if the users can change anothers user TipoRol if its source priority is less important and target is at most equal
      tenerTeams:
        type: boolean
        description: true if the users can have teams
      tenerEQuestions:
        type: boolean
        description: true if the users can have non published questions
      tenerETests:
        type: boolean
        description: true if the users can have non published questions
      tenerPTests:
        type: boolean
        description: true if the users can have published tests
      adminPTests:
        type: boolean
        description: true if the users can administrate PublishedTests
      adminETests:
        type: boolean
        description: true if the users can administrate Non Published Tests
      adminEQuestions:
        type: boolean
        description: true if the users can administrate Non Published Questions
      adminAnswers:
        type: boolean
        description: true if the users can administrate Answers
      adminUsers:
        type: boolean
        description: true if the users can administrate Users
      adminTeams:
        type: boolean
        description: true if the users can administrate Teams
      adminConfiguration:
        type: boolean
        description: true if the users can administrate Server Configuration parameters
      adminPermissions:
        type: boolean
        description: true if the users can administrate TipoRol permissions
      tipoInicial:
        type: boolean
        description: true if new users will be this TipoRol at first
  Role:
    type: object
    required:
    - rolId
    properties:
      rolId:
        type: integer
        example: 2
  Team:
    type: object
    required:
    - teamname
    - soloProfesores
    properties:
      teamname:
        type: string
        example: devtestTeam
        pattern: '^[^@ \t\r\n]+$'
        maxLength: 40
      description:
        type: string
        example: DevTest Team
      soloProfesores:
        type: boolean
        example: true
  PasswordUpdate:
    type: object
    required:
    - oldpass
    - newpass
    properties:
      oldpass:
        type: string
        example: password
        format: password
        pattern: '^.{6,}$'
      newpass:
        type: string
        example: password
        format: password
        pattern: '^.{6,}$'
  PasswordRecovery:
    type: object
    required:
    - mailtoken
    - newpass
    properties:
      mailtoken:
        type: string
      newpass:
        type: string
        example: password
        format: password
        pattern: '^.{6,}$'
  Password:
    type: object
    required:
    - password
    properties:
      password:
        type: string
        example: password
        format: password
        pattern: '^.{6,}$'
  Question:
    type: object
    required:
    - title
    - question
    - estimatedTime
    - autoCorrect
    - editable
    - username
    - tipoPregunta
    - accesoPublicoNoPublicada
    - penalizacion
    properties:
      id:
        type: integer
        example: 1
      title:
        type: string
        example: Paralelismo en C
        maxLength: 100
      question:
        type: string
        example: ¿Cual es el lenguaje que tiene un nombre más largo de todos?
      estimatedTime:
        type: integer
        example: 60
        minimum: 0
      autoCorrect:
        type: boolean
        example: true
      editable:
        type: boolean
        example: false
      username:
        type: string
        example: javgat
      eleccionUnica:
        type: boolean
        example: false
      solucion:
        type: string
        example: Javadoc
      tipoPregunta:
        type: string
        enum: [opciones, string, codigo]
      valorFinal:
        type: integer
        minimum: 0
      accesoPublicoNoPublicada:
        type: boolean
        example: false
      isRespondida:
        type: boolean
        description: only present in GetQuestionsFromAnswer
        example: false
      penalizacion:
        type: integer
        minimum: 0
        maximum: 100
      cantidadFavoritos:
        type: integer
        minimum: 0
      posicion:
        type: integer
        example: 5
      prevId:
        type: integer
        example: 1
      nextId:
        type: integer
        example: 4
  Test:
    type: object
    required:
    - title
    - description
    - maxMinutes
    - accesoPublico
    - editable
    - username
    - accesoPublicoNoPublicado
    - autoCorrect
    - visibilidad
    - tiempoEstricto
    - maxIntentos
    properties:
      id:
        type: integer
        example: 1
      title:
        type: string
        example: Test de introduccion a Java
        maxLength: 100
      description:
        type: string
        example: En este test se evaluaran los conocimientos respecto al lenguaje de programación Java
      maxMinutes:
        type: integer
        example: 60
        minimum: 0
      accesoPublico:
        type: boolean
        example: true
      editable:
        type: boolean
        example: false
      username:
        type: string
        example: javgat
      accesoPublicoNoPublicado:
        type: boolean
        example: true
      horaCreacion:
        type: string
        format: date-time
        example: 2021-02-25 14:44:55
      originalTestID:
        type: integer
        example: 15
        default: -1
      notaMaxima:
        type: integer
        example: 10
      cantidadRespuestasDelUsuario:
        type: integer
        description: only present in GetSolvableTestFromUser
        example: 1
      autoCorrect:
        type: boolean
        example: true
      visibilidad:
        type: string
        enum: [alEntregar, alCorregir, manual]
      cantidadFavoritos:
        type: integer
        minimum: 0
      tiempoEstricto:
        type: boolean
        example: true
      maxIntentos:
        type: integer
        description: Maximum of tries that a user has solving a test. If <1, there is no limit of tries.
  PTestUpdate:
    type: object
    required:
    - maxMinutes
    - accesoPublico
    - autoCorrect
    - visibilidad
    - tiempoEstricto
    - maxIntentos
    properties:
      maxMinutes:
        type: integer
        example: 60
        minimum: 0
      accesoPublico:
        type: boolean
        example: true
      autoCorrect:
        type: boolean
        example: true
      visibilidad:
        type: string
        enum: [alEntregar, alCorregir, manual]
      tiempoEstricto:
        type: boolean
        example: true
      maxIntentos:
        type: integer
        description: Maximum of tries that a user has solving a test. If <1, there is no limit of tries.

  Answer:
    type: object
    required:
    - entregado
    properties:
      id:
        type: integer
        example: 1
      startTime:
        type: string
        example: 2021-02-25 14:44:55
        format: date-time
      finishTime:
        type: string
        example: 2021-02-25 14:44:55
        format: date-time
      entregado:
        type: boolean
        example: false
      testid:
        type: integer
        example: 343
      username:
        type: string
        example: javgat
      puntuacion:
        type: number
        example: 8.7
      corregida:
        type: boolean
        example: false
      visibleParaUsuario:
        type: boolean
        example: true
  QuestionAnswer:
    type: object
    required:
      - corregida
      - puntuacion
      - idPregunta
      - idRespuesta
    properties:
      respuesta:
        type: string
        example: Javadoc
      idPregunta:
        type: integer
        example: 1
      idRespuesta:
        type: integer
        example: 1
      puntuacion:
        type: integer
        description: Percentage of the max points given to the answer
        example: 1
        minimum: -100
        maximum: 100
      corregida:
        type: boolean
        example: true
      indicesOpciones:
        type: array
        items: 
          type: integer
      username:
        type: string
        example: joselito97
      compila:
        type: boolean
        example: false
        default: false
  Tag:
    type: object
    required:
    - tag
    properties:
      tag:
        type: string
        example: Java 
        maxLength: 100   
  Review:
    type: object
    required:
    - puntuacion
    properties:
      puntuacion:
        type: integer
        example: 100
  TestPregunta:
    type: object
    required:
    - valorFinal
    - posicion
    properties:
      valorFinal:
        type: integer
        example: 1
        minimum: 0
      posicion:
        type: integer
        example: 5
  Error:
    type: object
    required:
    - message
    properties:
      message:
        type: string
        example: Object not found
  Option:
    type: object
    required:
    - texto
    properties:
      indice:
        type: integer
        example: 1
      preguntaid:
        type: integer
        example: 1
      texto:
        type: string
        example: Esta opcion es la buena
      correcta:
        type: boolean
        example: false
        default: false
  PublishTestParams:
    type: object
    required:
    - title
    - accesoPublico
    - autoCorrect
    - visibilidad
    - maxMinutes
    - tiempoEstricto
    properties:
      title:
        type: string
        example: Nuevo titulo
        maxLength: 100
      accesoPublico:
        type: boolean
        description: True si no necesitaras invitacion para hacer el test
      autoCorrect:
        type: boolean
      visibilidad:
        type: string
        enum: [alEntregar, alCorregir, manual]
      maxMinutes:
        type: integer
        example: 4
      tiempoEstricto:
        type: boolean
  EmailConfiguration:
    type: object
    required:
    - from
    - password
    - serverhost
    - serverport
    - frontendurl
    properties:
      from:
        type: string
        example: carlos@mail.com
        format: email
        pattern: '^[^@ \t\r\n]+@[^@ \t\r\n]+\.[^@ \t\r\n]+$'
      password:
        type: string
        example: password
      serverhost:
        type: string
        example: smtp.gmail.com
      serverport:
        type: integer
        example: 587
      frontendurl:
        type: string
        example: https://devtest.com

  Message:
    type: object
    required:
    - body
    - sendEmail
    properties:
      body:
        type: string
        example: Este test es para que lo hagais en vuestra casa
      sendEmail:
        type: boolean
        example: true
        description: True if you want to send an email, false if not.

  Prueba:
    type: object
    required:
    - entrada
    - salida
    - visible
    - postEntrega
    properties:
      id:
        type: integer
        example: 1
      preguntaid:
        type: integer
        example: 1
      entrada:
        type: string
        example: 3 3 0 0
      salida:
        type: string
        example: 2 2
      visible:
        type: boolean
        example: true
      postEntrega:
        type: boolean
        example: true
securityDefinitions:
  BearerCookie:
    type: apiKey
    in: header # Realmente en cookie, pero las cookies estan en header
    name: Cookie # La cookie Bearer-Cookie
  ReAuthCookie:
    type: apiKey
    in: header # Realmente en cookie, pero las cookies estan en header
    name: Cookie # La cookie ReAuth-Cookie
  NoRegistered:
    type: apiKey
    in: header
    name: NotLoggedIn # Esta API KEY valdra true si el cliente quiere que se procese la peticion como si no estuviera registrado
host: localhost
basePath: /DevTest
schemes:
 - https
 - http